
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080047b0  080047b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004820  08004820  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004820  08004820  00014820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004828  08004828  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004828  08004828  00014828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800482c  0800482c  0001482c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  0800483c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  0800483c  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac14  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cee  00000000  00000000  0002ac48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000aa0  00000000  00000000  0002c938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009a8  00000000  00000000  0002d3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001734a  00000000  00000000  0002dd80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009ac4  00000000  00000000  000450ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095485  00000000  00000000  0004eb8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4013  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000253c  00000000  00000000  000e4090  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004798 	.word	0x08004798

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004798 	.word	0x08004798

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	0004      	movs	r4, r0
 800043c:	b082      	sub	sp, #8
 800043e:	000d      	movs	r5, r1
 8000440:	4691      	mov	r9, r2
 8000442:	4698      	mov	r8, r3
 8000444:	428b      	cmp	r3, r1
 8000446:	d82f      	bhi.n	80004a8 <__udivmoddi4+0x78>
 8000448:	d02c      	beq.n	80004a4 <__udivmoddi4+0x74>
 800044a:	4641      	mov	r1, r8
 800044c:	4648      	mov	r0, r9
 800044e:	f000 f8b1 	bl	80005b4 <__clzdi2>
 8000452:	0029      	movs	r1, r5
 8000454:	0006      	movs	r6, r0
 8000456:	0020      	movs	r0, r4
 8000458:	f000 f8ac 	bl	80005b4 <__clzdi2>
 800045c:	1a33      	subs	r3, r6, r0
 800045e:	469c      	mov	ip, r3
 8000460:	3b20      	subs	r3, #32
 8000462:	469a      	mov	sl, r3
 8000464:	d500      	bpl.n	8000468 <__udivmoddi4+0x38>
 8000466:	e076      	b.n	8000556 <__udivmoddi4+0x126>
 8000468:	464b      	mov	r3, r9
 800046a:	4652      	mov	r2, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	001f      	movs	r7, r3
 8000470:	464b      	mov	r3, r9
 8000472:	4662      	mov	r2, ip
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d828      	bhi.n	80004ce <__udivmoddi4+0x9e>
 800047c:	d025      	beq.n	80004ca <__udivmoddi4+0x9a>
 800047e:	4653      	mov	r3, sl
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5a>
 8000488:	e07b      	b.n	8000582 <__udivmoddi4+0x152>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	4652      	mov	r2, sl
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4662      	mov	r2, ip
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e018      	b.n	80004d6 <__udivmoddi4+0xa6>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9d0      	bls.n	800044a <__udivmoddi4+0x1a>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8a>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b002      	add	sp, #8
 80004c0:	bc1c      	pop	{r2, r3, r4}
 80004c2:	4690      	mov	r8, r2
 80004c4:	4699      	mov	r9, r3
 80004c6:	46a2      	mov	sl, r4
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d9d7      	bls.n	800047e <__udivmoddi4+0x4e>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	4663      	mov	r3, ip
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0e9      	beq.n	80004b0 <__udivmoddi4+0x80>
 80004dc:	07fb      	lsls	r3, r7, #31
 80004de:	4698      	mov	r8, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0872      	lsrs	r2, r6, #1
 80004e4:	430a      	orrs	r2, r1
 80004e6:	087b      	lsrs	r3, r7, #1
 80004e8:	4666      	mov	r6, ip
 80004ea:	e00e      	b.n	800050a <__udivmoddi4+0xda>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	d101      	bne.n	80004f4 <__udivmoddi4+0xc4>
 80004f0:	42a2      	cmp	r2, r4
 80004f2:	d80c      	bhi.n	800050e <__udivmoddi4+0xde>
 80004f4:	1aa4      	subs	r4, r4, r2
 80004f6:	419d      	sbcs	r5, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	1924      	adds	r4, r4, r4
 80004fc:	416d      	adcs	r5, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	3e01      	subs	r6, #1
 8000502:	1824      	adds	r4, r4, r0
 8000504:	414d      	adcs	r5, r1
 8000506:	2e00      	cmp	r6, #0
 8000508:	d006      	beq.n	8000518 <__udivmoddi4+0xe8>
 800050a:	42ab      	cmp	r3, r5
 800050c:	d9ee      	bls.n	80004ec <__udivmoddi4+0xbc>
 800050e:	3e01      	subs	r6, #1
 8000510:	1924      	adds	r4, r4, r4
 8000512:	416d      	adcs	r5, r5
 8000514:	2e00      	cmp	r6, #0
 8000516:	d1f8      	bne.n	800050a <__udivmoddi4+0xda>
 8000518:	9800      	ldr	r0, [sp, #0]
 800051a:	9901      	ldr	r1, [sp, #4]
 800051c:	4653      	mov	r3, sl
 800051e:	1900      	adds	r0, r0, r4
 8000520:	4169      	adcs	r1, r5
 8000522:	2b00      	cmp	r3, #0
 8000524:	db23      	blt.n	800056e <__udivmoddi4+0x13e>
 8000526:	002b      	movs	r3, r5
 8000528:	4652      	mov	r2, sl
 800052a:	40d3      	lsrs	r3, r2
 800052c:	002a      	movs	r2, r5
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	001c      	movs	r4, r3
 8000534:	4653      	mov	r3, sl
 8000536:	0015      	movs	r5, r2
 8000538:	2b00      	cmp	r3, #0
 800053a:	db2d      	blt.n	8000598 <__udivmoddi4+0x168>
 800053c:	0026      	movs	r6, r4
 800053e:	4657      	mov	r7, sl
 8000540:	40be      	lsls	r6, r7
 8000542:	0033      	movs	r3, r6
 8000544:	0026      	movs	r6, r4
 8000546:	4667      	mov	r7, ip
 8000548:	40be      	lsls	r6, r7
 800054a:	0032      	movs	r2, r6
 800054c:	1a80      	subs	r0, r0, r2
 800054e:	4199      	sbcs	r1, r3
 8000550:	9000      	str	r0, [sp, #0]
 8000552:	9101      	str	r1, [sp, #4]
 8000554:	e7ac      	b.n	80004b0 <__udivmoddi4+0x80>
 8000556:	4662      	mov	r2, ip
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	464a      	mov	r2, r9
 800055e:	40da      	lsrs	r2, r3
 8000560:	4661      	mov	r1, ip
 8000562:	0013      	movs	r3, r2
 8000564:	4642      	mov	r2, r8
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	431f      	orrs	r7, r3
 800056c:	e780      	b.n	8000470 <__udivmoddi4+0x40>
 800056e:	4662      	mov	r2, ip
 8000570:	2320      	movs	r3, #32
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	4666      	mov	r6, ip
 8000578:	409a      	lsls	r2, r3
 800057a:	0023      	movs	r3, r4
 800057c:	40f3      	lsrs	r3, r6
 800057e:	4313      	orrs	r3, r2
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0xfc>
 8000582:	4662      	mov	r2, ip
 8000584:	2320      	movs	r3, #32
 8000586:	2100      	movs	r1, #0
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	9100      	str	r1, [sp, #0]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	40da      	lsrs	r2, r3
 8000594:	9201      	str	r2, [sp, #4]
 8000596:	e780      	b.n	800049a <__udivmoddi4+0x6a>
 8000598:	2320      	movs	r3, #32
 800059a:	4662      	mov	r2, ip
 800059c:	0026      	movs	r6, r4
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	40de      	lsrs	r6, r3
 80005a2:	002f      	movs	r7, r5
 80005a4:	46b0      	mov	r8, r6
 80005a6:	4666      	mov	r6, ip
 80005a8:	40b7      	lsls	r7, r6
 80005aa:	4646      	mov	r6, r8
 80005ac:	003b      	movs	r3, r7
 80005ae:	4333      	orrs	r3, r6
 80005b0:	e7c8      	b.n	8000544 <__udivmoddi4+0x114>
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__clzdi2>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	2900      	cmp	r1, #0
 80005b8:	d103      	bne.n	80005c2 <__clzdi2+0xe>
 80005ba:	f000 f807 	bl	80005cc <__clzsi2>
 80005be:	3020      	adds	r0, #32
 80005c0:	e002      	b.n	80005c8 <__clzdi2+0x14>
 80005c2:	1c08      	adds	r0, r1, #0
 80005c4:	f000 f802 	bl	80005cc <__clzsi2>
 80005c8:	bd10      	pop	{r4, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzsi2>:
 80005cc:	211c      	movs	r1, #28
 80005ce:	2301      	movs	r3, #1
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0xe>
 80005d6:	0c00      	lsrs	r0, r0, #16
 80005d8:	3910      	subs	r1, #16
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	4298      	cmp	r0, r3
 80005de:	d301      	bcc.n	80005e4 <__clzsi2+0x18>
 80005e0:	0a00      	lsrs	r0, r0, #8
 80005e2:	3908      	subs	r1, #8
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0x22>
 80005ea:	0900      	lsrs	r0, r0, #4
 80005ec:	3904      	subs	r1, #4
 80005ee:	a202      	add	r2, pc, #8	; (adr r2, 80005f8 <__clzsi2+0x2c>)
 80005f0:	5c10      	ldrb	r0, [r2, r0]
 80005f2:	1840      	adds	r0, r0, r1
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	02020304 	.word	0x02020304
 80005fc:	01010101 	.word	0x01010101
	...

08000608 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <HAL_Init+0x3c>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <HAL_Init+0x3c>)
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	0049      	lsls	r1, r1, #1
 800061e:	430a      	orrs	r2, r1
 8000620:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000622:	2000      	movs	r0, #0
 8000624:	f000 f810 	bl	8000648 <HAL_InitTick>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d003      	beq.n	8000634 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
 8000632:	e001      	b.n	8000638 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000634:	f003 ff5a 	bl	80044ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000638:	1dfb      	adds	r3, r7, #7
 800063a:	781b      	ldrb	r3, [r3, #0]
}
 800063c:	0018      	movs	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	b002      	add	sp, #8
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40022000 	.word	0x40022000

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000650:	230f      	movs	r3, #15
 8000652:	18fb      	adds	r3, r7, r3
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <HAL_InitTick+0x88>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d02b      	beq.n	80006b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <HAL_InitTick+0x8c>)
 8000662:	681c      	ldr	r4, [r3, #0]
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <HAL_InitTick+0x88>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	0019      	movs	r1, r3
 800066a:	23fa      	movs	r3, #250	; 0xfa
 800066c:	0098      	lsls	r0, r3, #2
 800066e:	f7ff fd49 	bl	8000104 <__udivsi3>
 8000672:	0003      	movs	r3, r0
 8000674:	0019      	movs	r1, r3
 8000676:	0020      	movs	r0, r4
 8000678:	f7ff fd44 	bl	8000104 <__udivsi3>
 800067c:	0003      	movs	r3, r0
 800067e:	0018      	movs	r0, r3
 8000680:	f000 ff33 	bl	80014ea <HAL_SYSTICK_Config>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d112      	bne.n	80006ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b03      	cmp	r3, #3
 800068c:	d80a      	bhi.n	80006a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	2301      	movs	r3, #1
 8000692:	425b      	negs	r3, r3
 8000694:	2200      	movs	r2, #0
 8000696:	0018      	movs	r0, r3
 8000698:	f000 ff02 	bl	80014a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <HAL_InitTick+0x90>)
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	e00d      	b.n	80006c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006a4:	230f      	movs	r3, #15
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
 80006ac:	e008      	b.n	80006c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ae:	230f      	movs	r3, #15
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e003      	b.n	80006c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006b8:	230f      	movs	r3, #15
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006c0:	230f      	movs	r3, #15
 80006c2:	18fb      	adds	r3, r7, r3
 80006c4:	781b      	ldrb	r3, [r3, #0]
}
 80006c6:	0018      	movs	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b005      	add	sp, #20
 80006cc:	bd90      	pop	{r4, r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	20000004 	.word	0x20000004
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000000 	.word	0x20000000

080006dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <HAL_IncTick+0x18>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <HAL_IncTick+0x1c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	18d2      	adds	r2, r2, r3
 80006ea:	4b02      	ldr	r3, [pc, #8]	; (80006f4 <HAL_IncTick+0x18>)
 80006ec:	601a      	str	r2, [r3, #0]
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000028 	.word	0x20000028
 80006f8:	20000004 	.word	0x20000004

080006fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000700:	4b02      	ldr	r3, [pc, #8]	; (800070c <HAL_GetTick+0x10>)
 8000702:	681b      	ldr	r3, [r3, #0]
}
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000028 	.word	0x20000028

08000710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000718:	f7ff fff0 	bl	80006fc <HAL_GetTick>
 800071c:	0003      	movs	r3, r0
 800071e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	3301      	adds	r3, #1
 8000728:	d004      	beq.n	8000734 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_Delay+0x40>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	18d3      	adds	r3, r2, r3
 8000732:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	f7ff ffe1 	bl	80006fc <HAL_GetTick>
 800073a:	0002      	movs	r2, r0
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	429a      	cmp	r2, r3
 8000744:	d8f7      	bhi.n	8000736 <HAL_Delay+0x26>
  {
  }
}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b004      	add	sp, #16
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	20000004 	.word	0x20000004

08000754 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a05      	ldr	r2, [pc, #20]	; (8000778 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000764:	401a      	ands	r2, r3
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	431a      	orrs	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	601a      	str	r2, [r3, #0]
}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b002      	add	sp, #8
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	fe3fffff 	.word	0xfe3fffff

0800077c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	23e0      	movs	r3, #224	; 0xe0
 800078a:	045b      	lsls	r3, r3, #17
 800078c:	4013      	ands	r3, r2
}
 800078e:	0018      	movs	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	b002      	add	sp, #8
 8000794:	bd80      	pop	{r7, pc}

08000796 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b084      	sub	sp, #16
 800079a:	af00      	add	r7, sp, #0
 800079c:	60f8      	str	r0, [r7, #12]
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	68ba      	ldr	r2, [r7, #8]
 80007a8:	2104      	movs	r1, #4
 80007aa:	400a      	ands	r2, r1
 80007ac:	2107      	movs	r1, #7
 80007ae:	4091      	lsls	r1, r2
 80007b0:	000a      	movs	r2, r1
 80007b2:	43d2      	mvns	r2, r2
 80007b4:	401a      	ands	r2, r3
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	2104      	movs	r1, #4
 80007ba:	400b      	ands	r3, r1
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	4099      	lsls	r1, r3
 80007c0:	000b      	movs	r3, r1
 80007c2:	431a      	orrs	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b004      	add	sp, #16
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	68da      	ldr	r2, [r3, #12]
 80007dc:	23c0      	movs	r3, #192	; 0xc0
 80007de:	011b      	lsls	r3, r3, #4
 80007e0:	4013      	ands	r3, r2
 80007e2:	d101      	bne.n	80007e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80007e4:	2301      	movs	r3, #1
 80007e6:	e000      	b.n	80007ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	0018      	movs	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b002      	add	sp, #8
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b084      	sub	sp, #16
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	211f      	movs	r1, #31
 8000806:	400a      	ands	r2, r1
 8000808:	210f      	movs	r1, #15
 800080a:	4091      	lsls	r1, r2
 800080c:	000a      	movs	r2, r1
 800080e:	43d2      	mvns	r2, r2
 8000810:	401a      	ands	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	0e9b      	lsrs	r3, r3, #26
 8000816:	210f      	movs	r1, #15
 8000818:	4019      	ands	r1, r3
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	201f      	movs	r0, #31
 800081e:	4003      	ands	r3, r0
 8000820:	4099      	lsls	r1, r3
 8000822:	000b      	movs	r3, r1
 8000824:	431a      	orrs	r2, r3
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b004      	add	sp, #16
 8000830:	bd80      	pop	{r7, pc}

08000832 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
 800083a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	035b      	lsls	r3, r3, #13
 8000844:	0b5b      	lsrs	r3, r3, #13
 8000846:	431a      	orrs	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b002      	add	sp, #8
 8000852:	bd80      	pop	{r7, pc}

08000854 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	0352      	lsls	r2, r2, #13
 8000866:	0b52      	lsrs	r2, r2, #13
 8000868:	43d2      	mvns	r2, r2
 800086a:	401a      	ands	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b002      	add	sp, #8
 8000876:	bd80      	pop	{r7, pc}

08000878 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	2203      	movs	r2, #3
 8000886:	4013      	ands	r3, r2
}
 8000888:	0018      	movs	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	b002      	add	sp, #8
 800088e:	bd80      	pop	{r7, pc}

08000890 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	68ba      	ldr	r2, [r7, #8]
 80008a2:	0212      	lsls	r2, r2, #8
 80008a4:	43d2      	mvns	r2, r2
 80008a6:	401a      	ands	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	021b      	lsls	r3, r3, #8
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	400b      	ands	r3, r1
 80008b0:	4904      	ldr	r1, [pc, #16]	; (80008c4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80008b2:	400b      	ands	r3, r1
 80008b4:	431a      	orrs	r2, r3
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b004      	add	sp, #16
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	07ffff00 	.word	0x07ffff00

080008c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	4a05      	ldr	r2, [pc, #20]	; (80008ec <LL_ADC_EnableInternalRegulator+0x24>)
 80008d6:	4013      	ands	r3, r2
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	0552      	lsls	r2, r2, #21
 80008dc:	431a      	orrs	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b002      	add	sp, #8
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	6fffffe8 	.word	0x6fffffe8

080008f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	055b      	lsls	r3, r3, #21
 8000900:	401a      	ands	r2, r3
 8000902:	2380      	movs	r3, #128	; 0x80
 8000904:	055b      	lsls	r3, r3, #21
 8000906:	429a      	cmp	r2, r3
 8000908:	d101      	bne.n	800090e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800090a:	2301      	movs	r3, #1
 800090c:	e000      	b.n	8000910 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800090e:	2300      	movs	r3, #0
}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	b002      	add	sp, #8
 8000916:	bd80      	pop	{r7, pc}

08000918 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	2201      	movs	r2, #1
 8000926:	4013      	ands	r3, r2
 8000928:	2b01      	cmp	r3, #1
 800092a:	d101      	bne.n	8000930 <LL_ADC_IsEnabled+0x18>
 800092c:	2301      	movs	r3, #1
 800092e:	e000      	b.n	8000932 <LL_ADC_IsEnabled+0x1a>
 8000930:	2300      	movs	r3, #0
}
 8000932:	0018      	movs	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	b002      	add	sp, #8
 8000938:	bd80      	pop	{r7, pc}

0800093a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	2204      	movs	r2, #4
 8000948:	4013      	ands	r3, r2
 800094a:	2b04      	cmp	r3, #4
 800094c:	d101      	bne.n	8000952 <LL_ADC_REG_IsConversionOngoing+0x18>
 800094e:	2301      	movs	r3, #1
 8000950:	e000      	b.n	8000954 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000952:	2300      	movs	r3, #0
}
 8000954:	0018      	movs	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	b002      	add	sp, #8
 800095a:	bd80      	pop	{r7, pc}

0800095c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000964:	231f      	movs	r3, #31
 8000966:	18fb      	adds	r3, r7, r3
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d101      	bne.n	8000982 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e1aa      	b.n	8000cd8 <HAL_ADC_Init+0x37c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000986:	2b00      	cmp	r3, #0
 8000988:	d10a      	bne.n	80009a0 <HAL_ADC_Init+0x44>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	0018      	movs	r0, r3
 800098e:	f003 fdd1 	bl	8004534 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2200      	movs	r2, #0
 8000996:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2254      	movs	r2, #84	; 0x54
 800099c:	2100      	movs	r1, #0
 800099e:	5499      	strb	r1, [r3, r2]
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff ffa3 	bl	80008f0 <LL_ADC_IsInternalRegulatorEnabled>
 80009aa:	1e03      	subs	r3, r0, #0
 80009ac:	d114      	bne.n	80009d8 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	0018      	movs	r0, r3
 80009b4:	f7ff ff88 	bl	80008c8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80009b8:	4bc9      	ldr	r3, [pc, #804]	; (8000ce0 <HAL_ADC_Init+0x384>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	49c9      	ldr	r1, [pc, #804]	; (8000ce4 <HAL_ADC_Init+0x388>)
 80009be:	0018      	movs	r0, r3
 80009c0:	f7ff fba0 	bl	8000104 <__udivsi3>
 80009c4:	0003      	movs	r3, r0
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 80009ca:	e002      	b.n	80009d2 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1f9      	bne.n	80009cc <HAL_ADC_Init+0x70>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	0018      	movs	r0, r3
 80009de:	f7ff ff87 	bl	80008f0 <LL_ADC_IsInternalRegulatorEnabled>
 80009e2:	1e03      	subs	r3, r0, #0
 80009e4:	d10f      	bne.n	8000a06 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ea:	2210      	movs	r2, #16
 80009ec:	431a      	orrs	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009f6:	2201      	movs	r2, #1
 80009f8:	431a      	orrs	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 80009fe:	231f      	movs	r3, #31
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f7ff ff95 	bl	800093a <LL_ADC_REG_IsConversionOngoing>
 8000a10:	0003      	movs	r3, r0
 8000a12:	60fb      	str	r3, [r7, #12]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a18:	2210      	movs	r2, #16
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	d000      	beq.n	8000a20 <HAL_ADC_Init+0xc4>
 8000a1e:	e14e      	b.n	8000cbe <HAL_ADC_Init+0x362>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d000      	beq.n	8000a28 <HAL_ADC_Init+0xcc>
 8000a26:	e14a      	b.n	8000cbe <HAL_ADC_Init+0x362>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2c:	4aae      	ldr	r2, [pc, #696]	; (8000ce8 <HAL_ADC_Init+0x38c>)
 8000a2e:	4013      	ands	r3, r2
 8000a30:	2202      	movs	r2, #2
 8000a32:	431a      	orrs	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f7ff ff6b 	bl	8000918 <LL_ADC_IsEnabled>
 8000a42:	1e03      	subs	r3, r0, #0
 8000a44:	d137      	bne.n	8000ab6 <HAL_ADC_Init+0x15a>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	2218      	movs	r2, #24
 8000a4e:	4393      	bics	r3, r2
 8000a50:	0019      	movs	r1, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler.                                                */
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	691b      	ldr	r3, [r3, #16]
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	0899      	lsrs	r1, r3, #2
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	0f9b      	lsrs	r3, r3, #30
 8000a6e:	079a      	lsls	r2, r3, #30
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	430a      	orrs	r2, r1
 8000a76:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_CKMODE                            ,
                 hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE );
      
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	685a      	ldr	r2, [r3, #4]
 8000a7c:	23c0      	movs	r3, #192	; 0xc0
 8000a7e:	061b      	lsls	r3, r3, #24
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d018      	beq.n	8000ab6 <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	05db      	lsls	r3, r3, #23
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d012      	beq.n	8000ab6 <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	061b      	lsls	r3, r3, #24
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d00c      	beq.n	8000ab6 <HAL_ADC_Init+0x15a>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 8000a9c:	4b93      	ldr	r3, [pc, #588]	; (8000cec <HAL_ADC_Init+0x390>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a93      	ldr	r2, [pc, #588]	; (8000cf0 <HAL_ADC_Init+0x394>)
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	685a      	ldr	r2, [r3, #4]
 8000aaa:	23f0      	movs	r3, #240	; 0xf0
 8000aac:	039b      	lsls	r3, r3, #14
 8000aae:	401a      	ands	r2, r3
 8000ab0:	4b8e      	ldr	r3, [pc, #568]	; (8000cec <HAL_ADC_Init+0x390>)
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	7e1b      	ldrb	r3, [r3, #24]
 8000aba:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	7e5b      	ldrb	r3, [r3, #25]
 8000ac0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ac2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	7e9b      	ldrb	r3, [r3, #26]
 8000ac8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000aca:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <HAL_ADC_Init+0x17e>
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	015b      	lsls	r3, r3, #5
 8000ad8:	e000      	b.n	8000adc <HAL_ADC_Init+0x180>
 8000ada:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000adc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000ae2:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	691b      	ldr	r3, [r3, #16]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	da04      	bge.n	8000af6 <HAL_ADC_Init+0x19a>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	691b      	ldr	r3, [r3, #16]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	085b      	lsrs	r3, r3, #1
 8000af4:	e001      	b.n	8000afa <HAL_ADC_Init+0x19e>
 8000af6:	2380      	movs	r3, #128	; 0x80
 8000af8:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                             |
 8000afa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	212c      	movs	r1, #44	; 0x2c
 8000b00:	5c5b      	ldrb	r3, [r3, r1]
 8000b02:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8000b04:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2220      	movs	r2, #32
 8000b10:	5c9b      	ldrb	r3, [r3, r2]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d115      	bne.n	8000b42 <HAL_ADC_Init+0x1e6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	7e9b      	ldrb	r3, [r3, #26]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d105      	bne.n	8000b2a <HAL_ADC_Init+0x1ce>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	2280      	movs	r2, #128	; 0x80
 8000b22:	0252      	lsls	r2, r2, #9
 8000b24:	4313      	orrs	r3, r2
 8000b26:	61bb      	str	r3, [r7, #24]
 8000b28:	e00b      	b.n	8000b42 <HAL_ADC_Init+0x1e6>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	2220      	movs	r2, #32
 8000b30:	431a      	orrs	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d00a      	beq.n	8000b60 <HAL_ADC_Init+0x204>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b4e:	23e0      	movs	r3, #224	; 0xe0
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge );
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  hadc->Init.Oversampling.RightBitShift |
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8000b68:	431a      	orrs	r2, r3
                  hadc->Init.Oversampling.TriggeredMode |
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                  hadc->Init.Oversampling.RightBitShift |
 8000b6e:	431a      	orrs	r2, r3
                  hadc->Init.TriggerFrequencyMode
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                  hadc->Init.Oversampling.TriggeredMode |
 8000b74:	4313      	orrs	r3, r2
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	617b      	str	r3, [r7, #20]
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	223c      	movs	r2, #60	; 0x3c
 8000b80:	5c9b      	ldrb	r3, [r3, r2]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d103      	bne.n	8000b8e <HAL_ADC_Init+0x232>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	617b      	str	r3, [r7, #20]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	4a57      	ldr	r2, [pc, #348]	; (8000cf4 <HAL_ADC_Init+0x398>)
 8000b96:	4013      	ands	r3, r2
 8000b98:	0019      	movs	r1, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	691b      	ldr	r3, [r3, #16]
 8000baa:	4a53      	ldr	r2, [pc, #332]	; (8000cf8 <HAL_ADC_Init+0x39c>)
 8000bac:	4013      	ands	r3, r2
 8000bae:	0019      	movs	r1, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	697a      	ldr	r2, [r7, #20]
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS       ,
               tmpCFGR2              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6818      	ldr	r0, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc2:	001a      	movs	r2, r3
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f7ff fde6 	bl	8000796 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6818      	ldr	r0, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bd2:	494a      	ldr	r1, [pc, #296]	; (8000cfc <HAL_ADC_Init+0x3a0>)
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	f7ff fdde 	bl	8000796 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	691b      	ldr	r3, [r3, #16]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d109      	bne.n	8000bf6 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2110      	movs	r1, #16
 8000bee:	4249      	negs	r1, r1
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
 8000bf4:	e03c      	b.n	8000c70 <HAL_ADC_Init+0x314>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	691a      	ldr	r2, [r3, #16]
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	039b      	lsls	r3, r3, #14
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d136      	bne.n	8000c70 <HAL_ADC_Init+0x314>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	e00c      	b.n	8000c22 <HAL_ADC_Init+0x2c6>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	40da      	lsrs	r2, r3
 8000c12:	0013      	movs	r3, r2
 8000c14:	220f      	movs	r2, #15
 8000c16:	4013      	ands	r3, r2
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d006      	beq.n	8000c2a <HAL_ADC_Init+0x2ce>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	2b07      	cmp	r3, #7
 8000c26:	d9ef      	bls.n	8000c08 <HAL_ADC_Init+0x2ac>
 8000c28:	e000      	b.n	8000c2c <HAL_ADC_Init+0x2d0>
        {
          break;
 8000c2a:	46c0      	nop			; (mov r8, r8)
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d109      	bne.n	8000c46 <HAL_ADC_Init+0x2ea>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2110      	movs	r1, #16
 8000c3e:	4249      	negs	r1, r1
 8000c40:	430a      	orrs	r2, r1
 8000c42:	629a      	str	r2, [r3, #40]	; 0x28
 8000c44:	e014      	b.n	8000c70 <HAL_ADC_Init+0x314>
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69db      	ldr	r3, [r3, #28]
 8000c50:	4a2b      	ldr	r2, [pc, #172]	; (8000d00 <HAL_ADC_Init+0x3a4>)
 8000c52:	4694      	mov	ip, r2
 8000c54:	4463      	add	r3, ip
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	221c      	movs	r2, #28
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	2210      	movs	r2, #16
 8000c5e:	4252      	negs	r2, r2
 8000c60:	409a      	lsls	r2, r3
 8000c62:	0011      	movs	r1, r2
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	4a23      	ldr	r2, [pc, #140]	; (8000d04 <HAL_ADC_Init+0x3a8>)
 8000c78:	4013      	ands	r3, r2
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d10b      	bne.n	8000c98 <HAL_ADC_Init+0x33c>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	4393      	bics	r3, r2
 8000c8e:	2201      	movs	r2, #1
 8000c90:	431a      	orrs	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000c96:	e01c      	b.n	8000cd2 <HAL_ADC_Init+0x376>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9c:	2212      	movs	r2, #18
 8000c9e:	4393      	bics	r3, r2
 8000ca0:	2210      	movs	r2, #16
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cac:	2201      	movs	r2, #1
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	65da      	str	r2, [r3, #92]	; 0x5c
      
      tmp_hal_status = HAL_ERROR;
 8000cb4:	231f      	movs	r3, #31
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000cbc:	e009      	b.n	8000cd2 <HAL_ADC_Init+0x376>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc2:	2210      	movs	r2, #16
 8000cc4:	431a      	orrs	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8000cca:	231f      	movs	r3, #31
 8000ccc:	18fb      	adds	r3, r7, r3
 8000cce:	2201      	movs	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cd2:	231f      	movs	r3, #31
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	781b      	ldrb	r3, [r3, #0]
}
 8000cd8:	0018      	movs	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b008      	add	sp, #32
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	00030d40 	.word	0x00030d40
 8000ce8:	fffffefd 	.word	0xfffffefd
 8000cec:	40012708 	.word	0x40012708
 8000cf0:	ffc3ffff 	.word	0xffc3ffff
 8000cf4:	fffe0219 	.word	0xfffe0219
 8000cf8:	dffffc02 	.word	0xdffffc02
 8000cfc:	07ffff04 	.word	0x07ffff04
 8000d00:	3fffffff 	.word	0x3fffffff
 8000d04:	833fffe7 	.word	0x833fffe7

08000d08 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if(((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	2202      	movs	r2, #2
 8000d28:	4013      	ands	r3, r2
 8000d2a:	d017      	beq.n	8000d5c <HAL_ADC_IRQHandler+0x54>
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2202      	movs	r2, #2
 8000d30:	4013      	ands	r3, r2
 8000d32:	d013      	beq.n	8000d5c <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d38:	2210      	movs	r2, #16
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	d106      	bne.n	8000d4c <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d42:	2280      	movs	r2, #128	; 0x80
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	431a      	orrs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 faee 	bl	8001330 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP );
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2202      	movs	r2, #2
 8000d5a:	601a      	str	r2, [r3, #0]
  }
  
  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	2204      	movs	r2, #4
 8000d60:	4013      	ands	r3, r2
 8000d62:	d003      	beq.n	8000d6c <HAL_ADC_IRQHandler+0x64>
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2204      	movs	r2, #4
 8000d68:	4013      	ands	r3, r2
 8000d6a:	d107      	bne.n	8000d7c <HAL_ADC_IRQHandler+0x74>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	2208      	movs	r2, #8
 8000d70:	4013      	ands	r3, r2
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000d72:	d04d      	beq.n	8000e10 <HAL_ADC_IRQHandler+0x108>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2208      	movs	r2, #8
 8000d78:	4013      	ands	r3, r2
 8000d7a:	d049      	beq.n	8000e10 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d80:	2210      	movs	r2, #16
 8000d82:	4013      	ands	r3, r2
 8000d84:	d106      	bne.n	8000d94 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8a:	2280      	movs	r2, #128	; 0x80
 8000d8c:	0092      	lsls	r2, r2, #2
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	659a      	str	r2, [r3, #88]	; 0x58
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f7ff fd19 	bl	80007d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000d9e:	1e03      	subs	r3, r0, #0
 8000da0:	d02e      	beq.n	8000e00 <HAL_ADC_IRQHandler+0xf8>
       && (hadc->Init.ContinuousConvMode == DISABLE)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	7e9b      	ldrb	r3, [r3, #26]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d12a      	bne.n	8000e00 <HAL_ADC_IRQHandler+0xf8>
      )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2208      	movs	r2, #8
 8000db2:	4013      	ands	r3, r2
 8000db4:	2b08      	cmp	r3, #8
 8000db6:	d123      	bne.n	8000e00 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff fdbc 	bl	800093a <LL_ADC_REG_IsConversionOngoing>
 8000dc2:	1e03      	subs	r3, r0, #0
 8000dc4:	d110      	bne.n	8000de8 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	210c      	movs	r1, #12
 8000dd2:	438a      	bics	r2, r1
 8000dd4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dda:	4a56      	ldr	r2, [pc, #344]	; (8000f34 <HAL_ADC_IRQHandler+0x22c>)
 8000ddc:	4013      	ands	r3, r2
 8000dde:	2201      	movs	r2, #1
 8000de0:	431a      	orrs	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	659a      	str	r2, [r3, #88]	; 0x58
 8000de6:	e00b      	b.n	8000e00 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dec:	2220      	movs	r2, #32
 8000dee:	431a      	orrs	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	659a      	str	r2, [r3, #88]	; 0x58
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000df8:	2201      	movs	r2, #1
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	0018      	movs	r0, r3
 8000e04:	f000 f898 	bl	8000f38 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	220c      	movs	r2, #12
 8000e0e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))      
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	4013      	ands	r3, r2
 8000e16:	d012      	beq.n	8000e3e <HAL_ADC_IRQHandler+0x136>
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2280      	movs	r2, #128	; 0x80
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	d00e      	beq.n	8000e3e <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e24:	2280      	movs	r2, #128	; 0x80
 8000e26:	0252      	lsls	r2, r2, #9
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	0018      	movs	r0, r3
 8000e32:	f000 f889 	bl	8000f48 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2280      	movs	r2, #128	; 0x80
 8000e3c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))      
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	4013      	ands	r3, r2
 8000e46:	d014      	beq.n	8000e72 <HAL_ADC_IRQHandler+0x16a>
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d00f      	beq.n	8000e72 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	2280      	movs	r2, #128	; 0x80
 8000e58:	0292      	lsls	r2, r2, #10
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 fa54 	bl	8001310 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2280      	movs	r2, #128	; 0x80
 8000e6e:	0052      	lsls	r2, r2, #1
 8000e70:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))      
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d014      	beq.n	8000ea6 <HAL_ADC_IRQHandler+0x19e>
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4013      	ands	r3, r2
 8000e84:	d00f      	beq.n	8000ea6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8a:	2280      	movs	r2, #128	; 0x80
 8000e8c:	02d2      	lsls	r2, r2, #11
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	0018      	movs	r0, r3
 8000e98:	f000 fa42 	bl	8001320 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2280      	movs	r2, #128	; 0x80
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR)) 
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	2210      	movs	r2, #16
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d02b      	beq.n	8000f06 <HAL_ADC_IRQHandler+0x1fe>
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2210      	movs	r2, #16
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d027      	beq.n	8000f06 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d102      	bne.n	8000ec4 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	e008      	b.n	8000ed6 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff fcd5 	bl	8000878 <LL_ADC_REG_GetDMATransfer>
 8000ece:	1e03      	subs	r3, r0, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
      }
    }
        
    if (overrun_error == 1UL)
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d110      	bne.n	8000efe <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee0:	2280      	movs	r2, #128	; 0x80
 8000ee2:	00d2      	lsls	r2, r2, #3
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eee:	2202      	movs	r2, #2
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f000 f82d 	bl	8000f58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2210      	movs	r2, #16
 8000f04:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	019b      	lsls	r3, r3, #6
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d00d      	beq.n	8000f2c <HAL_ADC_IRQHandler+0x224>
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	019b      	lsls	r3, r3, #6
 8000f16:	4013      	ands	r3, r2
 8000f18:	d008      	beq.n	8000f2c <HAL_ADC_IRQHandler+0x224>
  {
    /* Level out of window 1 callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f000 fa0f 	bl	8001340 <HAL_ADCEx_ChannelConfigReadyCallback>
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2280      	movs	r2, #128	; 0x80
 8000f28:	0192      	lsls	r2, r2, #6
 8000f2a:	601a      	str	r2, [r3, #0]
  }
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b006      	add	sp, #24
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	fffffefe 	.word	0xfffffefe

08000f38 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b002      	add	sp, #8
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b002      	add	sp, #8
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b002      	add	sp, #8
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f72:	2317      	movs	r3, #23
 8000f74:	18fb      	adds	r3, r7, r3
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2254      	movs	r2, #84	; 0x54
 8000f82:	5c9b      	ldrb	r3, [r3, r2]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d101      	bne.n	8000f8c <HAL_ADC_ConfigChannel+0x24>
 8000f88:	2302      	movs	r3, #2
 8000f8a:	e1bc      	b.n	8001306 <HAL_ADC_ConfigChannel+0x39e>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2254      	movs	r2, #84	; 0x54
 8000f90:	2101      	movs	r1, #1
 8000f92:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f7ff fcce 	bl	800093a <LL_ADC_REG_IsConversionOngoing>
 8000f9e:	1e03      	subs	r3, r0, #0
 8000fa0:	d000      	beq.n	8000fa4 <HAL_ADC_ConfigChannel+0x3c>
 8000fa2:	e19f      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x37c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d100      	bne.n	8000fae <HAL_ADC_ConfigChannel+0x46>
 8000fac:	e13e      	b.n	800122c <HAL_ADC_ConfigChannel+0x2c4>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	691a      	ldr	r2, [r3, #16]
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	061b      	lsls	r3, r3, #24
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d004      	beq.n	8000fc4 <HAL_ADC_ConfigChannel+0x5c>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8000fbe:	4abf      	ldr	r2, [pc, #764]	; (80012bc <HAL_ADC_ConfigChannel+0x354>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d108      	bne.n	8000fd6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	0019      	movs	r1, r3
 8000fce:	0010      	movs	r0, r2
 8000fd0:	f7ff fc2f 	bl	8000832 <LL_ADC_REG_SetSequencerChAdd>
 8000fd4:	e0c9      	b.n	800116a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	211f      	movs	r1, #31
 8000fe0:	400b      	ands	r3, r1
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	4099      	lsls	r1, r3
 8000fe6:	000b      	movs	r3, r1
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	4013      	ands	r3, r2
 8000fec:	0019      	movs	r1, r3
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	035b      	lsls	r3, r3, #13
 8000ff4:	0b5b      	lsrs	r3, r3, #13
 8000ff6:	d105      	bne.n	8001004 <HAL_ADC_ConfigChannel+0x9c>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	0e9b      	lsrs	r3, r3, #26
 8000ffe:	221f      	movs	r2, #31
 8001000:	4013      	ands	r3, r2
 8001002:	e098      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1ce>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2201      	movs	r2, #1
 800100a:	4013      	ands	r3, r2
 800100c:	d000      	beq.n	8001010 <HAL_ADC_ConfigChannel+0xa8>
 800100e:	e091      	b.n	8001134 <HAL_ADC_ConfigChannel+0x1cc>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2202      	movs	r2, #2
 8001016:	4013      	ands	r3, r2
 8001018:	d000      	beq.n	800101c <HAL_ADC_ConfigChannel+0xb4>
 800101a:	e089      	b.n	8001130 <HAL_ADC_ConfigChannel+0x1c8>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2204      	movs	r2, #4
 8001022:	4013      	ands	r3, r2
 8001024:	d000      	beq.n	8001028 <HAL_ADC_ConfigChannel+0xc0>
 8001026:	e081      	b.n	800112c <HAL_ADC_ConfigChannel+0x1c4>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2208      	movs	r2, #8
 800102e:	4013      	ands	r3, r2
 8001030:	d000      	beq.n	8001034 <HAL_ADC_ConfigChannel+0xcc>
 8001032:	e079      	b.n	8001128 <HAL_ADC_ConfigChannel+0x1c0>
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2210      	movs	r2, #16
 800103a:	4013      	ands	r3, r2
 800103c:	d000      	beq.n	8001040 <HAL_ADC_ConfigChannel+0xd8>
 800103e:	e071      	b.n	8001124 <HAL_ADC_ConfigChannel+0x1bc>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2220      	movs	r2, #32
 8001046:	4013      	ands	r3, r2
 8001048:	d000      	beq.n	800104c <HAL_ADC_ConfigChannel+0xe4>
 800104a:	e069      	b.n	8001120 <HAL_ADC_ConfigChannel+0x1b8>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2240      	movs	r2, #64	; 0x40
 8001052:	4013      	ands	r3, r2
 8001054:	d000      	beq.n	8001058 <HAL_ADC_ConfigChannel+0xf0>
 8001056:	e061      	b.n	800111c <HAL_ADC_ConfigChannel+0x1b4>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2280      	movs	r2, #128	; 0x80
 800105e:	4013      	ands	r3, r2
 8001060:	d000      	beq.n	8001064 <HAL_ADC_ConfigChannel+0xfc>
 8001062:	e059      	b.n	8001118 <HAL_ADC_ConfigChannel+0x1b0>
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	4013      	ands	r3, r2
 800106e:	d151      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x1ac>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4013      	ands	r3, r2
 800107a:	d149      	bne.n	8001110 <HAL_ADC_ConfigChannel+0x1a8>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4013      	ands	r3, r2
 8001086:	d141      	bne.n	800110c <HAL_ADC_ConfigChannel+0x1a4>
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	4013      	ands	r3, r2
 8001092:	d139      	bne.n	8001108 <HAL_ADC_ConfigChannel+0x1a0>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	015b      	lsls	r3, r3, #5
 800109c:	4013      	ands	r3, r2
 800109e:	d131      	bne.n	8001104 <HAL_ADC_ConfigChannel+0x19c>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	019b      	lsls	r3, r3, #6
 80010a8:	4013      	ands	r3, r2
 80010aa:	d129      	bne.n	8001100 <HAL_ADC_ConfigChannel+0x198>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	01db      	lsls	r3, r3, #7
 80010b4:	4013      	ands	r3, r2
 80010b6:	d121      	bne.n	80010fc <HAL_ADC_ConfigChannel+0x194>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	4013      	ands	r3, r2
 80010c2:	d119      	bne.n	80010f8 <HAL_ADC_ConfigChannel+0x190>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	025b      	lsls	r3, r3, #9
 80010cc:	4013      	ands	r3, r2
 80010ce:	d111      	bne.n	80010f4 <HAL_ADC_ConfigChannel+0x18c>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	029b      	lsls	r3, r3, #10
 80010d8:	4013      	ands	r3, r2
 80010da:	d109      	bne.n	80010f0 <HAL_ADC_ConfigChannel+0x188>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	02db      	lsls	r3, r3, #11
 80010e4:	4013      	ands	r3, r2
 80010e6:	d001      	beq.n	80010ec <HAL_ADC_ConfigChannel+0x184>
 80010e8:	2312      	movs	r3, #18
 80010ea:	e024      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1ce>
 80010ec:	2300      	movs	r3, #0
 80010ee:	e022      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1ce>
 80010f0:	2311      	movs	r3, #17
 80010f2:	e020      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1ce>
 80010f4:	2310      	movs	r3, #16
 80010f6:	e01e      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1ce>
 80010f8:	230f      	movs	r3, #15
 80010fa:	e01c      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1ce>
 80010fc:	230e      	movs	r3, #14
 80010fe:	e01a      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1ce>
 8001100:	230d      	movs	r3, #13
 8001102:	e018      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1ce>
 8001104:	230c      	movs	r3, #12
 8001106:	e016      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1ce>
 8001108:	230b      	movs	r3, #11
 800110a:	e014      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1ce>
 800110c:	230a      	movs	r3, #10
 800110e:	e012      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1ce>
 8001110:	2309      	movs	r3, #9
 8001112:	e010      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1ce>
 8001114:	2308      	movs	r3, #8
 8001116:	e00e      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1ce>
 8001118:	2307      	movs	r3, #7
 800111a:	e00c      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1ce>
 800111c:	2306      	movs	r3, #6
 800111e:	e00a      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1ce>
 8001120:	2305      	movs	r3, #5
 8001122:	e008      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1ce>
 8001124:	2304      	movs	r3, #4
 8001126:	e006      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1ce>
 8001128:	2303      	movs	r3, #3
 800112a:	e004      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1ce>
 800112c:	2302      	movs	r3, #2
 800112e:	e002      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1ce>
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1ce>
 8001134:	2300      	movs	r3, #0
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	6852      	ldr	r2, [r2, #4]
 800113a:	201f      	movs	r0, #31
 800113c:	4002      	ands	r2, r0
 800113e:	4093      	lsls	r3, r2
 8001140:	000a      	movs	r2, r1
 8001142:	431a      	orrs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	429a      	cmp	r2, r3
 8001156:	d808      	bhi.n	800116a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	6859      	ldr	r1, [r3, #4]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	001a      	movs	r2, r3
 8001166:	f7ff fb44 	bl	80007f2 <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	6819      	ldr	r1, [r3, #0]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	001a      	movs	r2, r3
 8001178:	f7ff fb8a 	bl	8000890 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db00      	blt.n	8001186 <HAL_ADC_ConfigChannel+0x21e>
 8001184:	e0b8      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001186:	4b4e      	ldr	r3, [pc, #312]	; (80012c0 <HAL_ADC_ConfigChannel+0x358>)
 8001188:	0018      	movs	r0, r3
 800118a:	f7ff faf7 	bl	800077c <LL_ADC_GetCommonPathInternalCh>
 800118e:	0003      	movs	r3, r0
 8001190:	613b      	str	r3, [r7, #16]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a4b      	ldr	r2, [pc, #300]	; (80012c4 <HAL_ADC_ConfigChannel+0x35c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d11d      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x270>
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	041b      	lsls	r3, r3, #16
 80011a2:	4013      	ands	r3, r2
 80011a4:	d118      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	2280      	movs	r2, #128	; 0x80
 80011aa:	0412      	lsls	r2, r2, #16
 80011ac:	4313      	orrs	r3, r2
 80011ae:	4a44      	ldr	r2, [pc, #272]	; (80012c0 <HAL_ADC_ConfigChannel+0x358>)
 80011b0:	0019      	movs	r1, r3
 80011b2:	0010      	movs	r0, r2
 80011b4:	f7ff face 	bl	8000754 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80011b8:	4b43      	ldr	r3, [pc, #268]	; (80012c8 <HAL_ADC_ConfigChannel+0x360>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4943      	ldr	r1, [pc, #268]	; (80012cc <HAL_ADC_ConfigChannel+0x364>)
 80011be:	0018      	movs	r0, r3
 80011c0:	f7fe ffa0 	bl	8000104 <__udivsi3>
 80011c4:	0003      	movs	r3, r0
 80011c6:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 80011c8:	e002      	b.n	80011d0 <HAL_ADC_ConfigChannel+0x268>
          {
            wait_loop_index--;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f9      	bne.n	80011ca <HAL_ADC_ConfigChannel+0x262>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80011d6:	e08f      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x390>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a3c      	ldr	r2, [pc, #240]	; (80012d0 <HAL_ADC_ConfigChannel+0x368>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d10e      	bne.n	8001200 <HAL_ADC_ConfigChannel+0x298>
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	045b      	lsls	r3, r3, #17
 80011e8:	4013      	ands	r3, r2
 80011ea:	d109      	bne.n	8001200 <HAL_ADC_ConfigChannel+0x298>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	0452      	lsls	r2, r2, #17
 80011f2:	4313      	orrs	r3, r2
 80011f4:	4a32      	ldr	r2, [pc, #200]	; (80012c0 <HAL_ADC_ConfigChannel+0x358>)
 80011f6:	0019      	movs	r1, r3
 80011f8:	0010      	movs	r0, r2
 80011fa:	f7ff faab 	bl	8000754 <LL_ADC_SetCommonPathInternalCh>
 80011fe:	e07b      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x390>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a33      	ldr	r2, [pc, #204]	; (80012d4 <HAL_ADC_ConfigChannel+0x36c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d000      	beq.n	800120c <HAL_ADC_ConfigChannel+0x2a4>
 800120a:	e075      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x390>
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	03db      	lsls	r3, r3, #15
 8001212:	4013      	ands	r3, r2
 8001214:	d000      	beq.n	8001218 <HAL_ADC_ConfigChannel+0x2b0>
 8001216:	e06f      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	2280      	movs	r2, #128	; 0x80
 800121c:	03d2      	lsls	r2, r2, #15
 800121e:	4313      	orrs	r3, r2
 8001220:	4a27      	ldr	r2, [pc, #156]	; (80012c0 <HAL_ADC_ConfigChannel+0x358>)
 8001222:	0019      	movs	r1, r3
 8001224:	0010      	movs	r0, r2
 8001226:	f7ff fa95 	bl	8000754 <LL_ADC_SetCommonPathInternalCh>
 800122a:	e065      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x390>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	061b      	lsls	r3, r3, #24
 8001234:	429a      	cmp	r2, r3
 8001236:	d004      	beq.n	8001242 <HAL_ADC_ConfigChannel+0x2da>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800123c:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <HAL_ADC_ConfigChannel+0x354>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d107      	bne.n	8001252 <HAL_ADC_ConfigChannel+0x2ea>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	0019      	movs	r1, r3
 800124c:	0010      	movs	r0, r2
 800124e:	f7ff fb01 	bl	8000854 <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	da4e      	bge.n	80012f8 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_ADC_ConfigChannel+0x358>)
 800125c:	0018      	movs	r0, r3
 800125e:	f7ff fa8d 	bl	800077c <LL_ADC_GetCommonPathInternalCh>
 8001262:	0003      	movs	r3, r0
 8001264:	613b      	str	r3, [r7, #16]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a16      	ldr	r2, [pc, #88]	; (80012c4 <HAL_ADC_ConfigChannel+0x35c>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d108      	bne.n	8001282 <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <HAL_ADC_ConfigChannel+0x370>)
 8001274:	4013      	ands	r3, r2
 8001276:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <HAL_ADC_ConfigChannel+0x358>)
 8001278:	0019      	movs	r1, r3
 800127a:	0010      	movs	r0, r2
 800127c:	f7ff fa6a 	bl	8000754 <LL_ADC_SetCommonPathInternalCh>
 8001280:	e03a      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <HAL_ADC_ConfigChannel+0x368>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d108      	bne.n	800129e <HAL_ADC_ConfigChannel+0x336>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4a13      	ldr	r2, [pc, #76]	; (80012dc <HAL_ADC_ConfigChannel+0x374>)
 8001290:	4013      	ands	r3, r2
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <HAL_ADC_ConfigChannel+0x358>)
 8001294:	0019      	movs	r1, r3
 8001296:	0010      	movs	r0, r2
 8001298:	f7ff fa5c 	bl	8000754 <LL_ADC_SetCommonPathInternalCh>
 800129c:	e02c      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <HAL_ADC_ConfigChannel+0x36c>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d127      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <HAL_ADC_ConfigChannel+0x378>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_ADC_ConfigChannel+0x358>)
 80012b0:	0019      	movs	r1, r3
 80012b2:	0010      	movs	r0, r2
 80012b4:	f7ff fa4e 	bl	8000754 <LL_ADC_SetCommonPathInternalCh>
 80012b8:	e01e      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x390>
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	80000004 	.word	0x80000004
 80012c0:	40012708 	.word	0x40012708
 80012c4:	b0001000 	.word	0xb0001000
 80012c8:	20000008 	.word	0x20000008
 80012cc:	00030d40 	.word	0x00030d40
 80012d0:	b8004000 	.word	0xb8004000
 80012d4:	b4002000 	.word	0xb4002000
 80012d8:	ff7fffff 	.word	0xff7fffff
 80012dc:	feffffff 	.word	0xfeffffff
 80012e0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e8:	2220      	movs	r2, #32
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 80012f0:	2317      	movs	r3, #23
 80012f2:	18fb      	adds	r3, r7, r3
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2254      	movs	r2, #84	; 0x54
 80012fc:	2100      	movs	r1, #0
 80012fe:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001300:	2317      	movs	r3, #23
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	781b      	ldrb	r3, [r3, #0]
}
 8001306:	0018      	movs	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	b006      	add	sp, #24
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			; (mov r8, r8)

08001310 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	b002      	add	sp, #8
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	b002      	add	sp, #8
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef* hadc)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	b002      	add	sp, #8
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef* hadc)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b002      	add	sp, #8
 800134e:	bd80      	pop	{r7, pc}

08001350 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	0002      	movs	r2, r0
 8001358:	1dfb      	adds	r3, r7, #7
 800135a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800135c:	1dfb      	adds	r3, r7, #7
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	001a      	movs	r2, r3
 8001362:	231f      	movs	r3, #31
 8001364:	401a      	ands	r2, r3
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <NVIC_EnableIRQ+0x28>)
 8001368:	2101      	movs	r1, #1
 800136a:	4091      	lsls	r1, r2
 800136c:	000a      	movs	r2, r1
 800136e:	601a      	str	r2, [r3, #0]
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b002      	add	sp, #8
 8001376:	bd80      	pop	{r7, pc}
 8001378:	e000e100 	.word	0xe000e100

0800137c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	0002      	movs	r2, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	1dfb      	adds	r3, r7, #7
 8001388:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b7f      	cmp	r3, #127	; 0x7f
 8001390:	d932      	bls.n	80013f8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001392:	4a2f      	ldr	r2, [pc, #188]	; (8001450 <NVIC_SetPriority+0xd4>)
 8001394:	1dfb      	adds	r3, r7, #7
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	0019      	movs	r1, r3
 800139a:	230f      	movs	r3, #15
 800139c:	400b      	ands	r3, r1
 800139e:	3b08      	subs	r3, #8
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3306      	adds	r3, #6
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	18d3      	adds	r3, r2, r3
 80013a8:	3304      	adds	r3, #4
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	1dfa      	adds	r2, r7, #7
 80013ae:	7812      	ldrb	r2, [r2, #0]
 80013b0:	0011      	movs	r1, r2
 80013b2:	2203      	movs	r2, #3
 80013b4:	400a      	ands	r2, r1
 80013b6:	00d2      	lsls	r2, r2, #3
 80013b8:	21ff      	movs	r1, #255	; 0xff
 80013ba:	4091      	lsls	r1, r2
 80013bc:	000a      	movs	r2, r1
 80013be:	43d2      	mvns	r2, r2
 80013c0:	401a      	ands	r2, r3
 80013c2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	019b      	lsls	r3, r3, #6
 80013c8:	22ff      	movs	r2, #255	; 0xff
 80013ca:	401a      	ands	r2, r3
 80013cc:	1dfb      	adds	r3, r7, #7
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	0018      	movs	r0, r3
 80013d2:	2303      	movs	r3, #3
 80013d4:	4003      	ands	r3, r0
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013da:	481d      	ldr	r0, [pc, #116]	; (8001450 <NVIC_SetPriority+0xd4>)
 80013dc:	1dfb      	adds	r3, r7, #7
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	001c      	movs	r4, r3
 80013e2:	230f      	movs	r3, #15
 80013e4:	4023      	ands	r3, r4
 80013e6:	3b08      	subs	r3, #8
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	430a      	orrs	r2, r1
 80013ec:	3306      	adds	r3, #6
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	18c3      	adds	r3, r0, r3
 80013f2:	3304      	adds	r3, #4
 80013f4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013f6:	e027      	b.n	8001448 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f8:	4a16      	ldr	r2, [pc, #88]	; (8001454 <NVIC_SetPriority+0xd8>)
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	33c0      	adds	r3, #192	; 0xc0
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	589b      	ldr	r3, [r3, r2]
 8001408:	1dfa      	adds	r2, r7, #7
 800140a:	7812      	ldrb	r2, [r2, #0]
 800140c:	0011      	movs	r1, r2
 800140e:	2203      	movs	r2, #3
 8001410:	400a      	ands	r2, r1
 8001412:	00d2      	lsls	r2, r2, #3
 8001414:	21ff      	movs	r1, #255	; 0xff
 8001416:	4091      	lsls	r1, r2
 8001418:	000a      	movs	r2, r1
 800141a:	43d2      	mvns	r2, r2
 800141c:	401a      	ands	r2, r3
 800141e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	019b      	lsls	r3, r3, #6
 8001424:	22ff      	movs	r2, #255	; 0xff
 8001426:	401a      	ands	r2, r3
 8001428:	1dfb      	adds	r3, r7, #7
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	0018      	movs	r0, r3
 800142e:	2303      	movs	r3, #3
 8001430:	4003      	ands	r3, r0
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001436:	4807      	ldr	r0, [pc, #28]	; (8001454 <NVIC_SetPriority+0xd8>)
 8001438:	1dfb      	adds	r3, r7, #7
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b25b      	sxtb	r3, r3
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	430a      	orrs	r2, r1
 8001442:	33c0      	adds	r3, #192	; 0xc0
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	501a      	str	r2, [r3, r0]
}
 8001448:	46c0      	nop			; (mov r8, r8)
 800144a:	46bd      	mov	sp, r7
 800144c:	b003      	add	sp, #12
 800144e:	bd90      	pop	{r4, r7, pc}
 8001450:	e000ed00 	.word	0xe000ed00
 8001454:	e000e100 	.word	0xe000e100

08001458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <SysTick_Config+0x40>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d901      	bls.n	800146e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146a:	2301      	movs	r3, #1
 800146c:	e010      	b.n	8001490 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <SysTick_Config+0x44>)
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	3a01      	subs	r2, #1
 8001474:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001476:	2301      	movs	r3, #1
 8001478:	425b      	negs	r3, r3
 800147a:	2103      	movs	r1, #3
 800147c:	0018      	movs	r0, r3
 800147e:	f7ff ff7d 	bl	800137c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <SysTick_Config+0x44>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <SysTick_Config+0x44>)
 800148a:	2207      	movs	r2, #7
 800148c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800148e:	2300      	movs	r3, #0
}
 8001490:	0018      	movs	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	b002      	add	sp, #8
 8001496:	bd80      	pop	{r7, pc}
 8001498:	00ffffff 	.word	0x00ffffff
 800149c:	e000e010 	.word	0xe000e010

080014a0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	210f      	movs	r1, #15
 80014ac:	187b      	adds	r3, r7, r1
 80014ae:	1c02      	adds	r2, r0, #0
 80014b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	187b      	adds	r3, r7, r1
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	0011      	movs	r1, r2
 80014bc:	0018      	movs	r0, r3
 80014be:	f7ff ff5d 	bl	800137c <NVIC_SetPriority>
}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b004      	add	sp, #16
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	0002      	movs	r2, r0
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d6:	1dfb      	adds	r3, r7, #7
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b25b      	sxtb	r3, r3
 80014dc:	0018      	movs	r0, r3
 80014de:	f7ff ff37 	bl	8001350 <NVIC_EnableIRQ>
}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b002      	add	sp, #8
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7ff ffaf 	bl	8001458 <SysTick_Config>
 80014fa:	0003      	movs	r3, r0
}
 80014fc:	0018      	movs	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	b002      	add	sp, #8
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800150c:	230f      	movs	r3, #15
 800150e:	18fb      	adds	r3, r7, r3
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2224      	movs	r2, #36	; 0x24
 8001518:	2100      	movs	r1, #0
 800151a:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2224      	movs	r2, #36	; 0x24
 8001520:	5c9b      	ldrb	r3, [r3, r2]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d101      	bne.n	800152a <HAL_DMA_Abort_IT+0x26>
 8001526:	2302      	movs	r3, #2
 8001528:	e05e      	b.n	80015e8 <HAL_DMA_Abort_IT+0xe4>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2224      	movs	r2, #36	; 0x24
 800152e:	2101      	movs	r1, #1
 8001530:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2225      	movs	r2, #37	; 0x25
 8001536:	5c9b      	ldrb	r3, [r3, r2]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d007      	beq.n	800154e <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2204      	movs	r2, #4
 8001542:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001544:	230f      	movs	r3, #15
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
 800154c:	e049      	b.n	80015e2 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	210e      	movs	r1, #14
 800155a:	438a      	bics	r2, r1
 800155c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2101      	movs	r1, #1
 800156a:	438a      	bics	r2, r1
 800156c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001578:	491d      	ldr	r1, [pc, #116]	; (80015f0 <HAL_DMA_Abort_IT+0xec>)
 800157a:	400a      	ands	r2, r1
 800157c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800157e:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <HAL_DMA_Abort_IT+0xf0>)
 8001580:	6859      	ldr	r1, [r3, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	221c      	movs	r2, #28
 8001588:	4013      	ands	r3, r2
 800158a:	2201      	movs	r2, #1
 800158c:	409a      	lsls	r2, r3
 800158e:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_DMA_Abort_IT+0xf0>)
 8001590:	430a      	orrs	r2, r1
 8001592:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800159c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00c      	beq.n	80015c0 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015b0:	490f      	ldr	r1, [pc, #60]	; (80015f0 <HAL_DMA_Abort_IT+0xec>)
 80015b2:	400a      	ands	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80015be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2225      	movs	r2, #37	; 0x25
 80015c4:	2101      	movs	r1, #1
 80015c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2224      	movs	r2, #36	; 0x24
 80015cc:	2100      	movs	r1, #0
 80015ce:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d004      	beq.n	80015e2 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	0010      	movs	r0, r2
 80015e0:	4798      	blx	r3
    }
  }
  return status;
 80015e2:	230f      	movs	r3, #15
 80015e4:	18fb      	adds	r3, r7, r3
 80015e6:	781b      	ldrb	r3, [r3, #0]
}
 80015e8:	0018      	movs	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b004      	add	sp, #16
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	fffffeff 	.word	0xfffffeff
 80015f4:	40020000 	.word	0x40020000

080015f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001606:	e147      	b.n	8001898 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2101      	movs	r1, #1
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	4091      	lsls	r1, r2
 8001612:	000a      	movs	r2, r1
 8001614:	4013      	ands	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d100      	bne.n	8001620 <HAL_GPIO_Init+0x28>
 800161e:	e138      	b.n	8001892 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_Init+0x38>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b12      	cmp	r3, #18
 800162e:	d123      	bne.n	8001678 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	08da      	lsrs	r2, r3, #3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3208      	adds	r2, #8
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	58d3      	ldr	r3, [r2, r3]
 800163c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	2207      	movs	r2, #7
 8001642:	4013      	ands	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	220f      	movs	r2, #15
 8001648:	409a      	lsls	r2, r3
 800164a:	0013      	movs	r3, r2
 800164c:	43da      	mvns	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	691a      	ldr	r2, [r3, #16]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	2107      	movs	r1, #7
 800165c:	400b      	ands	r3, r1
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	409a      	lsls	r2, r3
 8001662:	0013      	movs	r3, r2
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	08da      	lsrs	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3208      	adds	r2, #8
 8001672:	0092      	lsls	r2, r2, #2
 8001674:	6939      	ldr	r1, [r7, #16]
 8001676:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	409a      	lsls	r2, r3
 8001686:	0013      	movs	r3, r2
 8001688:	43da      	mvns	r2, r3
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2203      	movs	r2, #3
 8001696:	401a      	ands	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	409a      	lsls	r2, r3
 800169e:	0013      	movs	r3, r2
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d00b      	beq.n	80016cc <HAL_GPIO_Init+0xd4>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d007      	beq.n	80016cc <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016c0:	2b11      	cmp	r3, #17
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b12      	cmp	r3, #18
 80016ca:	d130      	bne.n	800172e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	2203      	movs	r2, #3
 80016d8:	409a      	lsls	r2, r3
 80016da:	0013      	movs	r3, r2
 80016dc:	43da      	mvns	r2, r3
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	409a      	lsls	r2, r3
 80016ee:	0013      	movs	r3, r2
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001702:	2201      	movs	r2, #1
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
 8001708:	0013      	movs	r3, r2
 800170a:	43da      	mvns	r2, r3
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	2201      	movs	r2, #1
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
 8001720:	0013      	movs	r3, r2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	2203      	movs	r2, #3
 800173a:	409a      	lsls	r2, r3
 800173c:	0013      	movs	r3, r2
 800173e:	43da      	mvns	r2, r3
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	409a      	lsls	r2, r3
 8001750:	0013      	movs	r3, r2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	055b      	lsls	r3, r3, #21
 8001766:	4013      	ands	r3, r2
 8001768:	d100      	bne.n	800176c <HAL_GPIO_Init+0x174>
 800176a:	e092      	b.n	8001892 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800176c:	4a50      	ldr	r2, [pc, #320]	; (80018b0 <HAL_GPIO_Init+0x2b8>)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	089b      	lsrs	r3, r3, #2
 8001772:	3318      	adds	r3, #24
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	589b      	ldr	r3, [r3, r2]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	2203      	movs	r2, #3
 800177e:	4013      	ands	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	220f      	movs	r2, #15
 8001784:	409a      	lsls	r2, r3
 8001786:	0013      	movs	r3, r2
 8001788:	43da      	mvns	r2, r3
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	23a0      	movs	r3, #160	; 0xa0
 8001794:	05db      	lsls	r3, r3, #23
 8001796:	429a      	cmp	r2, r3
 8001798:	d013      	beq.n	80017c2 <HAL_GPIO_Init+0x1ca>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a45      	ldr	r2, [pc, #276]	; (80018b4 <HAL_GPIO_Init+0x2bc>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d00d      	beq.n	80017be <HAL_GPIO_Init+0x1c6>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a44      	ldr	r2, [pc, #272]	; (80018b8 <HAL_GPIO_Init+0x2c0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d007      	beq.n	80017ba <HAL_GPIO_Init+0x1c2>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a43      	ldr	r2, [pc, #268]	; (80018bc <HAL_GPIO_Init+0x2c4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d101      	bne.n	80017b6 <HAL_GPIO_Init+0x1be>
 80017b2:	2303      	movs	r3, #3
 80017b4:	e006      	b.n	80017c4 <HAL_GPIO_Init+0x1cc>
 80017b6:	2305      	movs	r3, #5
 80017b8:	e004      	b.n	80017c4 <HAL_GPIO_Init+0x1cc>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e002      	b.n	80017c4 <HAL_GPIO_Init+0x1cc>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_GPIO_Init+0x1cc>
 80017c2:	2300      	movs	r3, #0
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	2103      	movs	r1, #3
 80017c8:	400a      	ands	r2, r1
 80017ca:	00d2      	lsls	r2, r2, #3
 80017cc:	4093      	lsls	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80017d4:	4936      	ldr	r1, [pc, #216]	; (80018b0 <HAL_GPIO_Init+0x2b8>)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	3318      	adds	r3, #24
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80017e2:	4a33      	ldr	r2, [pc, #204]	; (80018b0 <HAL_GPIO_Init+0x2b8>)
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	58d3      	ldr	r3, [r2, r3]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	43da      	mvns	r2, r3
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	025b      	lsls	r3, r3, #9
 80017fc:	4013      	ands	r3, r2
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001808:	4929      	ldr	r1, [pc, #164]	; (80018b0 <HAL_GPIO_Init+0x2b8>)
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001810:	4a27      	ldr	r2, [pc, #156]	; (80018b0 <HAL_GPIO_Init+0x2b8>)
 8001812:	2384      	movs	r3, #132	; 0x84
 8001814:	58d3      	ldr	r3, [r2, r3]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	43da      	mvns	r2, r3
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	029b      	lsls	r3, r3, #10
 800182a:	4013      	ands	r3, r2
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001836:	491e      	ldr	r1, [pc, #120]	; (80018b0 <HAL_GPIO_Init+0x2b8>)
 8001838:	2284      	movs	r2, #132	; 0x84
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800183e:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <HAL_GPIO_Init+0x2b8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43da      	mvns	r2, r3
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	035b      	lsls	r3, r3, #13
 8001856:	4013      	ands	r3, r2
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <HAL_GPIO_Init+0x2b8>)
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_GPIO_Init+0x2b8>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43da      	mvns	r2, r3
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	039b      	lsls	r3, r3, #14
 8001880:	4013      	ands	r3, r2
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_GPIO_Init+0x2b8>)
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3301      	adds	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	40da      	lsrs	r2, r3
 80018a0:	1e13      	subs	r3, r2, #0
 80018a2:	d000      	beq.n	80018a6 <HAL_GPIO_Init+0x2ae>
 80018a4:	e6b0      	b.n	8001608 <HAL_GPIO_Init+0x10>
  }
}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b006      	add	sp, #24
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	40021800 	.word	0x40021800
 80018b4:	50000400 	.word	0x50000400
 80018b8:	50000800 	.word	0x50000800
 80018bc:	50000c00 	.word	0x50000c00

080018c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	0008      	movs	r0, r1
 80018ca:	0011      	movs	r1, r2
 80018cc:	1cbb      	adds	r3, r7, #2
 80018ce:	1c02      	adds	r2, r0, #0
 80018d0:	801a      	strh	r2, [r3, #0]
 80018d2:	1c7b      	adds	r3, r7, #1
 80018d4:	1c0a      	adds	r2, r1, #0
 80018d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d8:	1c7b      	adds	r3, r7, #1
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d004      	beq.n	80018ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018e0:	1cbb      	adds	r3, r7, #2
 80018e2:	881a      	ldrh	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018e8:	e003      	b.n	80018f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ea:	1cbb      	adds	r3, r7, #2
 80018ec:	881a      	ldrh	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b002      	add	sp, #8
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	000a      	movs	r2, r1
 8001904:	1cbb      	adds	r3, r7, #2
 8001906:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	1cba      	adds	r2, r7, #2
 800190e:	8812      	ldrh	r2, [r2, #0]
 8001910:	4013      	ands	r3, r2
 8001912:	d004      	beq.n	800191e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001914:	1cbb      	adds	r3, r7, #2
 8001916:	881a      	ldrh	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800191c:	e003      	b.n	8001926 <HAL_GPIO_TogglePin+0x2c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800191e:	1cbb      	adds	r3, r7, #2
 8001920:	881a      	ldrh	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	619a      	str	r2, [r3, #24]
}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	46bd      	mov	sp, r7
 800192a:	b002      	add	sp, #8
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a19      	ldr	r2, [pc, #100]	; (80019a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800193e:	4013      	ands	r3, r2
 8001940:	0019      	movs	r1, r3
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	430a      	orrs	r2, r1
 8001948:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	429a      	cmp	r2, r3
 8001952:	d11f      	bne.n	8001994 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	0013      	movs	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	189b      	adds	r3, r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4912      	ldr	r1, [pc, #72]	; (80019ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001962:	0018      	movs	r0, r3
 8001964:	f7fe fbce 	bl	8000104 <__udivsi3>
 8001968:	0003      	movs	r3, r0
 800196a:	3301      	adds	r3, #1
 800196c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800196e:	e008      	b.n	8001982 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3b01      	subs	r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	e001      	b.n	8001982 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e009      	b.n	8001996 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	401a      	ands	r2, r3
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	429a      	cmp	r2, r3
 8001992:	d0ed      	beq.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	0018      	movs	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	b004      	add	sp, #16
 800199c:	bd80      	pop	{r7, pc}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	40007000 	.word	0x40007000
 80019a4:	fffff9ff 	.word	0xfffff9ff
 80019a8:	20000008 	.word	0x20000008
 80019ac:	000f4240 	.word	0x000f4240

080019b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	23e0      	movs	r3, #224	; 0xe0
 80019ba:	01db      	lsls	r3, r3, #7
 80019bc:	4013      	ands	r3, r2
}
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40021000 	.word	0x40021000

080019c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e304      	b.n	8001fe4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2201      	movs	r2, #1
 80019e0:	4013      	ands	r3, r2
 80019e2:	d100      	bne.n	80019e6 <HAL_RCC_OscConfig+0x1e>
 80019e4:	e07c      	b.n	8001ae0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019e6:	4bc3      	ldr	r3, [pc, #780]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2238      	movs	r2, #56	; 0x38
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f0:	4bc0      	ldr	r3, [pc, #768]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2203      	movs	r2, #3
 80019f6:	4013      	ands	r3, r2
 80019f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	2b10      	cmp	r3, #16
 80019fe:	d102      	bne.n	8001a06 <HAL_RCC_OscConfig+0x3e>
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d002      	beq.n	8001a0c <HAL_RCC_OscConfig+0x44>
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d10b      	bne.n	8001a24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	4bb9      	ldr	r3, [pc, #740]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	029b      	lsls	r3, r3, #10
 8001a14:	4013      	ands	r3, r2
 8001a16:	d062      	beq.n	8001ade <HAL_RCC_OscConfig+0x116>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d15e      	bne.n	8001ade <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e2df      	b.n	8001fe4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	025b      	lsls	r3, r3, #9
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d107      	bne.n	8001a40 <HAL_RCC_OscConfig+0x78>
 8001a30:	4bb0      	ldr	r3, [pc, #704]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4baf      	ldr	r3, [pc, #700]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001a36:	2180      	movs	r1, #128	; 0x80
 8001a38:	0249      	lsls	r1, r1, #9
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e020      	b.n	8001a82 <HAL_RCC_OscConfig+0xba>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	23a0      	movs	r3, #160	; 0xa0
 8001a46:	02db      	lsls	r3, r3, #11
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d10e      	bne.n	8001a6a <HAL_RCC_OscConfig+0xa2>
 8001a4c:	4ba9      	ldr	r3, [pc, #676]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4ba8      	ldr	r3, [pc, #672]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	2180      	movs	r1, #128	; 0x80
 8001a54:	02c9      	lsls	r1, r1, #11
 8001a56:	430a      	orrs	r2, r1
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	4ba6      	ldr	r3, [pc, #664]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	4ba5      	ldr	r3, [pc, #660]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001a60:	2180      	movs	r1, #128	; 0x80
 8001a62:	0249      	lsls	r1, r1, #9
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e00b      	b.n	8001a82 <HAL_RCC_OscConfig+0xba>
 8001a6a:	4ba2      	ldr	r3, [pc, #648]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4ba1      	ldr	r3, [pc, #644]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001a70:	49a1      	ldr	r1, [pc, #644]	; (8001cf8 <HAL_RCC_OscConfig+0x330>)
 8001a72:	400a      	ands	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	4b9f      	ldr	r3, [pc, #636]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4b9e      	ldr	r3, [pc, #632]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001a7c:	499f      	ldr	r1, [pc, #636]	; (8001cfc <HAL_RCC_OscConfig+0x334>)
 8001a7e:	400a      	ands	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d014      	beq.n	8001ab4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7fe fe37 	bl	80006fc <HAL_GetTick>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7fe fe32 	bl	80006fc <HAL_GetTick>
 8001a98:	0002      	movs	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e29e      	b.n	8001fe4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa6:	4b93      	ldr	r3, [pc, #588]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	029b      	lsls	r3, r3, #10
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0xcc>
 8001ab2:	e015      	b.n	8001ae0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7fe fe22 	bl	80006fc <HAL_GetTick>
 8001ab8:	0003      	movs	r3, r0
 8001aba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001abe:	f7fe fe1d 	bl	80006fc <HAL_GetTick>
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b64      	cmp	r3, #100	; 0x64
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e289      	b.n	8001fe4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ad0:	4b88      	ldr	r3, [pc, #544]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	029b      	lsls	r3, r3, #10
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0xf6>
 8001adc:	e000      	b.n	8001ae0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ade:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d100      	bne.n	8001aec <HAL_RCC_OscConfig+0x124>
 8001aea:	e099      	b.n	8001c20 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aec:	4b81      	ldr	r3, [pc, #516]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2238      	movs	r2, #56	; 0x38
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001af6:	4b7f      	ldr	r3, [pc, #508]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	2203      	movs	r2, #3
 8001afc:	4013      	ands	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b10      	cmp	r3, #16
 8001b04:	d102      	bne.n	8001b0c <HAL_RCC_OscConfig+0x144>
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d002      	beq.n	8001b12 <HAL_RCC_OscConfig+0x14a>
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d135      	bne.n	8001b7e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b12:	4b78      	ldr	r3, [pc, #480]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d005      	beq.n	8001b2a <HAL_RCC_OscConfig+0x162>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e25c      	b.n	8001fe4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2a:	4b72      	ldr	r3, [pc, #456]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4a74      	ldr	r2, [pc, #464]	; (8001d00 <HAL_RCC_OscConfig+0x338>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	0019      	movs	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	021a      	lsls	r2, r3, #8
 8001b3a:	4b6e      	ldr	r3, [pc, #440]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d112      	bne.n	8001b6c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b46:	4b6b      	ldr	r3, [pc, #428]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a6e      	ldr	r2, [pc, #440]	; (8001d04 <HAL_RCC_OscConfig+0x33c>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	0019      	movs	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	4b67      	ldr	r3, [pc, #412]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001b56:	430a      	orrs	r2, r1
 8001b58:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b5a:	4b66      	ldr	r3, [pc, #408]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	0adb      	lsrs	r3, r3, #11
 8001b60:	2207      	movs	r2, #7
 8001b62:	4013      	ands	r3, r2
 8001b64:	4a68      	ldr	r2, [pc, #416]	; (8001d08 <HAL_RCC_OscConfig+0x340>)
 8001b66:	40da      	lsrs	r2, r3
 8001b68:	4b68      	ldr	r3, [pc, #416]	; (8001d0c <HAL_RCC_OscConfig+0x344>)
 8001b6a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b6c:	4b68      	ldr	r3, [pc, #416]	; (8001d10 <HAL_RCC_OscConfig+0x348>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7fe fd69 	bl	8000648 <HAL_InitTick>
 8001b76:	1e03      	subs	r3, r0, #0
 8001b78:	d051      	beq.n	8001c1e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e232      	b.n	8001fe4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d030      	beq.n	8001be8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b86:	4b5b      	ldr	r3, [pc, #364]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a5e      	ldr	r2, [pc, #376]	; (8001d04 <HAL_RCC_OscConfig+0x33c>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	0019      	movs	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	4b57      	ldr	r3, [pc, #348]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001b96:	430a      	orrs	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001b9a:	4b56      	ldr	r3, [pc, #344]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4b55      	ldr	r3, [pc, #340]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001ba0:	2180      	movs	r1, #128	; 0x80
 8001ba2:	0049      	lsls	r1, r1, #1
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7fe fda8 	bl	80006fc <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb2:	f7fe fda3 	bl	80006fc <HAL_GetTick>
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e20f      	b.n	8001fe4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc4:	4b4b      	ldr	r3, [pc, #300]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd0:	4b48      	ldr	r3, [pc, #288]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a4a      	ldr	r2, [pc, #296]	; (8001d00 <HAL_RCC_OscConfig+0x338>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	0019      	movs	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	021a      	lsls	r2, r3, #8
 8001be0:	4b44      	ldr	r3, [pc, #272]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001be2:	430a      	orrs	r2, r1
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	e01b      	b.n	8001c20 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001be8:	4b42      	ldr	r3, [pc, #264]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b41      	ldr	r3, [pc, #260]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001bee:	4949      	ldr	r1, [pc, #292]	; (8001d14 <HAL_RCC_OscConfig+0x34c>)
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7fe fd82 	bl	80006fc <HAL_GetTick>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfe:	f7fe fd7d 	bl	80006fc <HAL_GetTick>
 8001c02:	0002      	movs	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e1e9      	b.n	8001fe4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c10:	4b38      	ldr	r3, [pc, #224]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d1f0      	bne.n	8001bfe <HAL_RCC_OscConfig+0x236>
 8001c1c:	e000      	b.n	8001c20 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c1e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2208      	movs	r2, #8
 8001c26:	4013      	ands	r3, r2
 8001c28:	d047      	beq.n	8001cba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001c2a:	4b32      	ldr	r3, [pc, #200]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2238      	movs	r2, #56	; 0x38
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b18      	cmp	r3, #24
 8001c34:	d10a      	bne.n	8001c4c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001c36:	4b2f      	ldr	r3, [pc, #188]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d03c      	beq.n	8001cba <HAL_RCC_OscConfig+0x2f2>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d138      	bne.n	8001cba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e1cb      	b.n	8001fe4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d019      	beq.n	8001c88 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c54:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001c56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c58:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7fe fd4c 	bl	80006fc <HAL_GetTick>
 8001c64:	0003      	movs	r3, r0
 8001c66:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c6a:	f7fe fd47 	bl	80006fc <HAL_GetTick>
 8001c6e:	0002      	movs	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e1b3      	b.n	8001fe4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c80:	2202      	movs	r2, #2
 8001c82:	4013      	ands	r3, r2
 8001c84:	d0f1      	beq.n	8001c6a <HAL_RCC_OscConfig+0x2a2>
 8001c86:	e018      	b.n	8001cba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001c88:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001c8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001c8e:	2101      	movs	r1, #1
 8001c90:	438a      	bics	r2, r1
 8001c92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c94:	f7fe fd32 	bl	80006fc <HAL_GetTick>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9e:	f7fe fd2d 	bl	80006fc <HAL_GetTick>
 8001ca2:	0002      	movs	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e199      	b.n	8001fe4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cb0:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d1f1      	bne.n	8001c9e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d100      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x2fe>
 8001cc4:	e0c6      	b.n	8001e54 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc6:	231f      	movs	r3, #31
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2238      	movs	r2, #56	; 0x38
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	d11e      	bne.n	8001d18 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_RCC_OscConfig+0x32c>)
 8001cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cde:	2202      	movs	r2, #2
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d100      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x31e>
 8001ce4:	e0b6      	b.n	8001e54 <HAL_RCC_OscConfig+0x48c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d000      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x328>
 8001cee:	e0b1      	b.n	8001e54 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e177      	b.n	8001fe4 <HAL_RCC_OscConfig+0x61c>
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	fffeffff 	.word	0xfffeffff
 8001cfc:	fffbffff 	.word	0xfffbffff
 8001d00:	ffff80ff 	.word	0xffff80ff
 8001d04:	ffffc7ff 	.word	0xffffc7ff
 8001d08:	00f42400 	.word	0x00f42400
 8001d0c:	20000008 	.word	0x20000008
 8001d10:	20000000 	.word	0x20000000
 8001d14:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d18:	4bb4      	ldr	r3, [pc, #720]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	055b      	lsls	r3, r3, #21
 8001d20:	4013      	ands	r3, r2
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_OscConfig+0x360>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x362>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d011      	beq.n	8001d52 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	4baf      	ldr	r3, [pc, #700]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001d30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d32:	4bae      	ldr	r3, [pc, #696]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001d34:	2180      	movs	r1, #128	; 0x80
 8001d36:	0549      	lsls	r1, r1, #21
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d3c:	4bab      	ldr	r3, [pc, #684]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	055b      	lsls	r3, r3, #21
 8001d44:	4013      	ands	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001d4a:	231f      	movs	r3, #31
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d52:	4ba7      	ldr	r3, [pc, #668]	; (8001ff0 <HAL_RCC_OscConfig+0x628>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d11a      	bne.n	8001d94 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d5e:	4ba4      	ldr	r3, [pc, #656]	; (8001ff0 <HAL_RCC_OscConfig+0x628>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	4ba3      	ldr	r3, [pc, #652]	; (8001ff0 <HAL_RCC_OscConfig+0x628>)
 8001d64:	2180      	movs	r1, #128	; 0x80
 8001d66:	0049      	lsls	r1, r1, #1
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001d6c:	f7fe fcc6 	bl	80006fc <HAL_GetTick>
 8001d70:	0003      	movs	r3, r0
 8001d72:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d76:	f7fe fcc1 	bl	80006fc <HAL_GetTick>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e12d      	b.n	8001fe4 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d88:	4b99      	ldr	r3, [pc, #612]	; (8001ff0 <HAL_RCC_OscConfig+0x628>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4013      	ands	r3, r2
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x3e2>
 8001d9c:	4b93      	ldr	r3, [pc, #588]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001d9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001da0:	4b92      	ldr	r3, [pc, #584]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001da2:	2101      	movs	r1, #1
 8001da4:	430a      	orrs	r2, r1
 8001da6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001da8:	e01c      	b.n	8001de4 <HAL_RCC_OscConfig+0x41c>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x404>
 8001db2:	4b8e      	ldr	r3, [pc, #568]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001db4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001db6:	4b8d      	ldr	r3, [pc, #564]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001db8:	2104      	movs	r1, #4
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dbe:	4b8b      	ldr	r3, [pc, #556]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001dc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dc2:	4b8a      	ldr	r3, [pc, #552]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0x41c>
 8001dcc:	4b87      	ldr	r3, [pc, #540]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001dce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dd0:	4b86      	ldr	r3, [pc, #536]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	438a      	bics	r2, r1
 8001dd6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dd8:	4b84      	ldr	r3, [pc, #528]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001dda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ddc:	4b83      	ldr	r3, [pc, #524]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001dde:	2104      	movs	r1, #4
 8001de0:	438a      	bics	r2, r1
 8001de2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d014      	beq.n	8001e16 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dec:	f7fe fc86 	bl	80006fc <HAL_GetTick>
 8001df0:	0003      	movs	r3, r0
 8001df2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001df4:	e009      	b.n	8001e0a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df6:	f7fe fc81 	bl	80006fc <HAL_GetTick>
 8001dfa:	0002      	movs	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	4a7c      	ldr	r2, [pc, #496]	; (8001ff4 <HAL_RCC_OscConfig+0x62c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e0ec      	b.n	8001fe4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e0a:	4b78      	ldr	r3, [pc, #480]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0e:	2202      	movs	r2, #2
 8001e10:	4013      	ands	r3, r2
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x42e>
 8001e14:	e013      	b.n	8001e3e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e16:	f7fe fc71 	bl	80006fc <HAL_GetTick>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e1e:	e009      	b.n	8001e34 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e20:	f7fe fc6c 	bl	80006fc <HAL_GetTick>
 8001e24:	0002      	movs	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	4a72      	ldr	r2, [pc, #456]	; (8001ff4 <HAL_RCC_OscConfig+0x62c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e0d7      	b.n	8001fe4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e34:	4b6d      	ldr	r3, [pc, #436]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	2202      	movs	r2, #2
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001e3e:	231f      	movs	r3, #31
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d105      	bne.n	8001e54 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001e48:	4b68      	ldr	r3, [pc, #416]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e4c:	4b67      	ldr	r3, [pc, #412]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001e4e:	496a      	ldr	r1, [pc, #424]	; (8001ff8 <HAL_RCC_OscConfig+0x630>)
 8001e50:	400a      	ands	r2, r1
 8001e52:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d100      	bne.n	8001e5e <HAL_RCC_OscConfig+0x496>
 8001e5c:	e0c1      	b.n	8001fe2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e5e:	4b63      	ldr	r3, [pc, #396]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2238      	movs	r2, #56	; 0x38
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b10      	cmp	r3, #16
 8001e68:	d100      	bne.n	8001e6c <HAL_RCC_OscConfig+0x4a4>
 8001e6a:	e081      	b.n	8001f70 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d156      	bne.n	8001f22 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e74:	4b5d      	ldr	r3, [pc, #372]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b5c      	ldr	r3, [pc, #368]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001e7a:	4960      	ldr	r1, [pc, #384]	; (8001ffc <HAL_RCC_OscConfig+0x634>)
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7fe fc3c 	bl	80006fc <HAL_GetTick>
 8001e84:	0003      	movs	r3, r0
 8001e86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7fe fc37 	bl	80006fc <HAL_GetTick>
 8001e8e:	0002      	movs	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e0a3      	b.n	8001fe4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9c:	4b53      	ldr	r3, [pc, #332]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	049b      	lsls	r3, r3, #18
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d1f0      	bne.n	8001e8a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea8:	4b50      	ldr	r3, [pc, #320]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	4a54      	ldr	r2, [pc, #336]	; (8002000 <HAL_RCC_OscConfig+0x638>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a1a      	ldr	r2, [r3, #32]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	4b45      	ldr	r3, [pc, #276]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001edc:	4b43      	ldr	r3, [pc, #268]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b42      	ldr	r3, [pc, #264]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001ee2:	2180      	movs	r1, #128	; 0x80
 8001ee4:	0449      	lsls	r1, r1, #17
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001eea:	4b40      	ldr	r3, [pc, #256]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	4b3f      	ldr	r3, [pc, #252]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001ef0:	2180      	movs	r1, #128	; 0x80
 8001ef2:	0549      	lsls	r1, r1, #21
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7fe fc00 	bl	80006fc <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f02:	f7fe fbfb 	bl	80006fc <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e067      	b.n	8001fe4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f14:	4b35      	ldr	r3, [pc, #212]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	049b      	lsls	r3, r3, #18
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x53a>
 8001f20:	e05f      	b.n	8001fe2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	4b32      	ldr	r3, [pc, #200]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4b31      	ldr	r3, [pc, #196]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001f28:	4934      	ldr	r1, [pc, #208]	; (8001ffc <HAL_RCC_OscConfig+0x634>)
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001f2e:	4b2f      	ldr	r3, [pc, #188]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001f34:	2103      	movs	r1, #3
 8001f36:	438a      	bics	r2, r1
 8001f38:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001f3a:	4b2c      	ldr	r3, [pc, #176]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	4b2b      	ldr	r3, [pc, #172]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001f40:	4930      	ldr	r1, [pc, #192]	; (8002004 <HAL_RCC_OscConfig+0x63c>)
 8001f42:	400a      	ands	r2, r1
 8001f44:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f46:	f7fe fbd9 	bl	80006fc <HAL_GetTick>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f50:	f7fe fbd4 	bl	80006fc <HAL_GetTick>
 8001f54:	0002      	movs	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e040      	b.n	8001fe4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f62:	4b22      	ldr	r3, [pc, #136]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	049b      	lsls	r3, r3, #18
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x588>
 8001f6e:	e038      	b.n	8001fe2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e033      	b.n	8001fe4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_RCC_OscConfig+0x624>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2203      	movs	r2, #3
 8001f86:	401a      	ands	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d126      	bne.n	8001fde <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2270      	movs	r2, #112	; 0x70
 8001f94:	401a      	ands	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d11f      	bne.n	8001fde <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	23fe      	movs	r3, #254	; 0xfe
 8001fa2:	01db      	lsls	r3, r3, #7
 8001fa4:	401a      	ands	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001faa:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d116      	bne.n	8001fde <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	23f8      	movs	r3, #248	; 0xf8
 8001fb4:	039b      	lsls	r3, r3, #14
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d10e      	bne.n	8001fde <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	23e0      	movs	r3, #224	; 0xe0
 8001fc4:	051b      	lsls	r3, r3, #20
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	0f5b      	lsrs	r3, r3, #29
 8001fd4:	075a      	lsls	r2, r3, #29
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b008      	add	sp, #32
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	00001388 	.word	0x00001388
 8001ff8:	efffffff 	.word	0xefffffff
 8001ffc:	feffffff 	.word	0xfeffffff
 8002000:	11c1808c 	.word	0x11c1808c
 8002004:	eefeffff 	.word	0xeefeffff

08002008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0e9      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800201c:	4b76      	ldr	r3, [pc, #472]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2207      	movs	r2, #7
 8002022:	4013      	ands	r3, r2
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d91e      	bls.n	8002068 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b73      	ldr	r3, [pc, #460]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2207      	movs	r2, #7
 8002030:	4393      	bics	r3, r2
 8002032:	0019      	movs	r1, r3
 8002034:	4b70      	ldr	r3, [pc, #448]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800203c:	f7fe fb5e 	bl	80006fc <HAL_GetTick>
 8002040:	0003      	movs	r3, r0
 8002042:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002044:	e009      	b.n	800205a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002046:	f7fe fb59 	bl	80006fc <HAL_GetTick>
 800204a:	0002      	movs	r2, r0
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	4a6a      	ldr	r2, [pc, #424]	; (80021fc <HAL_RCC_ClockConfig+0x1f4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e0ca      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800205a:	4b67      	ldr	r3, [pc, #412]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2207      	movs	r2, #7
 8002060:	4013      	ands	r3, r2
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d1ee      	bne.n	8002046 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2202      	movs	r2, #2
 800206e:	4013      	ands	r3, r2
 8002070:	d015      	beq.n	800209e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2204      	movs	r2, #4
 8002078:	4013      	ands	r3, r2
 800207a:	d006      	beq.n	800208a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800207c:	4b60      	ldr	r3, [pc, #384]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	4b5f      	ldr	r3, [pc, #380]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 8002082:	21e0      	movs	r1, #224	; 0xe0
 8002084:	01c9      	lsls	r1, r1, #7
 8002086:	430a      	orrs	r2, r1
 8002088:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208a:	4b5d      	ldr	r3, [pc, #372]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	4a5d      	ldr	r2, [pc, #372]	; (8002204 <HAL_RCC_ClockConfig+0x1fc>)
 8002090:	4013      	ands	r3, r2
 8002092:	0019      	movs	r1, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	4b59      	ldr	r3, [pc, #356]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 800209a:	430a      	orrs	r2, r1
 800209c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2201      	movs	r2, #1
 80020a4:	4013      	ands	r3, r2
 80020a6:	d057      	beq.n	8002158 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d107      	bne.n	80020c0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b0:	4b53      	ldr	r3, [pc, #332]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	029b      	lsls	r3, r3, #10
 80020b8:	4013      	ands	r3, r2
 80020ba:	d12b      	bne.n	8002114 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e097      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d107      	bne.n	80020d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c8:	4b4d      	ldr	r3, [pc, #308]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	049b      	lsls	r3, r3, #18
 80020d0:	4013      	ands	r3, r2
 80020d2:	d11f      	bne.n	8002114 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e08b      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e0:	4b47      	ldr	r3, [pc, #284]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4013      	ands	r3, r2
 80020ea:	d113      	bne.n	8002114 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e07f      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020f8:	4b41      	ldr	r3, [pc, #260]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 80020fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020fc:	2202      	movs	r2, #2
 80020fe:	4013      	ands	r3, r2
 8002100:	d108      	bne.n	8002114 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e074      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002106:	4b3e      	ldr	r3, [pc, #248]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	2202      	movs	r2, #2
 800210c:	4013      	ands	r3, r2
 800210e:	d101      	bne.n	8002114 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e06d      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002114:	4b3a      	ldr	r3, [pc, #232]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2207      	movs	r2, #7
 800211a:	4393      	bics	r3, r2
 800211c:	0019      	movs	r1, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	4b37      	ldr	r3, [pc, #220]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 8002124:	430a      	orrs	r2, r1
 8002126:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002128:	f7fe fae8 	bl	80006fc <HAL_GetTick>
 800212c:	0003      	movs	r3, r0
 800212e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002130:	e009      	b.n	8002146 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002132:	f7fe fae3 	bl	80006fc <HAL_GetTick>
 8002136:	0002      	movs	r2, r0
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	4a2f      	ldr	r2, [pc, #188]	; (80021fc <HAL_RCC_ClockConfig+0x1f4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e054      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002146:	4b2e      	ldr	r3, [pc, #184]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2238      	movs	r2, #56	; 0x38
 800214c:	401a      	ands	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	429a      	cmp	r2, r3
 8002156:	d1ec      	bne.n	8002132 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002158:	4b27      	ldr	r3, [pc, #156]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2207      	movs	r2, #7
 800215e:	4013      	ands	r3, r2
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d21e      	bcs.n	80021a4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2207      	movs	r2, #7
 800216c:	4393      	bics	r3, r2
 800216e:	0019      	movs	r1, r3
 8002170:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002178:	f7fe fac0 	bl	80006fc <HAL_GetTick>
 800217c:	0003      	movs	r3, r0
 800217e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002180:	e009      	b.n	8002196 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002182:	f7fe fabb 	bl	80006fc <HAL_GetTick>
 8002186:	0002      	movs	r2, r0
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <HAL_RCC_ClockConfig+0x1f4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e02c      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002196:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2207      	movs	r2, #7
 800219c:	4013      	ands	r3, r2
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d1ee      	bne.n	8002182 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2204      	movs	r2, #4
 80021aa:	4013      	ands	r3, r2
 80021ac:	d009      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021ae:	4b14      	ldr	r3, [pc, #80]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	4a15      	ldr	r2, [pc, #84]	; (8002208 <HAL_RCC_ClockConfig+0x200>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	0019      	movs	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	4b10      	ldr	r3, [pc, #64]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 80021be:	430a      	orrs	r2, r1
 80021c0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80021c2:	f000 f829 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80021c6:	0001      	movs	r1, r0
 80021c8:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	220f      	movs	r2, #15
 80021d0:	401a      	ands	r2, r3
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <HAL_RCC_ClockConfig+0x204>)
 80021d4:	0092      	lsls	r2, r2, #2
 80021d6:	58d3      	ldr	r3, [r2, r3]
 80021d8:	221f      	movs	r2, #31
 80021da:	4013      	ands	r3, r2
 80021dc:	000a      	movs	r2, r1
 80021de:	40da      	lsrs	r2, r3
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <HAL_RCC_ClockConfig+0x208>)
 80021e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0018      	movs	r0, r3
 80021ea:	f7fe fa2d 	bl	8000648 <HAL_InitTick>
 80021ee:	0003      	movs	r3, r0
}
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b004      	add	sp, #16
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40022000 	.word	0x40022000
 80021fc:	00001388 	.word	0x00001388
 8002200:	40021000 	.word	0x40021000
 8002204:	fffff0ff 	.word	0xfffff0ff
 8002208:	ffff8fff 	.word	0xffff8fff
 800220c:	080047c0 	.word	0x080047c0
 8002210:	20000008 	.word	0x20000008
 8002214:	20000000 	.word	0x20000000

08002218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800221e:	4b3c      	ldr	r3, [pc, #240]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2238      	movs	r2, #56	; 0x38
 8002224:	4013      	ands	r3, r2
 8002226:	d10f      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002228:	4b39      	ldr	r3, [pc, #228]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0adb      	lsrs	r3, r3, #11
 800222e:	2207      	movs	r2, #7
 8002230:	4013      	ands	r3, r2
 8002232:	2201      	movs	r2, #1
 8002234:	409a      	lsls	r2, r3
 8002236:	0013      	movs	r3, r2
 8002238:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800223a:	6839      	ldr	r1, [r7, #0]
 800223c:	4835      	ldr	r0, [pc, #212]	; (8002314 <HAL_RCC_GetSysClockFreq+0xfc>)
 800223e:	f7fd ff61 	bl	8000104 <__udivsi3>
 8002242:	0003      	movs	r3, r0
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	e05d      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002248:	4b31      	ldr	r3, [pc, #196]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2238      	movs	r2, #56	; 0x38
 800224e:	4013      	ands	r3, r2
 8002250:	2b08      	cmp	r3, #8
 8002252:	d102      	bne.n	800225a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002254:	4b30      	ldr	r3, [pc, #192]	; (8002318 <HAL_RCC_GetSysClockFreq+0x100>)
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	e054      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800225a:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2238      	movs	r2, #56	; 0x38
 8002260:	4013      	ands	r3, r2
 8002262:	2b10      	cmp	r3, #16
 8002264:	d138      	bne.n	80022d8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002266:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2203      	movs	r2, #3
 800226c:	4013      	ands	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002270:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	2207      	movs	r2, #7
 8002278:	4013      	ands	r3, r2
 800227a:	3301      	adds	r3, #1
 800227c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b03      	cmp	r3, #3
 8002282:	d10d      	bne.n	80022a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	4824      	ldr	r0, [pc, #144]	; (8002318 <HAL_RCC_GetSysClockFreq+0x100>)
 8002288:	f7fd ff3c 	bl	8000104 <__udivsi3>
 800228c:	0003      	movs	r3, r0
 800228e:	0019      	movs	r1, r3
 8002290:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	227f      	movs	r2, #127	; 0x7f
 8002298:	4013      	ands	r3, r2
 800229a:	434b      	muls	r3, r1
 800229c:	617b      	str	r3, [r7, #20]
        break;
 800229e:	e00d      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	481c      	ldr	r0, [pc, #112]	; (8002314 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022a4:	f7fd ff2e 	bl	8000104 <__udivsi3>
 80022a8:	0003      	movs	r3, r0
 80022aa:	0019      	movs	r1, r3
 80022ac:	4b18      	ldr	r3, [pc, #96]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	227f      	movs	r2, #127	; 0x7f
 80022b4:	4013      	ands	r3, r2
 80022b6:	434b      	muls	r3, r1
 80022b8:	617b      	str	r3, [r7, #20]
        break;
 80022ba:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	0f5b      	lsrs	r3, r3, #29
 80022c2:	2207      	movs	r2, #7
 80022c4:	4013      	ands	r3, r2
 80022c6:	3301      	adds	r3, #1
 80022c8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	6978      	ldr	r0, [r7, #20]
 80022ce:	f7fd ff19 	bl	8000104 <__udivsi3>
 80022d2:	0003      	movs	r3, r0
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	e015      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80022d8:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2238      	movs	r2, #56	; 0x38
 80022de:	4013      	ands	r3, r2
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	d103      	bne.n	80022ec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	e00b      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80022ec:	4b08      	ldr	r3, [pc, #32]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2238      	movs	r2, #56	; 0x38
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b18      	cmp	r3, #24
 80022f6:	d103      	bne.n	8002300 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80022f8:	23fa      	movs	r3, #250	; 0xfa
 80022fa:	01db      	lsls	r3, r3, #7
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	e001      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002304:	693b      	ldr	r3, [r7, #16]
}
 8002306:	0018      	movs	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	b006      	add	sp, #24
 800230c:	bd80      	pop	{r7, pc}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	40021000 	.word	0x40021000
 8002314:	00f42400 	.word	0x00f42400
 8002318:	007a1200 	.word	0x007a1200

0800231c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002320:	4b02      	ldr	r3, [pc, #8]	; (800232c <HAL_RCC_GetHCLKFreq+0x10>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	0018      	movs	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	20000008 	.word	0x20000008

08002330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002330:	b5b0      	push	{r4, r5, r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002334:	f7ff fff2 	bl	800231c <HAL_RCC_GetHCLKFreq>
 8002338:	0004      	movs	r4, r0
 800233a:	f7ff fb39 	bl	80019b0 <LL_RCC_GetAPB1Prescaler>
 800233e:	0003      	movs	r3, r0
 8002340:	0b1a      	lsrs	r2, r3, #12
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002344:	0092      	lsls	r2, r2, #2
 8002346:	58d3      	ldr	r3, [r2, r3]
 8002348:	221f      	movs	r2, #31
 800234a:	4013      	ands	r3, r2
 800234c:	40dc      	lsrs	r4, r3
 800234e:	0023      	movs	r3, r4
}
 8002350:	0018      	movs	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	bdb0      	pop	{r4, r5, r7, pc}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	08004800 	.word	0x08004800

0800235c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002364:	2313      	movs	r3, #19
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800236c:	2312      	movs	r3, #18
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	029b      	lsls	r3, r3, #10
 800237c:	4013      	ands	r3, r2
 800237e:	d100      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002380:	e0a4      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002382:	2311      	movs	r3, #17
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238a:	4bc3      	ldr	r3, [pc, #780]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800238c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	055b      	lsls	r3, r3, #21
 8002392:	4013      	ands	r3, r2
 8002394:	d111      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	4bc0      	ldr	r3, [pc, #768]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800239a:	4bbf      	ldr	r3, [pc, #764]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	0549      	lsls	r1, r1, #21
 80023a0:	430a      	orrs	r2, r1
 80023a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80023a4:	4bbc      	ldr	r3, [pc, #752]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	055b      	lsls	r3, r3, #21
 80023ac:	4013      	ands	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b2:	2311      	movs	r3, #17
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023ba:	4bb8      	ldr	r3, [pc, #736]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	4bb7      	ldr	r3, [pc, #732]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80023c0:	2180      	movs	r1, #128	; 0x80
 80023c2:	0049      	lsls	r1, r1, #1
 80023c4:	430a      	orrs	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023c8:	f7fe f998 	bl	80006fc <HAL_GetTick>
 80023cc:	0003      	movs	r3, r0
 80023ce:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023d0:	e00b      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d2:	f7fe f993 	bl	80006fc <HAL_GetTick>
 80023d6:	0002      	movs	r2, r0
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d904      	bls.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 80023e0:	2313      	movs	r3, #19
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	2203      	movs	r2, #3
 80023e6:	701a      	strb	r2, [r3, #0]
        break;
 80023e8:	e005      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023ea:	4bac      	ldr	r3, [pc, #688]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4013      	ands	r3, r2
 80023f4:	d0ed      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80023f6:	2313      	movs	r3, #19
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d154      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002400:	4ba5      	ldr	r3, [pc, #660]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002402:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002404:	23c0      	movs	r3, #192	; 0xc0
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4013      	ands	r3, r2
 800240a:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d019      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	429a      	cmp	r2, r3
 800241a:	d014      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800241c:	4b9e      	ldr	r3, [pc, #632]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800241e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002420:	4a9f      	ldr	r2, [pc, #636]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002422:	4013      	ands	r3, r2
 8002424:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002426:	4b9c      	ldr	r3, [pc, #624]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002428:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800242a:	4b9b      	ldr	r3, [pc, #620]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800242c:	2180      	movs	r1, #128	; 0x80
 800242e:	0249      	lsls	r1, r1, #9
 8002430:	430a      	orrs	r2, r1
 8002432:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002434:	4b98      	ldr	r3, [pc, #608]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002436:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002438:	4b97      	ldr	r3, [pc, #604]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800243a:	499a      	ldr	r1, [pc, #616]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800243c:	400a      	ands	r2, r1
 800243e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002440:	4b95      	ldr	r3, [pc, #596]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2201      	movs	r2, #1
 800244a:	4013      	ands	r3, r2
 800244c:	d016      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7fe f955 	bl	80006fc <HAL_GetTick>
 8002452:	0003      	movs	r3, r0
 8002454:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002456:	e00c      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002458:	f7fe f950 	bl	80006fc <HAL_GetTick>
 800245c:	0002      	movs	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	4a91      	ldr	r2, [pc, #580]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d904      	bls.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8002468:	2313      	movs	r3, #19
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	2203      	movs	r2, #3
 800246e:	701a      	strb	r2, [r3, #0]
            break;
 8002470:	e004      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002472:	4b89      	ldr	r3, [pc, #548]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002476:	2202      	movs	r2, #2
 8002478:	4013      	ands	r3, r2
 800247a:	d0ed      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 800247c:	2313      	movs	r3, #19
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10a      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002486:	4b84      	ldr	r3, [pc, #528]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248a:	4a85      	ldr	r2, [pc, #532]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800248c:	4013      	ands	r3, r2
 800248e:	0019      	movs	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002494:	4b80      	ldr	r3, [pc, #512]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002496:	430a      	orrs	r2, r1
 8002498:	65da      	str	r2, [r3, #92]	; 0x5c
 800249a:	e00c      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800249c:	2312      	movs	r3, #18
 800249e:	18fb      	adds	r3, r7, r3
 80024a0:	2213      	movs	r2, #19
 80024a2:	18ba      	adds	r2, r7, r2
 80024a4:	7812      	ldrb	r2, [r2, #0]
 80024a6:	701a      	strb	r2, [r3, #0]
 80024a8:	e005      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024aa:	2312      	movs	r3, #18
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	2213      	movs	r2, #19
 80024b0:	18ba      	adds	r2, r7, r2
 80024b2:	7812      	ldrb	r2, [r2, #0]
 80024b4:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024b6:	2311      	movs	r3, #17
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d105      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c0:	4b75      	ldr	r3, [pc, #468]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024c4:	4b74      	ldr	r3, [pc, #464]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024c6:	4979      	ldr	r1, [pc, #484]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80024c8:	400a      	ands	r2, r1
 80024ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2201      	movs	r2, #1
 80024d2:	4013      	ands	r3, r2
 80024d4:	d009      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024d6:	4b70      	ldr	r3, [pc, #448]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024da:	2203      	movs	r2, #3
 80024dc:	4393      	bics	r3, r2
 80024de:	0019      	movs	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	4b6c      	ldr	r3, [pc, #432]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024e6:	430a      	orrs	r2, r1
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2202      	movs	r2, #2
 80024f0:	4013      	ands	r3, r2
 80024f2:	d009      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024f4:	4b68      	ldr	r3, [pc, #416]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f8:	220c      	movs	r2, #12
 80024fa:	4393      	bics	r3, r2
 80024fc:	0019      	movs	r1, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	4b65      	ldr	r3, [pc, #404]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002504:	430a      	orrs	r2, r1
 8002506:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2220      	movs	r2, #32
 800250e:	4013      	ands	r3, r2
 8002510:	d009      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002512:	4b61      	ldr	r3, [pc, #388]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002516:	4a66      	ldr	r2, [pc, #408]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002518:	4013      	ands	r3, r2
 800251a:	0019      	movs	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	4b5d      	ldr	r3, [pc, #372]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002522:	430a      	orrs	r2, r1
 8002524:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4013      	ands	r3, r2
 8002530:	d009      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002532:	4b59      	ldr	r3, [pc, #356]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002536:	4a5f      	ldr	r2, [pc, #380]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002538:	4013      	ands	r3, r2
 800253a:	0019      	movs	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	4b55      	ldr	r3, [pc, #340]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002542:	430a      	orrs	r2, r1
 8002544:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4013      	ands	r3, r2
 8002550:	d009      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002552:	4b51      	ldr	r3, [pc, #324]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	4a58      	ldr	r2, [pc, #352]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002558:	4013      	ands	r3, r2
 800255a:	0019      	movs	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69da      	ldr	r2, [r3, #28]
 8002560:	4b4d      	ldr	r3, [pc, #308]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002562:	430a      	orrs	r2, r1
 8002564:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2240      	movs	r2, #64	; 0x40
 800256c:	4013      	ands	r3, r2
 800256e:	d009      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002570:	4b49      	ldr	r3, [pc, #292]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002574:	4a51      	ldr	r2, [pc, #324]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002576:	4013      	ands	r3, r2
 8002578:	0019      	movs	r1, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691a      	ldr	r2, [r3, #16]
 800257e:	4b46      	ldr	r3, [pc, #280]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002580:	430a      	orrs	r2, r1
 8002582:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	01db      	lsls	r3, r3, #7
 800258c:	4013      	ands	r3, r2
 800258e:	d015      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002590:	4b41      	ldr	r3, [pc, #260]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	0899      	lsrs	r1, r3, #2
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1a      	ldr	r2, [r3, #32]
 800259c:	4b3e      	ldr	r3, [pc, #248]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800259e:	430a      	orrs	r2, r1
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1a      	ldr	r2, [r3, #32]
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	05db      	lsls	r3, r3, #23
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d106      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025ae:	4b3a      	ldr	r3, [pc, #232]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	4b39      	ldr	r3, [pc, #228]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025b4:	2180      	movs	r1, #128	; 0x80
 80025b6:	0249      	lsls	r1, r1, #9
 80025b8:	430a      	orrs	r2, r1
 80025ba:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	2380      	movs	r3, #128	; 0x80
 80025c2:	031b      	lsls	r3, r3, #12
 80025c4:	4013      	ands	r3, r2
 80025c6:	d009      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025c8:	4b33      	ldr	r3, [pc, #204]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025cc:	2240      	movs	r2, #64	; 0x40
 80025ce:	4393      	bics	r3, r2
 80025d0:	0019      	movs	r1, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025d6:	4b30      	ldr	r3, [pc, #192]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025d8:	430a      	orrs	r2, r1
 80025da:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	039b      	lsls	r3, r3, #14
 80025e4:	4013      	ands	r3, r2
 80025e6:	d016      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025e8:	4b2b      	ldr	r3, [pc, #172]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	4a34      	ldr	r2, [pc, #208]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025f6:	4b28      	ldr	r3, [pc, #160]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025f8:	430a      	orrs	r2, r1
 80025fa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	03db      	lsls	r3, r3, #15
 8002604:	429a      	cmp	r2, r3
 8002606:	d106      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002608:	4b23      	ldr	r3, [pc, #140]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	4b22      	ldr	r3, [pc, #136]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800260e:	2180      	movs	r1, #128	; 0x80
 8002610:	0449      	lsls	r1, r1, #17
 8002612:	430a      	orrs	r2, r1
 8002614:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	03db      	lsls	r3, r3, #15
 800261e:	4013      	ands	r3, r2
 8002620:	d016      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002622:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	4a27      	ldr	r2, [pc, #156]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002628:	4013      	ands	r3, r2
 800262a:	0019      	movs	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002632:	430a      	orrs	r2, r1
 8002634:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	045b      	lsls	r3, r3, #17
 800263e:	429a      	cmp	r2, r3
 8002640:	d106      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002642:	4b15      	ldr	r3, [pc, #84]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002648:	2180      	movs	r1, #128	; 0x80
 800264a:	0449      	lsls	r1, r1, #17
 800264c:	430a      	orrs	r2, r1
 800264e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	4013      	ands	r3, r2
 800265a:	d016      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	4a19      	ldr	r2, [pc, #100]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002662:	4013      	ands	r3, r2
 8002664:	0019      	movs	r1, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800266c:	430a      	orrs	r2, r1
 800266e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	695a      	ldr	r2, [r3, #20]
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	01db      	lsls	r3, r3, #7
 8002678:	429a      	cmp	r2, r3
 800267a:	d106      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002682:	2180      	movs	r1, #128	; 0x80
 8002684:	0249      	lsls	r1, r1, #9
 8002686:	430a      	orrs	r2, r1
 8002688:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 800268a:	2312      	movs	r3, #18
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	781b      	ldrb	r3, [r3, #0]
}
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	b006      	add	sp, #24
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40021000 	.word	0x40021000
 800269c:	40007000 	.word	0x40007000
 80026a0:	fffffcff 	.word	0xfffffcff
 80026a4:	fffeffff 	.word	0xfffeffff
 80026a8:	00001388 	.word	0x00001388
 80026ac:	efffffff 	.word	0xefffffff
 80026b0:	fffff3ff 	.word	0xfffff3ff
 80026b4:	fff3ffff 	.word	0xfff3ffff
 80026b8:	ffcfffff 	.word	0xffcfffff
 80026bc:	ffffcfff 	.word	0xffffcfff
 80026c0:	ffbfffff 	.word	0xffbfffff
 80026c4:	feffffff 	.word	0xfeffffff
 80026c8:	ffff3fff 	.word	0xffff3fff

080026cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e046      	b.n	800276c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2280      	movs	r2, #128	; 0x80
 80026e2:	589b      	ldr	r3, [r3, r2]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d107      	bne.n	80026f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	227c      	movs	r2, #124	; 0x7c
 80026ec:	2100      	movs	r1, #0
 80026ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	0018      	movs	r0, r3
 80026f4:	f001 ff6a 	bl	80045cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2280      	movs	r2, #128	; 0x80
 80026fc:	2124      	movs	r1, #36	; 0x24
 80026fe:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2101      	movs	r1, #1
 800270c:	438a      	bics	r2, r1
 800270e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	0018      	movs	r0, r3
 8002714:	f000 f99e 	bl	8002a54 <UART_SetConfig>
 8002718:	0003      	movs	r3, r0
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e024      	b.n	800276c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	0018      	movs	r0, r3
 800272e:	f001 fa7b 	bl	8003c28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	490d      	ldr	r1, [pc, #52]	; (8002774 <HAL_UART_Init+0xa8>)
 800273e:	400a      	ands	r2, r1
 8002740:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	212a      	movs	r1, #42	; 0x2a
 800274e:	438a      	bics	r2, r1
 8002750:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2101      	movs	r1, #1
 800275e:	430a      	orrs	r2, r1
 8002760:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	0018      	movs	r0, r3
 8002766:	f001 fb13 	bl	8003d90 <UART_CheckIdleState>
 800276a:	0003      	movs	r3, r0
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b002      	add	sp, #8
 8002772:	bd80      	pop	{r7, pc}
 8002774:	ffffb7ff 	.word	0xffffb7ff

08002778 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	220f      	movs	r2, #15
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d117      	bne.n	80027d6 <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	2220      	movs	r2, #32
 80027aa:	4013      	ands	r3, r2
 80027ac:	d013      	beq.n	80027d6 <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	2220      	movs	r2, #32
 80027b2:	4013      	ands	r3, r2
 80027b4:	d104      	bne.n	80027c0 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	055b      	lsls	r3, r3, #21
 80027bc:	4013      	ands	r3, r2
 80027be:	d00a      	beq.n	80027d6 <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d100      	bne.n	80027ca <HAL_UART_IRQHandler+0x52>
 80027c8:	e127      	b.n	8002a1a <HAL_UART_IRQHandler+0x2a2>
      {
        huart->RxISR(huart);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	0010      	movs	r0, r2
 80027d2:	4798      	blx	r3
      }
      return;
 80027d4:	e121      	b.n	8002a1a <HAL_UART_IRQHandler+0x2a2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d100      	bne.n	80027de <HAL_UART_IRQHandler+0x66>
 80027dc:	e0c8      	b.n	8002970 <HAL_UART_IRQHandler+0x1f8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	4a92      	ldr	r2, [pc, #584]	; (8002a2c <HAL_UART_IRQHandler+0x2b4>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	d105      	bne.n	80027f2 <HAL_UART_IRQHandler+0x7a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	2390      	movs	r3, #144	; 0x90
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4013      	ands	r3, r2
 80027ee:	d100      	bne.n	80027f2 <HAL_UART_IRQHandler+0x7a>
 80027f0:	e0be      	b.n	8002970 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	2201      	movs	r2, #1
 80027f6:	4013      	ands	r3, r2
 80027f8:	d010      	beq.n	800281c <HAL_UART_IRQHandler+0xa4>
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4013      	ands	r3, r2
 8002802:	d00b      	beq.n	800281c <HAL_UART_IRQHandler+0xa4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2201      	movs	r2, #1
 800280a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2288      	movs	r2, #136	; 0x88
 8002810:	589b      	ldr	r3, [r3, r2]
 8002812:	2201      	movs	r2, #1
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2188      	movs	r1, #136	; 0x88
 800281a:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	2202      	movs	r2, #2
 8002820:	4013      	ands	r3, r2
 8002822:	d00f      	beq.n	8002844 <HAL_UART_IRQHandler+0xcc>
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2201      	movs	r2, #1
 8002828:	4013      	ands	r3, r2
 800282a:	d00b      	beq.n	8002844 <HAL_UART_IRQHandler+0xcc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2202      	movs	r2, #2
 8002832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2288      	movs	r2, #136	; 0x88
 8002838:	589b      	ldr	r3, [r3, r2]
 800283a:	2204      	movs	r2, #4
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2188      	movs	r1, #136	; 0x88
 8002842:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	2204      	movs	r2, #4
 8002848:	4013      	ands	r3, r2
 800284a:	d00f      	beq.n	800286c <HAL_UART_IRQHandler+0xf4>
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2201      	movs	r2, #1
 8002850:	4013      	ands	r3, r2
 8002852:	d00b      	beq.n	800286c <HAL_UART_IRQHandler+0xf4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2204      	movs	r2, #4
 800285a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2288      	movs	r2, #136	; 0x88
 8002860:	589b      	ldr	r3, [r3, r2]
 8002862:	2202      	movs	r2, #2
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2188      	movs	r1, #136	; 0x88
 800286a:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	2208      	movs	r2, #8
 8002870:	4013      	ands	r3, r2
 8002872:	d013      	beq.n	800289c <HAL_UART_IRQHandler+0x124>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2220      	movs	r2, #32
 8002878:	4013      	ands	r3, r2
 800287a:	d103      	bne.n	8002884 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	4a6b      	ldr	r2, [pc, #428]	; (8002a2c <HAL_UART_IRQHandler+0x2b4>)
 8002880:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002882:	d00b      	beq.n	800289c <HAL_UART_IRQHandler+0x124>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2208      	movs	r2, #8
 800288a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2288      	movs	r2, #136	; 0x88
 8002890:	589b      	ldr	r3, [r3, r2]
 8002892:	2208      	movs	r2, #8
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2188      	movs	r1, #136	; 0x88
 800289a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2288      	movs	r2, #136	; 0x88
 80028a0:	589b      	ldr	r3, [r3, r2]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d100      	bne.n	80028a8 <HAL_UART_IRQHandler+0x130>
 80028a6:	e0ba      	b.n	8002a1e <HAL_UART_IRQHandler+0x2a6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	2220      	movs	r2, #32
 80028ac:	4013      	ands	r3, r2
 80028ae:	d011      	beq.n	80028d4 <HAL_UART_IRQHandler+0x15c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	2220      	movs	r2, #32
 80028b4:	4013      	ands	r3, r2
 80028b6:	d104      	bne.n	80028c2 <HAL_UART_IRQHandler+0x14a>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	055b      	lsls	r3, r3, #21
 80028be:	4013      	ands	r3, r2
 80028c0:	d008      	beq.n	80028d4 <HAL_UART_IRQHandler+0x15c>
      {
        if (huart->RxISR != NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d004      	beq.n	80028d4 <HAL_UART_IRQHandler+0x15c>
        {
          huart->RxISR(huart);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	0010      	movs	r0, r2
 80028d2:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2288      	movs	r2, #136	; 0x88
 80028d8:	589b      	ldr	r3, [r3, r2]
 80028da:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2240      	movs	r2, #64	; 0x40
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b40      	cmp	r3, #64	; 0x40
 80028e8:	d003      	beq.n	80028f2 <HAL_UART_IRQHandler+0x17a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2208      	movs	r2, #8
 80028ee:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028f0:	d033      	beq.n	800295a <HAL_UART_IRQHandler+0x1e2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f001 fae1 	bl	8003ebc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2240      	movs	r2, #64	; 0x40
 8002902:	4013      	ands	r3, r2
 8002904:	2b40      	cmp	r3, #64	; 0x40
 8002906:	d123      	bne.n	8002950 <HAL_UART_IRQHandler+0x1d8>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2140      	movs	r1, #64	; 0x40
 8002914:	438a      	bics	r2, r1
 8002916:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800291c:	2b00      	cmp	r3, #0
 800291e:	d012      	beq.n	8002946 <HAL_UART_IRQHandler+0x1ce>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002924:	4a42      	ldr	r2, [pc, #264]	; (8002a30 <HAL_UART_IRQHandler+0x2b8>)
 8002926:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800292c:	0018      	movs	r0, r3
 800292e:	f7fe fde9 	bl	8001504 <HAL_DMA_Abort_IT>
 8002932:	1e03      	subs	r3, r0, #0
 8002934:	d01a      	beq.n	800296c <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800293a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002940:	0018      	movs	r0, r3
 8002942:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002944:	e012      	b.n	800296c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	0018      	movs	r0, r3
 800294a:	f000 f87b 	bl	8002a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800294e:	e00d      	b.n	800296c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	0018      	movs	r0, r3
 8002954:	f000 f876 	bl	8002a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002958:	e008      	b.n	800296c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	0018      	movs	r0, r3
 800295e:	f000 f871 	bl	8002a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2288      	movs	r2, #136	; 0x88
 8002966:	2100      	movs	r1, #0
 8002968:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800296a:	e058      	b.n	8002a1e <HAL_UART_IRQHandler+0x2a6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800296c:	46c0      	nop			; (mov r8, r8)
    return;
 800296e:	e056      	b.n	8002a1e <HAL_UART_IRQHandler+0x2a6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002970:	69fa      	ldr	r2, [r7, #28]
 8002972:	2380      	movs	r3, #128	; 0x80
 8002974:	035b      	lsls	r3, r3, #13
 8002976:	4013      	ands	r3, r2
 8002978:	d00e      	beq.n	8002998 <HAL_UART_IRQHandler+0x220>
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	03db      	lsls	r3, r3, #15
 8002980:	4013      	ands	r3, r2
 8002982:	d009      	beq.n	8002998 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2280      	movs	r2, #128	; 0x80
 800298a:	0352      	lsls	r2, r2, #13
 800298c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	0018      	movs	r0, r3
 8002992:	f001 fae9 	bl	8003f68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002996:	e045      	b.n	8002a24 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	2280      	movs	r2, #128	; 0x80
 800299c:	4013      	ands	r3, r2
 800299e:	d012      	beq.n	80029c6 <HAL_UART_IRQHandler+0x24e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2280      	movs	r2, #128	; 0x80
 80029a4:	4013      	ands	r3, r2
 80029a6:	d104      	bne.n	80029b2 <HAL_UART_IRQHandler+0x23a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	041b      	lsls	r3, r3, #16
 80029ae:	4013      	ands	r3, r2
 80029b0:	d009      	beq.n	80029c6 <HAL_UART_IRQHandler+0x24e>
  {
    if (huart->TxISR != NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d033      	beq.n	8002a22 <HAL_UART_IRQHandler+0x2aa>
    {
      huart->TxISR(huart);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	0010      	movs	r0, r2
 80029c2:	4798      	blx	r3
    }
    return;
 80029c4:	e02d      	b.n	8002a22 <HAL_UART_IRQHandler+0x2aa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	2240      	movs	r2, #64	; 0x40
 80029ca:	4013      	ands	r3, r2
 80029cc:	d008      	beq.n	80029e0 <HAL_UART_IRQHandler+0x268>
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	2240      	movs	r2, #64	; 0x40
 80029d2:	4013      	ands	r3, r2
 80029d4:	d004      	beq.n	80029e0 <HAL_UART_IRQHandler+0x268>
  {
    UART_EndTransmit_IT(huart);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	0018      	movs	r0, r3
 80029da:	f001 faaa 	bl	8003f32 <UART_EndTransmit_IT>
    return;
 80029de:	e021      	b.n	8002a24 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80029e0:	69fa      	ldr	r2, [r7, #28]
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	041b      	lsls	r3, r3, #16
 80029e6:	4013      	ands	r3, r2
 80029e8:	d009      	beq.n	80029fe <HAL_UART_IRQHandler+0x286>
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	05db      	lsls	r3, r3, #23
 80029f0:	4013      	ands	r3, r2
 80029f2:	d004      	beq.n	80029fe <HAL_UART_IRQHandler+0x286>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	0018      	movs	r0, r3
 80029f8:	f001 fac6 	bl	8003f88 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029fc:	e012      	b.n	8002a24 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	045b      	lsls	r3, r3, #17
 8002a04:	4013      	ands	r3, r2
 8002a06:	d00d      	beq.n	8002a24 <HAL_UART_IRQHandler+0x2ac>
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	da0a      	bge.n	8002a24 <HAL_UART_IRQHandler+0x2ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	0018      	movs	r0, r3
 8002a12:	f001 fab1 	bl	8003f78 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	e004      	b.n	8002a24 <HAL_UART_IRQHandler+0x2ac>
      return;
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	e002      	b.n	8002a24 <HAL_UART_IRQHandler+0x2ac>
    return;
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	e000      	b.n	8002a24 <HAL_UART_IRQHandler+0x2ac>
    return;
 8002a22:	46c0      	nop			; (mov r8, r8)
  }
}
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b008      	add	sp, #32
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	10000001 	.word	0x10000001
 8002a30:	08003f05 	.word	0x08003f05

08002a34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b002      	add	sp, #8
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b002      	add	sp, #8
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a56:	b09f      	sub	sp, #124	; 0x7c
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a60:	2313      	movs	r3, #19
 8002a62:	2258      	movs	r2, #88	; 0x58
 8002a64:	18ba      	adds	r2, r7, r2
 8002a66:	18d2      	adds	r2, r2, r3
 8002a68:	2300      	movs	r3, #0
 8002a6a:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	667b      	str	r3, [r7, #100]	; 0x64
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	677b      	str	r3, [r7, #116]	; 0x74
  tmpreg |= (uint32_t)huart->FifoMode;
 8002a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a8a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	677b      	str	r3, [r7, #116]	; 0x74
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4bba      	ldr	r3, [pc, #744]	; (8002d84 <UART_SetConfig+0x330>)
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	0011      	movs	r1, r2
 8002a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	4bb6      	ldr	r3, [pc, #728]	; (8002d88 <UART_SetConfig+0x334>)
 8002ab0:	401a      	ands	r2, r3
 8002ab2:	0010      	movs	r0, r2
 8002ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab6:	68d9      	ldr	r1, [r3, #12]
 8002ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	0003      	movs	r3, r0
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	677b      	str	r3, [r7, #116]	; 0x74

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ac8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4baf      	ldr	r3, [pc, #700]	; (8002d8c <UART_SetConfig+0x338>)
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d004      	beq.n	8002adc <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad4:	6a1a      	ldr	r2, [r3, #32]
 8002ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	677b      	str	r3, [r7, #116]	; 0x74
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	4bab      	ldr	r3, [pc, #684]	; (8002d90 <UART_SetConfig+0x33c>)
 8002ae4:	401a      	ands	r2, r3
 8002ae6:	0011      	movs	r1, r2
 8002ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aee:	430b      	orrs	r3, r1
 8002af0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af8:	230f      	movs	r3, #15
 8002afa:	439a      	bics	r2, r3
 8002afc:	0010      	movs	r0, r2
 8002afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	0003      	movs	r3, r0
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4ba0      	ldr	r3, [pc, #640]	; (8002d94 <UART_SetConfig+0x340>)
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d12f      	bne.n	8002b76 <UART_SetConfig+0x122>
 8002b16:	4ba0      	ldr	r3, [pc, #640]	; (8002d98 <UART_SetConfig+0x344>)
 8002b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d013      	beq.n	8002b4a <UART_SetConfig+0xf6>
 8002b22:	d304      	bcc.n	8002b2e <UART_SetConfig+0xda>
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d009      	beq.n	8002b3c <UART_SetConfig+0xe8>
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d015      	beq.n	8002b58 <UART_SetConfig+0x104>
 8002b2c:	e01b      	b.n	8002b66 <UART_SetConfig+0x112>
 8002b2e:	231b      	movs	r3, #27
 8002b30:	2258      	movs	r2, #88	; 0x58
 8002b32:	18ba      	adds	r2, r7, r2
 8002b34:	18d2      	adds	r2, r2, r3
 8002b36:	2300      	movs	r3, #0
 8002b38:	7013      	strb	r3, [r2, #0]
 8002b3a:	e0b4      	b.n	8002ca6 <UART_SetConfig+0x252>
 8002b3c:	231b      	movs	r3, #27
 8002b3e:	2258      	movs	r2, #88	; 0x58
 8002b40:	18ba      	adds	r2, r7, r2
 8002b42:	18d2      	adds	r2, r2, r3
 8002b44:	2302      	movs	r3, #2
 8002b46:	7013      	strb	r3, [r2, #0]
 8002b48:	e0ad      	b.n	8002ca6 <UART_SetConfig+0x252>
 8002b4a:	231b      	movs	r3, #27
 8002b4c:	2258      	movs	r2, #88	; 0x58
 8002b4e:	18ba      	adds	r2, r7, r2
 8002b50:	18d2      	adds	r2, r2, r3
 8002b52:	2304      	movs	r3, #4
 8002b54:	7013      	strb	r3, [r2, #0]
 8002b56:	e0a6      	b.n	8002ca6 <UART_SetConfig+0x252>
 8002b58:	231b      	movs	r3, #27
 8002b5a:	2258      	movs	r2, #88	; 0x58
 8002b5c:	18ba      	adds	r2, r7, r2
 8002b5e:	18d2      	adds	r2, r2, r3
 8002b60:	2308      	movs	r3, #8
 8002b62:	7013      	strb	r3, [r2, #0]
 8002b64:	e09f      	b.n	8002ca6 <UART_SetConfig+0x252>
 8002b66:	231b      	movs	r3, #27
 8002b68:	2258      	movs	r2, #88	; 0x58
 8002b6a:	18ba      	adds	r2, r7, r2
 8002b6c:	18d2      	adds	r2, r2, r3
 8002b6e:	2310      	movs	r3, #16
 8002b70:	7013      	strb	r3, [r2, #0]
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	e097      	b.n	8002ca6 <UART_SetConfig+0x252>
 8002b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	4b88      	ldr	r3, [pc, #544]	; (8002d9c <UART_SetConfig+0x348>)
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d132      	bne.n	8002be6 <UART_SetConfig+0x192>
 8002b80:	4b85      	ldr	r3, [pc, #532]	; (8002d98 <UART_SetConfig+0x344>)
 8002b82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b84:	230c      	movs	r3, #12
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d016      	beq.n	8002bba <UART_SetConfig+0x166>
 8002b8c:	d802      	bhi.n	8002b94 <UART_SetConfig+0x140>
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <UART_SetConfig+0x14a>
 8002b92:	e020      	b.n	8002bd6 <UART_SetConfig+0x182>
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d009      	beq.n	8002bac <UART_SetConfig+0x158>
 8002b98:	2b0c      	cmp	r3, #12
 8002b9a:	d015      	beq.n	8002bc8 <UART_SetConfig+0x174>
 8002b9c:	e01b      	b.n	8002bd6 <UART_SetConfig+0x182>
 8002b9e:	231b      	movs	r3, #27
 8002ba0:	2258      	movs	r2, #88	; 0x58
 8002ba2:	18ba      	adds	r2, r7, r2
 8002ba4:	18d2      	adds	r2, r2, r3
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	7013      	strb	r3, [r2, #0]
 8002baa:	e07c      	b.n	8002ca6 <UART_SetConfig+0x252>
 8002bac:	231b      	movs	r3, #27
 8002bae:	2258      	movs	r2, #88	; 0x58
 8002bb0:	18ba      	adds	r2, r7, r2
 8002bb2:	18d2      	adds	r2, r2, r3
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	7013      	strb	r3, [r2, #0]
 8002bb8:	e075      	b.n	8002ca6 <UART_SetConfig+0x252>
 8002bba:	231b      	movs	r3, #27
 8002bbc:	2258      	movs	r2, #88	; 0x58
 8002bbe:	18ba      	adds	r2, r7, r2
 8002bc0:	18d2      	adds	r2, r2, r3
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	7013      	strb	r3, [r2, #0]
 8002bc6:	e06e      	b.n	8002ca6 <UART_SetConfig+0x252>
 8002bc8:	231b      	movs	r3, #27
 8002bca:	2258      	movs	r2, #88	; 0x58
 8002bcc:	18ba      	adds	r2, r7, r2
 8002bce:	18d2      	adds	r2, r2, r3
 8002bd0:	2308      	movs	r3, #8
 8002bd2:	7013      	strb	r3, [r2, #0]
 8002bd4:	e067      	b.n	8002ca6 <UART_SetConfig+0x252>
 8002bd6:	231b      	movs	r3, #27
 8002bd8:	2258      	movs	r2, #88	; 0x58
 8002bda:	18ba      	adds	r2, r7, r2
 8002bdc:	18d2      	adds	r2, r2, r3
 8002bde:	2310      	movs	r3, #16
 8002be0:	7013      	strb	r3, [r2, #0]
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	e05f      	b.n	8002ca6 <UART_SetConfig+0x252>
 8002be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4b6d      	ldr	r3, [pc, #436]	; (8002da0 <UART_SetConfig+0x34c>)
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d106      	bne.n	8002bfe <UART_SetConfig+0x1aa>
 8002bf0:	231b      	movs	r3, #27
 8002bf2:	2258      	movs	r2, #88	; 0x58
 8002bf4:	18ba      	adds	r2, r7, r2
 8002bf6:	18d2      	adds	r2, r2, r3
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	7013      	strb	r3, [r2, #0]
 8002bfc:	e053      	b.n	8002ca6 <UART_SetConfig+0x252>
 8002bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	4b68      	ldr	r3, [pc, #416]	; (8002da4 <UART_SetConfig+0x350>)
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d106      	bne.n	8002c16 <UART_SetConfig+0x1c2>
 8002c08:	231b      	movs	r3, #27
 8002c0a:	2258      	movs	r2, #88	; 0x58
 8002c0c:	18ba      	adds	r2, r7, r2
 8002c0e:	18d2      	adds	r2, r2, r3
 8002c10:	2300      	movs	r3, #0
 8002c12:	7013      	strb	r3, [r2, #0]
 8002c14:	e047      	b.n	8002ca6 <UART_SetConfig+0x252>
 8002c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4b5c      	ldr	r3, [pc, #368]	; (8002d8c <UART_SetConfig+0x338>)
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d13c      	bne.n	8002c9a <UART_SetConfig+0x246>
 8002c20:	4b5d      	ldr	r3, [pc, #372]	; (8002d98 <UART_SetConfig+0x344>)
 8002c22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c24:	23c0      	movs	r3, #192	; 0xc0
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	401a      	ands	r2, r3
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d01d      	beq.n	8002c6e <UART_SetConfig+0x21a>
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d802      	bhi.n	8002c40 <UART_SetConfig+0x1ec>
 8002c3a:	2a00      	cmp	r2, #0
 8002c3c:	d009      	beq.n	8002c52 <UART_SetConfig+0x1fe>
 8002c3e:	e024      	b.n	8002c8a <UART_SetConfig+0x236>
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d00b      	beq.n	8002c60 <UART_SetConfig+0x20c>
 8002c48:	23c0      	movs	r3, #192	; 0xc0
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d015      	beq.n	8002c7c <UART_SetConfig+0x228>
 8002c50:	e01b      	b.n	8002c8a <UART_SetConfig+0x236>
 8002c52:	231b      	movs	r3, #27
 8002c54:	2258      	movs	r2, #88	; 0x58
 8002c56:	18ba      	adds	r2, r7, r2
 8002c58:	18d2      	adds	r2, r2, r3
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	7013      	strb	r3, [r2, #0]
 8002c5e:	e022      	b.n	8002ca6 <UART_SetConfig+0x252>
 8002c60:	231b      	movs	r3, #27
 8002c62:	2258      	movs	r2, #88	; 0x58
 8002c64:	18ba      	adds	r2, r7, r2
 8002c66:	18d2      	adds	r2, r2, r3
 8002c68:	2302      	movs	r3, #2
 8002c6a:	7013      	strb	r3, [r2, #0]
 8002c6c:	e01b      	b.n	8002ca6 <UART_SetConfig+0x252>
 8002c6e:	231b      	movs	r3, #27
 8002c70:	2258      	movs	r2, #88	; 0x58
 8002c72:	18ba      	adds	r2, r7, r2
 8002c74:	18d2      	adds	r2, r2, r3
 8002c76:	2304      	movs	r3, #4
 8002c78:	7013      	strb	r3, [r2, #0]
 8002c7a:	e014      	b.n	8002ca6 <UART_SetConfig+0x252>
 8002c7c:	231b      	movs	r3, #27
 8002c7e:	2258      	movs	r2, #88	; 0x58
 8002c80:	18ba      	adds	r2, r7, r2
 8002c82:	18d2      	adds	r2, r2, r3
 8002c84:	2308      	movs	r3, #8
 8002c86:	7013      	strb	r3, [r2, #0]
 8002c88:	e00d      	b.n	8002ca6 <UART_SetConfig+0x252>
 8002c8a:	231b      	movs	r3, #27
 8002c8c:	2258      	movs	r2, #88	; 0x58
 8002c8e:	18ba      	adds	r2, r7, r2
 8002c90:	18d2      	adds	r2, r2, r3
 8002c92:	2310      	movs	r3, #16
 8002c94:	7013      	strb	r3, [r2, #0]
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	e005      	b.n	8002ca6 <UART_SetConfig+0x252>
 8002c9a:	231b      	movs	r3, #27
 8002c9c:	2258      	movs	r2, #88	; 0x58
 8002c9e:	18ba      	adds	r2, r7, r2
 8002ca0:	18d2      	adds	r2, r2, r3
 8002ca2:	2310      	movs	r3, #16
 8002ca4:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b38      	ldr	r3, [pc, #224]	; (8002d8c <UART_SetConfig+0x338>)
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <UART_SetConfig+0x260>
 8002cb0:	f000 fbcc 	bl	800344c <UART_SetConfig+0x9f8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002cb4:	231b      	movs	r3, #27
 8002cb6:	2258      	movs	r2, #88	; 0x58
 8002cb8:	4694      	mov	ip, r2
 8002cba:	44bc      	add	ip, r7
 8002cbc:	4463      	add	r3, ip
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d100      	bne.n	8002cc6 <UART_SetConfig+0x272>
 8002cc4:	e070      	b.n	8002da8 <UART_SetConfig+0x354>
 8002cc6:	dc02      	bgt.n	8002cce <UART_SetConfig+0x27a>
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d007      	beq.n	8002cdc <UART_SetConfig+0x288>
 8002ccc:	e15f      	b.n	8002f8e <UART_SetConfig+0x53a>
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d100      	bne.n	8002cd4 <UART_SetConfig+0x280>
 8002cd2:	e0b4      	b.n	8002e3e <UART_SetConfig+0x3ea>
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d100      	bne.n	8002cda <UART_SetConfig+0x286>
 8002cd8:	e105      	b.n	8002ee6 <UART_SetConfig+0x492>
 8002cda:	e158      	b.n	8002f8e <UART_SetConfig+0x53a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002cdc:	f7ff fb28 	bl	8002330 <HAL_RCC_GetPCLK1Freq>
 8002ce0:	0002      	movs	r2, r0
 8002ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d044      	beq.n	8002d74 <UART_SetConfig+0x320>
 8002cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d03e      	beq.n	8002d70 <UART_SetConfig+0x31c>
 8002cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d038      	beq.n	8002d6c <UART_SetConfig+0x318>
 8002cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d032      	beq.n	8002d68 <UART_SetConfig+0x314>
 8002d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d02c      	beq.n	8002d64 <UART_SetConfig+0x310>
 8002d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	2b05      	cmp	r3, #5
 8002d10:	d026      	beq.n	8002d60 <UART_SetConfig+0x30c>
 8002d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	2b06      	cmp	r3, #6
 8002d18:	d020      	beq.n	8002d5c <UART_SetConfig+0x308>
 8002d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	2b07      	cmp	r3, #7
 8002d20:	d01a      	beq.n	8002d58 <UART_SetConfig+0x304>
 8002d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d014      	beq.n	8002d54 <UART_SetConfig+0x300>
 8002d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	2b09      	cmp	r3, #9
 8002d30:	d00e      	beq.n	8002d50 <UART_SetConfig+0x2fc>
 8002d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	2b0a      	cmp	r3, #10
 8002d38:	d008      	beq.n	8002d4c <UART_SetConfig+0x2f8>
 8002d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	2b0b      	cmp	r3, #11
 8002d40:	d102      	bne.n	8002d48 <UART_SetConfig+0x2f4>
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	e016      	b.n	8002d76 <UART_SetConfig+0x322>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e014      	b.n	8002d76 <UART_SetConfig+0x322>
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	e012      	b.n	8002d76 <UART_SetConfig+0x322>
 8002d50:	2340      	movs	r3, #64	; 0x40
 8002d52:	e010      	b.n	8002d76 <UART_SetConfig+0x322>
 8002d54:	2320      	movs	r3, #32
 8002d56:	e00e      	b.n	8002d76 <UART_SetConfig+0x322>
 8002d58:	2310      	movs	r3, #16
 8002d5a:	e00c      	b.n	8002d76 <UART_SetConfig+0x322>
 8002d5c:	230c      	movs	r3, #12
 8002d5e:	e00a      	b.n	8002d76 <UART_SetConfig+0x322>
 8002d60:	230a      	movs	r3, #10
 8002d62:	e008      	b.n	8002d76 <UART_SetConfig+0x322>
 8002d64:	2308      	movs	r3, #8
 8002d66:	e006      	b.n	8002d76 <UART_SetConfig+0x322>
 8002d68:	2306      	movs	r3, #6
 8002d6a:	e004      	b.n	8002d76 <UART_SetConfig+0x322>
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	e002      	b.n	8002d76 <UART_SetConfig+0x322>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e000      	b.n	8002d76 <UART_SetConfig+0x322>
 8002d74:	2301      	movs	r3, #1
 8002d76:	0019      	movs	r1, r3
 8002d78:	0010      	movs	r0, r2
 8002d7a:	f7fd f9c3 	bl	8000104 <__udivsi3>
 8002d7e:	0003      	movs	r3, r0
 8002d80:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002d82:	e10b      	b.n	8002f9c <UART_SetConfig+0x548>
 8002d84:	cfff69f3 	.word	0xcfff69f3
 8002d88:	ffffcfff 	.word	0xffffcfff
 8002d8c:	40008000 	.word	0x40008000
 8002d90:	11fff4ff 	.word	0x11fff4ff
 8002d94:	40013800 	.word	0x40013800
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40004400 	.word	0x40004400
 8002da0:	40004800 	.word	0x40004800
 8002da4:	40004c00 	.word	0x40004c00
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d043      	beq.n	8002e38 <UART_SetConfig+0x3e4>
 8002db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d03d      	beq.n	8002e34 <UART_SetConfig+0x3e0>
 8002db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d037      	beq.n	8002e30 <UART_SetConfig+0x3dc>
 8002dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d031      	beq.n	8002e2c <UART_SetConfig+0x3d8>
 8002dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d02b      	beq.n	8002e28 <UART_SetConfig+0x3d4>
 8002dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	2b05      	cmp	r3, #5
 8002dd6:	d025      	beq.n	8002e24 <UART_SetConfig+0x3d0>
 8002dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	2b06      	cmp	r3, #6
 8002dde:	d01f      	beq.n	8002e20 <UART_SetConfig+0x3cc>
 8002de0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	2b07      	cmp	r3, #7
 8002de6:	d019      	beq.n	8002e1c <UART_SetConfig+0x3c8>
 8002de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d013      	beq.n	8002e18 <UART_SetConfig+0x3c4>
 8002df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	2b09      	cmp	r3, #9
 8002df6:	d00d      	beq.n	8002e14 <UART_SetConfig+0x3c0>
 8002df8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	2b0a      	cmp	r3, #10
 8002dfe:	d007      	beq.n	8002e10 <UART_SetConfig+0x3bc>
 8002e00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	2b0b      	cmp	r3, #11
 8002e06:	d101      	bne.n	8002e0c <UART_SetConfig+0x3b8>
 8002e08:	4baa      	ldr	r3, [pc, #680]	; (80030b4 <UART_SetConfig+0x660>)
 8002e0a:	e016      	b.n	8002e3a <UART_SetConfig+0x3e6>
 8002e0c:	4baa      	ldr	r3, [pc, #680]	; (80030b8 <UART_SetConfig+0x664>)
 8002e0e:	e014      	b.n	8002e3a <UART_SetConfig+0x3e6>
 8002e10:	4baa      	ldr	r3, [pc, #680]	; (80030bc <UART_SetConfig+0x668>)
 8002e12:	e012      	b.n	8002e3a <UART_SetConfig+0x3e6>
 8002e14:	4baa      	ldr	r3, [pc, #680]	; (80030c0 <UART_SetConfig+0x66c>)
 8002e16:	e010      	b.n	8002e3a <UART_SetConfig+0x3e6>
 8002e18:	4baa      	ldr	r3, [pc, #680]	; (80030c4 <UART_SetConfig+0x670>)
 8002e1a:	e00e      	b.n	8002e3a <UART_SetConfig+0x3e6>
 8002e1c:	4baa      	ldr	r3, [pc, #680]	; (80030c8 <UART_SetConfig+0x674>)
 8002e1e:	e00c      	b.n	8002e3a <UART_SetConfig+0x3e6>
 8002e20:	4baa      	ldr	r3, [pc, #680]	; (80030cc <UART_SetConfig+0x678>)
 8002e22:	e00a      	b.n	8002e3a <UART_SetConfig+0x3e6>
 8002e24:	4baa      	ldr	r3, [pc, #680]	; (80030d0 <UART_SetConfig+0x67c>)
 8002e26:	e008      	b.n	8002e3a <UART_SetConfig+0x3e6>
 8002e28:	4baa      	ldr	r3, [pc, #680]	; (80030d4 <UART_SetConfig+0x680>)
 8002e2a:	e006      	b.n	8002e3a <UART_SetConfig+0x3e6>
 8002e2c:	4baa      	ldr	r3, [pc, #680]	; (80030d8 <UART_SetConfig+0x684>)
 8002e2e:	e004      	b.n	8002e3a <UART_SetConfig+0x3e6>
 8002e30:	4baa      	ldr	r3, [pc, #680]	; (80030dc <UART_SetConfig+0x688>)
 8002e32:	e002      	b.n	8002e3a <UART_SetConfig+0x3e6>
 8002e34:	4baa      	ldr	r3, [pc, #680]	; (80030e0 <UART_SetConfig+0x68c>)
 8002e36:	e000      	b.n	8002e3a <UART_SetConfig+0x3e6>
 8002e38:	4b9f      	ldr	r3, [pc, #636]	; (80030b8 <UART_SetConfig+0x664>)
 8002e3a:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002e3c:	e0ae      	b.n	8002f9c <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002e3e:	f7ff f9eb 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 8002e42:	0002      	movs	r2, r0
 8002e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d044      	beq.n	8002ed6 <UART_SetConfig+0x482>
 8002e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d03e      	beq.n	8002ed2 <UART_SetConfig+0x47e>
 8002e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d038      	beq.n	8002ece <UART_SetConfig+0x47a>
 8002e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d032      	beq.n	8002eca <UART_SetConfig+0x476>
 8002e64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d02c      	beq.n	8002ec6 <UART_SetConfig+0x472>
 8002e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	2b05      	cmp	r3, #5
 8002e72:	d026      	beq.n	8002ec2 <UART_SetConfig+0x46e>
 8002e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	2b06      	cmp	r3, #6
 8002e7a:	d020      	beq.n	8002ebe <UART_SetConfig+0x46a>
 8002e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	2b07      	cmp	r3, #7
 8002e82:	d01a      	beq.n	8002eba <UART_SetConfig+0x466>
 8002e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d014      	beq.n	8002eb6 <UART_SetConfig+0x462>
 8002e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	2b09      	cmp	r3, #9
 8002e92:	d00e      	beq.n	8002eb2 <UART_SetConfig+0x45e>
 8002e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	2b0a      	cmp	r3, #10
 8002e9a:	d008      	beq.n	8002eae <UART_SetConfig+0x45a>
 8002e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	2b0b      	cmp	r3, #11
 8002ea2:	d102      	bne.n	8002eaa <UART_SetConfig+0x456>
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	e016      	b.n	8002ed8 <UART_SetConfig+0x484>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e014      	b.n	8002ed8 <UART_SetConfig+0x484>
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	e012      	b.n	8002ed8 <UART_SetConfig+0x484>
 8002eb2:	2340      	movs	r3, #64	; 0x40
 8002eb4:	e010      	b.n	8002ed8 <UART_SetConfig+0x484>
 8002eb6:	2320      	movs	r3, #32
 8002eb8:	e00e      	b.n	8002ed8 <UART_SetConfig+0x484>
 8002eba:	2310      	movs	r3, #16
 8002ebc:	e00c      	b.n	8002ed8 <UART_SetConfig+0x484>
 8002ebe:	230c      	movs	r3, #12
 8002ec0:	e00a      	b.n	8002ed8 <UART_SetConfig+0x484>
 8002ec2:	230a      	movs	r3, #10
 8002ec4:	e008      	b.n	8002ed8 <UART_SetConfig+0x484>
 8002ec6:	2308      	movs	r3, #8
 8002ec8:	e006      	b.n	8002ed8 <UART_SetConfig+0x484>
 8002eca:	2306      	movs	r3, #6
 8002ecc:	e004      	b.n	8002ed8 <UART_SetConfig+0x484>
 8002ece:	2304      	movs	r3, #4
 8002ed0:	e002      	b.n	8002ed8 <UART_SetConfig+0x484>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e000      	b.n	8002ed8 <UART_SetConfig+0x484>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	0019      	movs	r1, r3
 8002eda:	0010      	movs	r0, r2
 8002edc:	f7fd f912 	bl	8000104 <__udivsi3>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002ee4:	e05a      	b.n	8002f9c <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d04b      	beq.n	8002f86 <UART_SetConfig+0x532>
 8002eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d044      	beq.n	8002f80 <UART_SetConfig+0x52c>
 8002ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d03d      	beq.n	8002f7a <UART_SetConfig+0x526>
 8002efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d037      	beq.n	8002f76 <UART_SetConfig+0x522>
 8002f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d030      	beq.n	8002f70 <UART_SetConfig+0x51c>
 8002f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2b05      	cmp	r3, #5
 8002f14:	d02a      	beq.n	8002f6c <UART_SetConfig+0x518>
 8002f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	2b06      	cmp	r3, #6
 8002f1c:	d024      	beq.n	8002f68 <UART_SetConfig+0x514>
 8002f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	2b07      	cmp	r3, #7
 8002f24:	d01d      	beq.n	8002f62 <UART_SetConfig+0x50e>
 8002f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d016      	beq.n	8002f5c <UART_SetConfig+0x508>
 8002f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	2b09      	cmp	r3, #9
 8002f34:	d00f      	beq.n	8002f56 <UART_SetConfig+0x502>
 8002f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	2b0a      	cmp	r3, #10
 8002f3c:	d008      	beq.n	8002f50 <UART_SetConfig+0x4fc>
 8002f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	2b0b      	cmp	r3, #11
 8002f44:	d101      	bne.n	8002f4a <UART_SetConfig+0x4f6>
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	e01f      	b.n	8002f8a <UART_SetConfig+0x536>
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	e01c      	b.n	8002f8a <UART_SetConfig+0x536>
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	e019      	b.n	8002f8a <UART_SetConfig+0x536>
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	e016      	b.n	8002f8a <UART_SetConfig+0x536>
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	e013      	b.n	8002f8a <UART_SetConfig+0x536>
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	e010      	b.n	8002f8a <UART_SetConfig+0x536>
 8002f68:	4b5e      	ldr	r3, [pc, #376]	; (80030e4 <UART_SetConfig+0x690>)
 8002f6a:	e00e      	b.n	8002f8a <UART_SetConfig+0x536>
 8002f6c:	4b5e      	ldr	r3, [pc, #376]	; (80030e8 <UART_SetConfig+0x694>)
 8002f6e:	e00c      	b.n	8002f8a <UART_SetConfig+0x536>
 8002f70:	2380      	movs	r3, #128	; 0x80
 8002f72:	015b      	lsls	r3, r3, #5
 8002f74:	e009      	b.n	8002f8a <UART_SetConfig+0x536>
 8002f76:	4b5d      	ldr	r3, [pc, #372]	; (80030ec <UART_SetConfig+0x698>)
 8002f78:	e007      	b.n	8002f8a <UART_SetConfig+0x536>
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	019b      	lsls	r3, r3, #6
 8002f7e:	e004      	b.n	8002f8a <UART_SetConfig+0x536>
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	01db      	lsls	r3, r3, #7
 8002f84:	e001      	b.n	8002f8a <UART_SetConfig+0x536>
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002f8c:	e006      	b.n	8002f9c <UART_SetConfig+0x548>
      default:
        ret = HAL_ERROR;
 8002f8e:	2313      	movs	r3, #19
 8002f90:	2258      	movs	r2, #88	; 0x58
 8002f92:	18ba      	adds	r2, r7, r2
 8002f94:	18d2      	adds	r2, r2, r3
 8002f96:	2301      	movs	r3, #1
 8002f98:	7013      	strb	r3, [r2, #0]
        break;
 8002f9a:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <UART_SetConfig+0x552>
 8002fa2:	f000 fe09 	bl	8003bb8 <UART_SetConfig+0x1164>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	0013      	movs	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	189a      	adds	r2, r3, r2
 8002fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d305      	bcc.n	8002fc2 <UART_SetConfig+0x56e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002fbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d908      	bls.n	8002fd4 <UART_SetConfig+0x580>
      {
        ret = HAL_ERROR;
 8002fc2:	2313      	movs	r3, #19
 8002fc4:	2258      	movs	r2, #88	; 0x58
 8002fc6:	4694      	mov	ip, r2
 8002fc8:	44bc      	add	ip, r7
 8002fca:	4463      	add	r3, ip
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
 8002fd0:	f000 fdf2 	bl	8003bb8 <UART_SetConfig+0x1164>
      }
      else
      {
        switch (clocksource)
 8002fd4:	231b      	movs	r3, #27
 8002fd6:	2258      	movs	r2, #88	; 0x58
 8002fd8:	4694      	mov	ip, r2
 8002fda:	44bc      	add	ip, r7
 8002fdc:	4463      	add	r3, ip
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d100      	bne.n	8002fe6 <UART_SetConfig+0x592>
 8002fe4:	e0a9      	b.n	800313a <UART_SetConfig+0x6e6>
 8002fe6:	dc02      	bgt.n	8002fee <UART_SetConfig+0x59a>
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <UART_SetConfig+0x5a8>
 8002fec:	e20f      	b.n	800340e <UART_SetConfig+0x9ba>
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d100      	bne.n	8002ff4 <UART_SetConfig+0x5a0>
 8002ff2:	e10f      	b.n	8003214 <UART_SetConfig+0x7c0>
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d100      	bne.n	8002ffa <UART_SetConfig+0x5a6>
 8002ff8:	e192      	b.n	8003320 <UART_SetConfig+0x8cc>
 8002ffa:	e208      	b.n	800340e <UART_SetConfig+0x9ba>
        {
          case UART_CLOCKSOURCE_PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ffc:	f7ff f998 	bl	8002330 <HAL_RCC_GetPCLK1Freq>
 8003000:	0003      	movs	r3, r0
 8003002:	64bb      	str	r3, [r7, #72]	; 0x48
 8003004:	2300      	movs	r3, #0
 8003006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	2b00      	cmp	r3, #0
 800300e:	d100      	bne.n	8003012 <UART_SetConfig+0x5be>
 8003010:	e06e      	b.n	80030f0 <UART_SetConfig+0x69c>
 8003012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	2b01      	cmp	r3, #1
 8003018:	d049      	beq.n	80030ae <UART_SetConfig+0x65a>
 800301a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	2b02      	cmp	r3, #2
 8003020:	d042      	beq.n	80030a8 <UART_SetConfig+0x654>
 8003022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	2b03      	cmp	r3, #3
 8003028:	d03b      	beq.n	80030a2 <UART_SetConfig+0x64e>
 800302a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	2b04      	cmp	r3, #4
 8003030:	d034      	beq.n	800309c <UART_SetConfig+0x648>
 8003032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	2b05      	cmp	r3, #5
 8003038:	d02d      	beq.n	8003096 <UART_SetConfig+0x642>
 800303a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	2b06      	cmp	r3, #6
 8003040:	d026      	beq.n	8003090 <UART_SetConfig+0x63c>
 8003042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	2b07      	cmp	r3, #7
 8003048:	d01f      	beq.n	800308a <UART_SetConfig+0x636>
 800304a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	2b08      	cmp	r3, #8
 8003050:	d018      	beq.n	8003084 <UART_SetConfig+0x630>
 8003052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	2b09      	cmp	r3, #9
 8003058:	d011      	beq.n	800307e <UART_SetConfig+0x62a>
 800305a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	2b0a      	cmp	r3, #10
 8003060:	d00a      	beq.n	8003078 <UART_SetConfig+0x624>
 8003062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	2b0b      	cmp	r3, #11
 8003068:	d103      	bne.n	8003072 <UART_SetConfig+0x61e>
 800306a:	2380      	movs	r3, #128	; 0x80
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	2400      	movs	r4, #0
 8003070:	e040      	b.n	80030f4 <UART_SetConfig+0x6a0>
 8003072:	2301      	movs	r3, #1
 8003074:	2400      	movs	r4, #0
 8003076:	e03d      	b.n	80030f4 <UART_SetConfig+0x6a0>
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	2400      	movs	r4, #0
 800307c:	e03a      	b.n	80030f4 <UART_SetConfig+0x6a0>
 800307e:	2340      	movs	r3, #64	; 0x40
 8003080:	2400      	movs	r4, #0
 8003082:	e037      	b.n	80030f4 <UART_SetConfig+0x6a0>
 8003084:	2320      	movs	r3, #32
 8003086:	2400      	movs	r4, #0
 8003088:	e034      	b.n	80030f4 <UART_SetConfig+0x6a0>
 800308a:	2310      	movs	r3, #16
 800308c:	2400      	movs	r4, #0
 800308e:	e031      	b.n	80030f4 <UART_SetConfig+0x6a0>
 8003090:	230c      	movs	r3, #12
 8003092:	2400      	movs	r4, #0
 8003094:	e02e      	b.n	80030f4 <UART_SetConfig+0x6a0>
 8003096:	230a      	movs	r3, #10
 8003098:	2400      	movs	r4, #0
 800309a:	e02b      	b.n	80030f4 <UART_SetConfig+0x6a0>
 800309c:	2308      	movs	r3, #8
 800309e:	2400      	movs	r4, #0
 80030a0:	e028      	b.n	80030f4 <UART_SetConfig+0x6a0>
 80030a2:	2306      	movs	r3, #6
 80030a4:	2400      	movs	r4, #0
 80030a6:	e025      	b.n	80030f4 <UART_SetConfig+0x6a0>
 80030a8:	2304      	movs	r3, #4
 80030aa:	2400      	movs	r4, #0
 80030ac:	e022      	b.n	80030f4 <UART_SetConfig+0x6a0>
 80030ae:	2302      	movs	r3, #2
 80030b0:	2400      	movs	r4, #0
 80030b2:	e01f      	b.n	80030f4 <UART_SetConfig+0x6a0>
 80030b4:	0000f424 	.word	0x0000f424
 80030b8:	00f42400 	.word	0x00f42400
 80030bc:	0001e848 	.word	0x0001e848
 80030c0:	0003d090 	.word	0x0003d090
 80030c4:	0007a120 	.word	0x0007a120
 80030c8:	000f4240 	.word	0x000f4240
 80030cc:	00145855 	.word	0x00145855
 80030d0:	00186a00 	.word	0x00186a00
 80030d4:	001e8480 	.word	0x001e8480
 80030d8:	0028b0aa 	.word	0x0028b0aa
 80030dc:	003d0900 	.word	0x003d0900
 80030e0:	007a1200 	.word	0x007a1200
 80030e4:	00000aaa 	.word	0x00000aaa
 80030e8:	00000ccc 	.word	0x00000ccc
 80030ec:	00001555 	.word	0x00001555
 80030f0:	2301      	movs	r3, #1
 80030f2:	2400      	movs	r4, #0
 80030f4:	001a      	movs	r2, r3
 80030f6:	0023      	movs	r3, r4
 80030f8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80030fa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80030fc:	f7fd f978 	bl	80003f0 <__aeabi_uldivmod>
 8003100:	0003      	movs	r3, r0
 8003102:	000c      	movs	r4, r1
 8003104:	0e1a      	lsrs	r2, r3, #24
 8003106:	0226      	lsls	r6, r4, #8
 8003108:	4316      	orrs	r6, r2
 800310a:	021d      	lsls	r5, r3, #8
 800310c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	085b      	lsrs	r3, r3, #1
 8003112:	643b      	str	r3, [r7, #64]	; 0x40
 8003114:	2300      	movs	r3, #0
 8003116:	647b      	str	r3, [r7, #68]	; 0x44
 8003118:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800311a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800311c:	1940      	adds	r0, r0, r5
 800311e:	4171      	adcs	r1, r6
 8003120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	63bb      	str	r3, [r7, #56]	; 0x38
 8003126:	2300      	movs	r3, #0
 8003128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800312a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800312c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800312e:	f7fd f95f 	bl	80003f0 <__aeabi_uldivmod>
 8003132:	0003      	movs	r3, r0
 8003134:	000c      	movs	r4, r1
 8003136:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8003138:	e171      	b.n	800341e <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800313a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	2b00      	cmp	r3, #0
 8003140:	d04f      	beq.n	80031e2 <UART_SetConfig+0x78e>
 8003142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	2b01      	cmp	r3, #1
 8003148:	d048      	beq.n	80031dc <UART_SetConfig+0x788>
 800314a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	2b02      	cmp	r3, #2
 8003150:	d041      	beq.n	80031d6 <UART_SetConfig+0x782>
 8003152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	2b03      	cmp	r3, #3
 8003158:	d03a      	beq.n	80031d0 <UART_SetConfig+0x77c>
 800315a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	2b04      	cmp	r3, #4
 8003160:	d033      	beq.n	80031ca <UART_SetConfig+0x776>
 8003162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	2b05      	cmp	r3, #5
 8003168:	d02c      	beq.n	80031c4 <UART_SetConfig+0x770>
 800316a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	2b06      	cmp	r3, #6
 8003170:	d025      	beq.n	80031be <UART_SetConfig+0x76a>
 8003172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	2b07      	cmp	r3, #7
 8003178:	d01e      	beq.n	80031b8 <UART_SetConfig+0x764>
 800317a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	2b08      	cmp	r3, #8
 8003180:	d017      	beq.n	80031b2 <UART_SetConfig+0x75e>
 8003182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	2b09      	cmp	r3, #9
 8003188:	d010      	beq.n	80031ac <UART_SetConfig+0x758>
 800318a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	2b0a      	cmp	r3, #10
 8003190:	d009      	beq.n	80031a6 <UART_SetConfig+0x752>
 8003192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	2b0b      	cmp	r3, #11
 8003198:	d102      	bne.n	80031a0 <UART_SetConfig+0x74c>
 800319a:	4bba      	ldr	r3, [pc, #744]	; (8003484 <UART_SetConfig+0xa30>)
 800319c:	2400      	movs	r4, #0
 800319e:	e022      	b.n	80031e6 <UART_SetConfig+0x792>
 80031a0:	4bb9      	ldr	r3, [pc, #740]	; (8003488 <UART_SetConfig+0xa34>)
 80031a2:	2400      	movs	r4, #0
 80031a4:	e01f      	b.n	80031e6 <UART_SetConfig+0x792>
 80031a6:	4bb9      	ldr	r3, [pc, #740]	; (800348c <UART_SetConfig+0xa38>)
 80031a8:	2400      	movs	r4, #0
 80031aa:	e01c      	b.n	80031e6 <UART_SetConfig+0x792>
 80031ac:	4bb8      	ldr	r3, [pc, #736]	; (8003490 <UART_SetConfig+0xa3c>)
 80031ae:	2400      	movs	r4, #0
 80031b0:	e019      	b.n	80031e6 <UART_SetConfig+0x792>
 80031b2:	4bb8      	ldr	r3, [pc, #736]	; (8003494 <UART_SetConfig+0xa40>)
 80031b4:	2400      	movs	r4, #0
 80031b6:	e016      	b.n	80031e6 <UART_SetConfig+0x792>
 80031b8:	4bb7      	ldr	r3, [pc, #732]	; (8003498 <UART_SetConfig+0xa44>)
 80031ba:	2400      	movs	r4, #0
 80031bc:	e013      	b.n	80031e6 <UART_SetConfig+0x792>
 80031be:	4bb7      	ldr	r3, [pc, #732]	; (800349c <UART_SetConfig+0xa48>)
 80031c0:	2400      	movs	r4, #0
 80031c2:	e010      	b.n	80031e6 <UART_SetConfig+0x792>
 80031c4:	4bb6      	ldr	r3, [pc, #728]	; (80034a0 <UART_SetConfig+0xa4c>)
 80031c6:	2400      	movs	r4, #0
 80031c8:	e00d      	b.n	80031e6 <UART_SetConfig+0x792>
 80031ca:	4bb6      	ldr	r3, [pc, #728]	; (80034a4 <UART_SetConfig+0xa50>)
 80031cc:	2400      	movs	r4, #0
 80031ce:	e00a      	b.n	80031e6 <UART_SetConfig+0x792>
 80031d0:	4bb5      	ldr	r3, [pc, #724]	; (80034a8 <UART_SetConfig+0xa54>)
 80031d2:	2400      	movs	r4, #0
 80031d4:	e007      	b.n	80031e6 <UART_SetConfig+0x792>
 80031d6:	4bb5      	ldr	r3, [pc, #724]	; (80034ac <UART_SetConfig+0xa58>)
 80031d8:	2400      	movs	r4, #0
 80031da:	e004      	b.n	80031e6 <UART_SetConfig+0x792>
 80031dc:	4bb4      	ldr	r3, [pc, #720]	; (80034b0 <UART_SetConfig+0xa5c>)
 80031de:	2400      	movs	r4, #0
 80031e0:	e001      	b.n	80031e6 <UART_SetConfig+0x792>
 80031e2:	4ba9      	ldr	r3, [pc, #676]	; (8003488 <UART_SetConfig+0xa34>)
 80031e4:	2400      	movs	r4, #0
 80031e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031e8:	6852      	ldr	r2, [r2, #4]
 80031ea:	0852      	lsrs	r2, r2, #1
 80031ec:	633a      	str	r2, [r7, #48]	; 0x30
 80031ee:	2200      	movs	r2, #0
 80031f0:	637a      	str	r2, [r7, #52]	; 0x34
 80031f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80031f6:	18c0      	adds	r0, r0, r3
 80031f8:	4161      	adcs	r1, r4
 80031fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003208:	f7fd f8f2 	bl	80003f0 <__aeabi_uldivmod>
 800320c:	0003      	movs	r3, r0
 800320e:	000c      	movs	r4, r1
 8003210:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8003212:	e104      	b.n	800341e <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_SYSCLK:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003214:	f7ff f800 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 8003218:	0003      	movs	r3, r0
 800321a:	623b      	str	r3, [r7, #32]
 800321c:	2300      	movs	r3, #0
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
 8003220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	2b00      	cmp	r3, #0
 8003226:	d050      	beq.n	80032ca <UART_SetConfig+0x876>
 8003228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	2b01      	cmp	r3, #1
 800322e:	d049      	beq.n	80032c4 <UART_SetConfig+0x870>
 8003230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	2b02      	cmp	r3, #2
 8003236:	d042      	beq.n	80032be <UART_SetConfig+0x86a>
 8003238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	2b03      	cmp	r3, #3
 800323e:	d03b      	beq.n	80032b8 <UART_SetConfig+0x864>
 8003240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	2b04      	cmp	r3, #4
 8003246:	d034      	beq.n	80032b2 <UART_SetConfig+0x85e>
 8003248:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	2b05      	cmp	r3, #5
 800324e:	d02d      	beq.n	80032ac <UART_SetConfig+0x858>
 8003250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	2b06      	cmp	r3, #6
 8003256:	d026      	beq.n	80032a6 <UART_SetConfig+0x852>
 8003258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	2b07      	cmp	r3, #7
 800325e:	d01f      	beq.n	80032a0 <UART_SetConfig+0x84c>
 8003260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	2b08      	cmp	r3, #8
 8003266:	d018      	beq.n	800329a <UART_SetConfig+0x846>
 8003268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	2b09      	cmp	r3, #9
 800326e:	d011      	beq.n	8003294 <UART_SetConfig+0x840>
 8003270:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	2b0a      	cmp	r3, #10
 8003276:	d00a      	beq.n	800328e <UART_SetConfig+0x83a>
 8003278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	2b0b      	cmp	r3, #11
 800327e:	d103      	bne.n	8003288 <UART_SetConfig+0x834>
 8003280:	2380      	movs	r3, #128	; 0x80
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	2400      	movs	r4, #0
 8003286:	e022      	b.n	80032ce <UART_SetConfig+0x87a>
 8003288:	2301      	movs	r3, #1
 800328a:	2400      	movs	r4, #0
 800328c:	e01f      	b.n	80032ce <UART_SetConfig+0x87a>
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	2400      	movs	r4, #0
 8003292:	e01c      	b.n	80032ce <UART_SetConfig+0x87a>
 8003294:	2340      	movs	r3, #64	; 0x40
 8003296:	2400      	movs	r4, #0
 8003298:	e019      	b.n	80032ce <UART_SetConfig+0x87a>
 800329a:	2320      	movs	r3, #32
 800329c:	2400      	movs	r4, #0
 800329e:	e016      	b.n	80032ce <UART_SetConfig+0x87a>
 80032a0:	2310      	movs	r3, #16
 80032a2:	2400      	movs	r4, #0
 80032a4:	e013      	b.n	80032ce <UART_SetConfig+0x87a>
 80032a6:	230c      	movs	r3, #12
 80032a8:	2400      	movs	r4, #0
 80032aa:	e010      	b.n	80032ce <UART_SetConfig+0x87a>
 80032ac:	230a      	movs	r3, #10
 80032ae:	2400      	movs	r4, #0
 80032b0:	e00d      	b.n	80032ce <UART_SetConfig+0x87a>
 80032b2:	2308      	movs	r3, #8
 80032b4:	2400      	movs	r4, #0
 80032b6:	e00a      	b.n	80032ce <UART_SetConfig+0x87a>
 80032b8:	2306      	movs	r3, #6
 80032ba:	2400      	movs	r4, #0
 80032bc:	e007      	b.n	80032ce <UART_SetConfig+0x87a>
 80032be:	2304      	movs	r3, #4
 80032c0:	2400      	movs	r4, #0
 80032c2:	e004      	b.n	80032ce <UART_SetConfig+0x87a>
 80032c4:	2302      	movs	r3, #2
 80032c6:	2400      	movs	r4, #0
 80032c8:	e001      	b.n	80032ce <UART_SetConfig+0x87a>
 80032ca:	2301      	movs	r3, #1
 80032cc:	2400      	movs	r4, #0
 80032ce:	001a      	movs	r2, r3
 80032d0:	0023      	movs	r3, r4
 80032d2:	6a38      	ldr	r0, [r7, #32]
 80032d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032d6:	f7fd f88b 	bl	80003f0 <__aeabi_uldivmod>
 80032da:	0003      	movs	r3, r0
 80032dc:	000c      	movs	r4, r1
 80032de:	0e1a      	lsrs	r2, r3, #24
 80032e0:	0221      	lsls	r1, r4, #8
 80032e2:	6579      	str	r1, [r7, #84]	; 0x54
 80032e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032e6:	4311      	orrs	r1, r2
 80032e8:	6579      	str	r1, [r7, #84]	; 0x54
 80032ea:	021b      	lsls	r3, r3, #8
 80032ec:	653b      	str	r3, [r7, #80]	; 0x50
 80032ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	085b      	lsrs	r3, r3, #1
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80032fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	69fc      	ldr	r4, [r7, #28]
 8003302:	18c0      	adds	r0, r0, r3
 8003304:	4161      	adcs	r1, r4
 8003306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f7fd f86c 	bl	80003f0 <__aeabi_uldivmod>
 8003318:	0003      	movs	r3, r0
 800331a:	000c      	movs	r4, r1
 800331c:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 800331e:	e07e      	b.n	800341e <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003320:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	2b00      	cmp	r3, #0
 8003326:	d058      	beq.n	80033da <UART_SetConfig+0x986>
 8003328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	2b01      	cmp	r3, #1
 800332e:	d050      	beq.n	80033d2 <UART_SetConfig+0x97e>
 8003330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	2b02      	cmp	r3, #2
 8003336:	d048      	beq.n	80033ca <UART_SetConfig+0x976>
 8003338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	2b03      	cmp	r3, #3
 800333e:	d041      	beq.n	80033c4 <UART_SetConfig+0x970>
 8003340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	2b04      	cmp	r3, #4
 8003346:	d039      	beq.n	80033bc <UART_SetConfig+0x968>
 8003348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	2b05      	cmp	r3, #5
 800334e:	d032      	beq.n	80033b6 <UART_SetConfig+0x962>
 8003350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	2b06      	cmp	r3, #6
 8003356:	d02b      	beq.n	80033b0 <UART_SetConfig+0x95c>
 8003358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	2b07      	cmp	r3, #7
 800335e:	d023      	beq.n	80033a8 <UART_SetConfig+0x954>
 8003360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	2b08      	cmp	r3, #8
 8003366:	d01b      	beq.n	80033a0 <UART_SetConfig+0x94c>
 8003368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	2b09      	cmp	r3, #9
 800336e:	d013      	beq.n	8003398 <UART_SetConfig+0x944>
 8003370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	2b0a      	cmp	r3, #10
 8003376:	d00b      	beq.n	8003390 <UART_SetConfig+0x93c>
 8003378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	2b0b      	cmp	r3, #11
 800337e:	d103      	bne.n	8003388 <UART_SetConfig+0x934>
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	2400      	movs	r4, #0
 8003386:	e02b      	b.n	80033e0 <UART_SetConfig+0x98c>
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	2400      	movs	r4, #0
 800338e:	e027      	b.n	80033e0 <UART_SetConfig+0x98c>
 8003390:	2380      	movs	r3, #128	; 0x80
 8003392:	025b      	lsls	r3, r3, #9
 8003394:	2400      	movs	r4, #0
 8003396:	e023      	b.n	80033e0 <UART_SetConfig+0x98c>
 8003398:	2380      	movs	r3, #128	; 0x80
 800339a:	029b      	lsls	r3, r3, #10
 800339c:	2400      	movs	r4, #0
 800339e:	e01f      	b.n	80033e0 <UART_SetConfig+0x98c>
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	02db      	lsls	r3, r3, #11
 80033a4:	2400      	movs	r4, #0
 80033a6:	e01b      	b.n	80033e0 <UART_SetConfig+0x98c>
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	031b      	lsls	r3, r3, #12
 80033ac:	2400      	movs	r4, #0
 80033ae:	e017      	b.n	80033e0 <UART_SetConfig+0x98c>
 80033b0:	4b40      	ldr	r3, [pc, #256]	; (80034b4 <UART_SetConfig+0xa60>)
 80033b2:	2400      	movs	r4, #0
 80033b4:	e014      	b.n	80033e0 <UART_SetConfig+0x98c>
 80033b6:	4b40      	ldr	r3, [pc, #256]	; (80034b8 <UART_SetConfig+0xa64>)
 80033b8:	2400      	movs	r4, #0
 80033ba:	e011      	b.n	80033e0 <UART_SetConfig+0x98c>
 80033bc:	2380      	movs	r3, #128	; 0x80
 80033be:	035b      	lsls	r3, r3, #13
 80033c0:	2400      	movs	r4, #0
 80033c2:	e00d      	b.n	80033e0 <UART_SetConfig+0x98c>
 80033c4:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <UART_SetConfig+0xa68>)
 80033c6:	2400      	movs	r4, #0
 80033c8:	e00a      	b.n	80033e0 <UART_SetConfig+0x98c>
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	039b      	lsls	r3, r3, #14
 80033ce:	2400      	movs	r4, #0
 80033d0:	e006      	b.n	80033e0 <UART_SetConfig+0x98c>
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	03db      	lsls	r3, r3, #15
 80033d6:	2400      	movs	r4, #0
 80033d8:	e002      	b.n	80033e0 <UART_SetConfig+0x98c>
 80033da:	2380      	movs	r3, #128	; 0x80
 80033dc:	041b      	lsls	r3, r3, #16
 80033de:	2400      	movs	r4, #0
 80033e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033e2:	6852      	ldr	r2, [r2, #4]
 80033e4:	0852      	lsrs	r2, r2, #1
 80033e6:	60ba      	str	r2, [r7, #8]
 80033e8:	2200      	movs	r2, #0
 80033ea:	60fa      	str	r2, [r7, #12]
 80033ec:	68b8      	ldr	r0, [r7, #8]
 80033ee:	68f9      	ldr	r1, [r7, #12]
 80033f0:	18c0      	adds	r0, r0, r3
 80033f2:	4161      	adcs	r1, r4
 80033f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	2300      	movs	r3, #0
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f7fc fff5 	bl	80003f0 <__aeabi_uldivmod>
 8003406:	0003      	movs	r3, r0
 8003408:	000c      	movs	r4, r1
 800340a:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 800340c:	e007      	b.n	800341e <UART_SetConfig+0x9ca>
          default:
            ret = HAL_ERROR;
 800340e:	2313      	movs	r3, #19
 8003410:	2258      	movs	r2, #88	; 0x58
 8003412:	4694      	mov	ip, r2
 8003414:	44bc      	add	ip, r7
 8003416:	4463      	add	r3, ip
 8003418:	2201      	movs	r2, #1
 800341a:	701a      	strb	r2, [r3, #0]
            break;
 800341c:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800341e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003420:	4a27      	ldr	r2, [pc, #156]	; (80034c0 <UART_SetConfig+0xa6c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d909      	bls.n	800343a <UART_SetConfig+0x9e6>
 8003426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003428:	4a26      	ldr	r2, [pc, #152]	; (80034c4 <UART_SetConfig+0xa70>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d805      	bhi.n	800343a <UART_SetConfig+0x9e6>
        {
          huart->Instance->BRR = usartdiv;
 800342e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	f000 fbbf 	bl	8003bb8 <UART_SetConfig+0x1164>
        }
        else
        {
          ret = HAL_ERROR;
 800343a:	2313      	movs	r3, #19
 800343c:	2258      	movs	r2, #88	; 0x58
 800343e:	4694      	mov	ip, r2
 8003440:	44bc      	add	ip, r7
 8003442:	4463      	add	r3, ip
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
 8003448:	f000 fbb6 	bl	8003bb8 <UART_SetConfig+0x1164>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800344c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800344e:	69da      	ldr	r2, [r3, #28]
 8003450:	2380      	movs	r3, #128	; 0x80
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	429a      	cmp	r2, r3
 8003456:	d000      	beq.n	800345a <UART_SetConfig+0xa06>
 8003458:	e1e4      	b.n	8003824 <UART_SetConfig+0xdd0>
  {
    switch (clocksource)
 800345a:	231b      	movs	r3, #27
 800345c:	2258      	movs	r2, #88	; 0x58
 800345e:	4694      	mov	ip, r2
 8003460:	44bc      	add	ip, r7
 8003462:	4463      	add	r3, ip
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d100      	bne.n	800346c <UART_SetConfig+0xa18>
 800346a:	e08e      	b.n	800358a <UART_SetConfig+0xb36>
 800346c:	dc02      	bgt.n	8003474 <UART_SetConfig+0xa20>
 800346e:	2b00      	cmp	r3, #0
 8003470:	d02a      	beq.n	80034c8 <UART_SetConfig+0xa74>
 8003472:	e1a3      	b.n	80037bc <UART_SetConfig+0xd68>
 8003474:	2b04      	cmp	r3, #4
 8003476:	d100      	bne.n	800347a <UART_SetConfig+0xa26>
 8003478:	e0de      	b.n	8003638 <UART_SetConfig+0xbe4>
 800347a:	2b08      	cmp	r3, #8
 800347c:	d100      	bne.n	8003480 <UART_SetConfig+0xa2c>
 800347e:	e13c      	b.n	80036fa <UART_SetConfig+0xca6>
 8003480:	e19c      	b.n	80037bc <UART_SetConfig+0xd68>
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	00f42400 	.word	0x00f42400
 8003488:	f4240000 	.word	0xf4240000
 800348c:	01e84800 	.word	0x01e84800
 8003490:	03d09000 	.word	0x03d09000
 8003494:	07a12000 	.word	0x07a12000
 8003498:	0f424000 	.word	0x0f424000
 800349c:	14585500 	.word	0x14585500
 80034a0:	186a0000 	.word	0x186a0000
 80034a4:	1e848000 	.word	0x1e848000
 80034a8:	28b0aa00 	.word	0x28b0aa00
 80034ac:	3d090000 	.word	0x3d090000
 80034b0:	7a120000 	.word	0x7a120000
 80034b4:	000aaa00 	.word	0x000aaa00
 80034b8:	000ccc00 	.word	0x000ccc00
 80034bc:	00155500 	.word	0x00155500
 80034c0:	000002ff 	.word	0x000002ff
 80034c4:	000fffff 	.word	0x000fffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034c8:	f7fe ff32 	bl	8002330 <HAL_RCC_GetPCLK1Freq>
 80034cc:	0002      	movs	r2, r0
 80034ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d044      	beq.n	8003560 <UART_SetConfig+0xb0c>
 80034d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d03e      	beq.n	800355c <UART_SetConfig+0xb08>
 80034de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d038      	beq.n	8003558 <UART_SetConfig+0xb04>
 80034e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d032      	beq.n	8003554 <UART_SetConfig+0xb00>
 80034ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d02c      	beq.n	8003550 <UART_SetConfig+0xafc>
 80034f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	2b05      	cmp	r3, #5
 80034fc:	d026      	beq.n	800354c <UART_SetConfig+0xaf8>
 80034fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	2b06      	cmp	r3, #6
 8003504:	d020      	beq.n	8003548 <UART_SetConfig+0xaf4>
 8003506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	2b07      	cmp	r3, #7
 800350c:	d01a      	beq.n	8003544 <UART_SetConfig+0xaf0>
 800350e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	2b08      	cmp	r3, #8
 8003514:	d014      	beq.n	8003540 <UART_SetConfig+0xaec>
 8003516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	2b09      	cmp	r3, #9
 800351c:	d00e      	beq.n	800353c <UART_SetConfig+0xae8>
 800351e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	2b0a      	cmp	r3, #10
 8003524:	d008      	beq.n	8003538 <UART_SetConfig+0xae4>
 8003526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	2b0b      	cmp	r3, #11
 800352c:	d102      	bne.n	8003534 <UART_SetConfig+0xae0>
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	e016      	b.n	8003562 <UART_SetConfig+0xb0e>
 8003534:	2301      	movs	r3, #1
 8003536:	e014      	b.n	8003562 <UART_SetConfig+0xb0e>
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	e012      	b.n	8003562 <UART_SetConfig+0xb0e>
 800353c:	2340      	movs	r3, #64	; 0x40
 800353e:	e010      	b.n	8003562 <UART_SetConfig+0xb0e>
 8003540:	2320      	movs	r3, #32
 8003542:	e00e      	b.n	8003562 <UART_SetConfig+0xb0e>
 8003544:	2310      	movs	r3, #16
 8003546:	e00c      	b.n	8003562 <UART_SetConfig+0xb0e>
 8003548:	230c      	movs	r3, #12
 800354a:	e00a      	b.n	8003562 <UART_SetConfig+0xb0e>
 800354c:	230a      	movs	r3, #10
 800354e:	e008      	b.n	8003562 <UART_SetConfig+0xb0e>
 8003550:	2308      	movs	r3, #8
 8003552:	e006      	b.n	8003562 <UART_SetConfig+0xb0e>
 8003554:	2306      	movs	r3, #6
 8003556:	e004      	b.n	8003562 <UART_SetConfig+0xb0e>
 8003558:	2304      	movs	r3, #4
 800355a:	e002      	b.n	8003562 <UART_SetConfig+0xb0e>
 800355c:	2302      	movs	r3, #2
 800355e:	e000      	b.n	8003562 <UART_SetConfig+0xb0e>
 8003560:	2301      	movs	r3, #1
 8003562:	0019      	movs	r1, r3
 8003564:	0010      	movs	r0, r2
 8003566:	f7fc fdcd 	bl	8000104 <__udivsi3>
 800356a:	0003      	movs	r3, r0
 800356c:	005a      	lsls	r2, r3, #1
 800356e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	18d2      	adds	r2, r2, r3
 8003576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	0019      	movs	r1, r3
 800357c:	0010      	movs	r0, r2
 800357e:	f7fc fdc1 	bl	8000104 <__udivsi3>
 8003582:	0003      	movs	r3, r0
 8003584:	b29b      	uxth	r3, r3
 8003586:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003588:	e120      	b.n	80037cc <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800358a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	2b00      	cmp	r3, #0
 8003590:	d043      	beq.n	800361a <UART_SetConfig+0xbc6>
 8003592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	2b01      	cmp	r3, #1
 8003598:	d03d      	beq.n	8003616 <UART_SetConfig+0xbc2>
 800359a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d037      	beq.n	8003612 <UART_SetConfig+0xbbe>
 80035a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d031      	beq.n	800360e <UART_SetConfig+0xbba>
 80035aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d02b      	beq.n	800360a <UART_SetConfig+0xbb6>
 80035b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	2b05      	cmp	r3, #5
 80035b8:	d025      	beq.n	8003606 <UART_SetConfig+0xbb2>
 80035ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	2b06      	cmp	r3, #6
 80035c0:	d01f      	beq.n	8003602 <UART_SetConfig+0xbae>
 80035c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	2b07      	cmp	r3, #7
 80035c8:	d019      	beq.n	80035fe <UART_SetConfig+0xbaa>
 80035ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d013      	beq.n	80035fa <UART_SetConfig+0xba6>
 80035d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	2b09      	cmp	r3, #9
 80035d8:	d00d      	beq.n	80035f6 <UART_SetConfig+0xba2>
 80035da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	2b0a      	cmp	r3, #10
 80035e0:	d007      	beq.n	80035f2 <UART_SetConfig+0xb9e>
 80035e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	2b0b      	cmp	r3, #11
 80035e8:	d101      	bne.n	80035ee <UART_SetConfig+0xb9a>
 80035ea:	4bba      	ldr	r3, [pc, #744]	; (80038d4 <UART_SetConfig+0xe80>)
 80035ec:	e016      	b.n	800361c <UART_SetConfig+0xbc8>
 80035ee:	4bba      	ldr	r3, [pc, #744]	; (80038d8 <UART_SetConfig+0xe84>)
 80035f0:	e014      	b.n	800361c <UART_SetConfig+0xbc8>
 80035f2:	4bba      	ldr	r3, [pc, #744]	; (80038dc <UART_SetConfig+0xe88>)
 80035f4:	e012      	b.n	800361c <UART_SetConfig+0xbc8>
 80035f6:	4bba      	ldr	r3, [pc, #744]	; (80038e0 <UART_SetConfig+0xe8c>)
 80035f8:	e010      	b.n	800361c <UART_SetConfig+0xbc8>
 80035fa:	4bba      	ldr	r3, [pc, #744]	; (80038e4 <UART_SetConfig+0xe90>)
 80035fc:	e00e      	b.n	800361c <UART_SetConfig+0xbc8>
 80035fe:	4bba      	ldr	r3, [pc, #744]	; (80038e8 <UART_SetConfig+0xe94>)
 8003600:	e00c      	b.n	800361c <UART_SetConfig+0xbc8>
 8003602:	4bba      	ldr	r3, [pc, #744]	; (80038ec <UART_SetConfig+0xe98>)
 8003604:	e00a      	b.n	800361c <UART_SetConfig+0xbc8>
 8003606:	4bba      	ldr	r3, [pc, #744]	; (80038f0 <UART_SetConfig+0xe9c>)
 8003608:	e008      	b.n	800361c <UART_SetConfig+0xbc8>
 800360a:	4bba      	ldr	r3, [pc, #744]	; (80038f4 <UART_SetConfig+0xea0>)
 800360c:	e006      	b.n	800361c <UART_SetConfig+0xbc8>
 800360e:	4bba      	ldr	r3, [pc, #744]	; (80038f8 <UART_SetConfig+0xea4>)
 8003610:	e004      	b.n	800361c <UART_SetConfig+0xbc8>
 8003612:	4bba      	ldr	r3, [pc, #744]	; (80038fc <UART_SetConfig+0xea8>)
 8003614:	e002      	b.n	800361c <UART_SetConfig+0xbc8>
 8003616:	4bba      	ldr	r3, [pc, #744]	; (8003900 <UART_SetConfig+0xeac>)
 8003618:	e000      	b.n	800361c <UART_SetConfig+0xbc8>
 800361a:	4baf      	ldr	r3, [pc, #700]	; (80038d8 <UART_SetConfig+0xe84>)
 800361c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800361e:	6852      	ldr	r2, [r2, #4]
 8003620:	0852      	lsrs	r2, r2, #1
 8003622:	189a      	adds	r2, r3, r2
 8003624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	0019      	movs	r1, r3
 800362a:	0010      	movs	r0, r2
 800362c:	f7fc fd6a 	bl	8000104 <__udivsi3>
 8003630:	0003      	movs	r3, r0
 8003632:	b29b      	uxth	r3, r3
 8003634:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003636:	e0c9      	b.n	80037cc <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003638:	f7fe fdee 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 800363c:	0002      	movs	r2, r0
 800363e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	2b00      	cmp	r3, #0
 8003644:	d044      	beq.n	80036d0 <UART_SetConfig+0xc7c>
 8003646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	2b01      	cmp	r3, #1
 800364c:	d03e      	beq.n	80036cc <UART_SetConfig+0xc78>
 800364e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	2b02      	cmp	r3, #2
 8003654:	d038      	beq.n	80036c8 <UART_SetConfig+0xc74>
 8003656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	2b03      	cmp	r3, #3
 800365c:	d032      	beq.n	80036c4 <UART_SetConfig+0xc70>
 800365e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	2b04      	cmp	r3, #4
 8003664:	d02c      	beq.n	80036c0 <UART_SetConfig+0xc6c>
 8003666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	2b05      	cmp	r3, #5
 800366c:	d026      	beq.n	80036bc <UART_SetConfig+0xc68>
 800366e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	2b06      	cmp	r3, #6
 8003674:	d020      	beq.n	80036b8 <UART_SetConfig+0xc64>
 8003676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	2b07      	cmp	r3, #7
 800367c:	d01a      	beq.n	80036b4 <UART_SetConfig+0xc60>
 800367e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	2b08      	cmp	r3, #8
 8003684:	d014      	beq.n	80036b0 <UART_SetConfig+0xc5c>
 8003686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	2b09      	cmp	r3, #9
 800368c:	d00e      	beq.n	80036ac <UART_SetConfig+0xc58>
 800368e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	2b0a      	cmp	r3, #10
 8003694:	d008      	beq.n	80036a8 <UART_SetConfig+0xc54>
 8003696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	2b0b      	cmp	r3, #11
 800369c:	d102      	bne.n	80036a4 <UART_SetConfig+0xc50>
 800369e:	2380      	movs	r3, #128	; 0x80
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	e016      	b.n	80036d2 <UART_SetConfig+0xc7e>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e014      	b.n	80036d2 <UART_SetConfig+0xc7e>
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	e012      	b.n	80036d2 <UART_SetConfig+0xc7e>
 80036ac:	2340      	movs	r3, #64	; 0x40
 80036ae:	e010      	b.n	80036d2 <UART_SetConfig+0xc7e>
 80036b0:	2320      	movs	r3, #32
 80036b2:	e00e      	b.n	80036d2 <UART_SetConfig+0xc7e>
 80036b4:	2310      	movs	r3, #16
 80036b6:	e00c      	b.n	80036d2 <UART_SetConfig+0xc7e>
 80036b8:	230c      	movs	r3, #12
 80036ba:	e00a      	b.n	80036d2 <UART_SetConfig+0xc7e>
 80036bc:	230a      	movs	r3, #10
 80036be:	e008      	b.n	80036d2 <UART_SetConfig+0xc7e>
 80036c0:	2308      	movs	r3, #8
 80036c2:	e006      	b.n	80036d2 <UART_SetConfig+0xc7e>
 80036c4:	2306      	movs	r3, #6
 80036c6:	e004      	b.n	80036d2 <UART_SetConfig+0xc7e>
 80036c8:	2304      	movs	r3, #4
 80036ca:	e002      	b.n	80036d2 <UART_SetConfig+0xc7e>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e000      	b.n	80036d2 <UART_SetConfig+0xc7e>
 80036d0:	2301      	movs	r3, #1
 80036d2:	0019      	movs	r1, r3
 80036d4:	0010      	movs	r0, r2
 80036d6:	f7fc fd15 	bl	8000104 <__udivsi3>
 80036da:	0003      	movs	r3, r0
 80036dc:	005a      	lsls	r2, r3, #1
 80036de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	085b      	lsrs	r3, r3, #1
 80036e4:	18d2      	adds	r2, r2, r3
 80036e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	0019      	movs	r1, r3
 80036ec:	0010      	movs	r0, r2
 80036ee:	f7fc fd09 	bl	8000104 <__udivsi3>
 80036f2:	0003      	movs	r3, r0
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80036f8:	e068      	b.n	80037cc <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d04c      	beq.n	800379c <UART_SetConfig+0xd48>
 8003702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	2b01      	cmp	r3, #1
 8003708:	d045      	beq.n	8003796 <UART_SetConfig+0xd42>
 800370a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	2b02      	cmp	r3, #2
 8003710:	d03e      	beq.n	8003790 <UART_SetConfig+0xd3c>
 8003712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	2b03      	cmp	r3, #3
 8003718:	d038      	beq.n	800378c <UART_SetConfig+0xd38>
 800371a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	2b04      	cmp	r3, #4
 8003720:	d031      	beq.n	8003786 <UART_SetConfig+0xd32>
 8003722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	2b05      	cmp	r3, #5
 8003728:	d02b      	beq.n	8003782 <UART_SetConfig+0xd2e>
 800372a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	2b06      	cmp	r3, #6
 8003730:	d025      	beq.n	800377e <UART_SetConfig+0xd2a>
 8003732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	2b07      	cmp	r3, #7
 8003738:	d01e      	beq.n	8003778 <UART_SetConfig+0xd24>
 800373a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	2b08      	cmp	r3, #8
 8003740:	d017      	beq.n	8003772 <UART_SetConfig+0xd1e>
 8003742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	2b09      	cmp	r3, #9
 8003748:	d010      	beq.n	800376c <UART_SetConfig+0xd18>
 800374a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	2b0a      	cmp	r3, #10
 8003750:	d009      	beq.n	8003766 <UART_SetConfig+0xd12>
 8003752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	2b0b      	cmp	r3, #11
 8003758:	d102      	bne.n	8003760 <UART_SetConfig+0xd0c>
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	e01f      	b.n	80037a0 <UART_SetConfig+0xd4c>
 8003760:	2380      	movs	r3, #128	; 0x80
 8003762:	025b      	lsls	r3, r3, #9
 8003764:	e01c      	b.n	80037a0 <UART_SetConfig+0xd4c>
 8003766:	2380      	movs	r3, #128	; 0x80
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	e019      	b.n	80037a0 <UART_SetConfig+0xd4c>
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	e016      	b.n	80037a0 <UART_SetConfig+0xd4c>
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	e013      	b.n	80037a0 <UART_SetConfig+0xd4c>
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	015b      	lsls	r3, r3, #5
 800377c:	e010      	b.n	80037a0 <UART_SetConfig+0xd4c>
 800377e:	4b61      	ldr	r3, [pc, #388]	; (8003904 <UART_SetConfig+0xeb0>)
 8003780:	e00e      	b.n	80037a0 <UART_SetConfig+0xd4c>
 8003782:	4b61      	ldr	r3, [pc, #388]	; (8003908 <UART_SetConfig+0xeb4>)
 8003784:	e00c      	b.n	80037a0 <UART_SetConfig+0xd4c>
 8003786:	2380      	movs	r3, #128	; 0x80
 8003788:	019b      	lsls	r3, r3, #6
 800378a:	e009      	b.n	80037a0 <UART_SetConfig+0xd4c>
 800378c:	4b5f      	ldr	r3, [pc, #380]	; (800390c <UART_SetConfig+0xeb8>)
 800378e:	e007      	b.n	80037a0 <UART_SetConfig+0xd4c>
 8003790:	2380      	movs	r3, #128	; 0x80
 8003792:	01db      	lsls	r3, r3, #7
 8003794:	e004      	b.n	80037a0 <UART_SetConfig+0xd4c>
 8003796:	2380      	movs	r3, #128	; 0x80
 8003798:	021b      	lsls	r3, r3, #8
 800379a:	e001      	b.n	80037a0 <UART_SetConfig+0xd4c>
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	025b      	lsls	r3, r3, #9
 80037a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037a2:	6852      	ldr	r2, [r2, #4]
 80037a4:	0852      	lsrs	r2, r2, #1
 80037a6:	189a      	adds	r2, r3, r2
 80037a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	0019      	movs	r1, r3
 80037ae:	0010      	movs	r0, r2
 80037b0:	f7fc fca8 	bl	8000104 <__udivsi3>
 80037b4:	0003      	movs	r3, r0
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80037ba:	e007      	b.n	80037cc <UART_SetConfig+0xd78>
      default:
        ret = HAL_ERROR;
 80037bc:	2313      	movs	r3, #19
 80037be:	2258      	movs	r2, #88	; 0x58
 80037c0:	4694      	mov	ip, r2
 80037c2:	44bc      	add	ip, r7
 80037c4:	4463      	add	r3, ip
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
        break;
 80037ca:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ce:	2b0f      	cmp	r3, #15
 80037d0:	d920      	bls.n	8003814 <UART_SetConfig+0xdc0>
 80037d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d4:	4a4e      	ldr	r2, [pc, #312]	; (8003910 <UART_SetConfig+0xebc>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d81c      	bhi.n	8003814 <UART_SetConfig+0xdc0>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037dc:	b29a      	uxth	r2, r3
 80037de:	200a      	movs	r0, #10
 80037e0:	2458      	movs	r4, #88	; 0x58
 80037e2:	193b      	adds	r3, r7, r4
 80037e4:	181b      	adds	r3, r3, r0
 80037e6:	210f      	movs	r1, #15
 80037e8:	438a      	bics	r2, r1
 80037ea:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ee:	085b      	lsrs	r3, r3, #1
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2207      	movs	r2, #7
 80037f4:	4013      	ands	r3, r2
 80037f6:	b299      	uxth	r1, r3
 80037f8:	193b      	adds	r3, r7, r4
 80037fa:	181b      	adds	r3, r3, r0
 80037fc:	193a      	adds	r2, r7, r4
 80037fe:	1812      	adds	r2, r2, r0
 8003800:	8812      	ldrh	r2, [r2, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	193a      	adds	r2, r7, r4
 800380c:	1812      	adds	r2, r2, r0
 800380e:	8812      	ldrh	r2, [r2, #0]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	e1d1      	b.n	8003bb8 <UART_SetConfig+0x1164>
    }
    else
    {
      ret = HAL_ERROR;
 8003814:	2313      	movs	r3, #19
 8003816:	2258      	movs	r2, #88	; 0x58
 8003818:	4694      	mov	ip, r2
 800381a:	44bc      	add	ip, r7
 800381c:	4463      	add	r3, ip
 800381e:	2201      	movs	r2, #1
 8003820:	701a      	strb	r2, [r3, #0]
 8003822:	e1c9      	b.n	8003bb8 <UART_SetConfig+0x1164>
    }
  }
  else
  {
    switch (clocksource)
 8003824:	231b      	movs	r3, #27
 8003826:	2258      	movs	r2, #88	; 0x58
 8003828:	4694      	mov	ip, r2
 800382a:	44bc      	add	ip, r7
 800382c:	4463      	add	r3, ip
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d100      	bne.n	8003836 <UART_SetConfig+0xde2>
 8003834:	e08d      	b.n	8003952 <UART_SetConfig+0xefe>
 8003836:	dc02      	bgt.n	800383e <UART_SetConfig+0xdea>
 8003838:	2b00      	cmp	r3, #0
 800383a:	d007      	beq.n	800384c <UART_SetConfig+0xdf8>
 800383c:	e1a1      	b.n	8003b82 <UART_SetConfig+0x112e>
 800383e:	2b04      	cmp	r3, #4
 8003840:	d100      	bne.n	8003844 <UART_SetConfig+0xdf0>
 8003842:	e0dd      	b.n	8003a00 <UART_SetConfig+0xfac>
 8003844:	2b08      	cmp	r3, #8
 8003846:	d100      	bne.n	800384a <UART_SetConfig+0xdf6>
 8003848:	e13b      	b.n	8003ac2 <UART_SetConfig+0x106e>
 800384a:	e19a      	b.n	8003b82 <UART_SetConfig+0x112e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800384c:	f7fe fd70 	bl	8002330 <HAL_RCC_GetPCLK1Freq>
 8003850:	0002      	movs	r2, r0
 8003852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	2b00      	cmp	r3, #0
 8003858:	d100      	bne.n	800385c <UART_SetConfig+0xe08>
 800385a:	e065      	b.n	8003928 <UART_SetConfig+0xed4>
 800385c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	2b01      	cmp	r3, #1
 8003862:	d100      	bne.n	8003866 <UART_SetConfig+0xe12>
 8003864:	e05e      	b.n	8003924 <UART_SetConfig+0xed0>
 8003866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	2b02      	cmp	r3, #2
 800386c:	d058      	beq.n	8003920 <UART_SetConfig+0xecc>
 800386e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	2b03      	cmp	r3, #3
 8003874:	d052      	beq.n	800391c <UART_SetConfig+0xec8>
 8003876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	2b04      	cmp	r3, #4
 800387c:	d04c      	beq.n	8003918 <UART_SetConfig+0xec4>
 800387e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	2b05      	cmp	r3, #5
 8003884:	d046      	beq.n	8003914 <UART_SetConfig+0xec0>
 8003886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	2b06      	cmp	r3, #6
 800388c:	d020      	beq.n	80038d0 <UART_SetConfig+0xe7c>
 800388e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	2b07      	cmp	r3, #7
 8003894:	d01a      	beq.n	80038cc <UART_SetConfig+0xe78>
 8003896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	2b08      	cmp	r3, #8
 800389c:	d014      	beq.n	80038c8 <UART_SetConfig+0xe74>
 800389e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	2b09      	cmp	r3, #9
 80038a4:	d00e      	beq.n	80038c4 <UART_SetConfig+0xe70>
 80038a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	2b0a      	cmp	r3, #10
 80038ac:	d008      	beq.n	80038c0 <UART_SetConfig+0xe6c>
 80038ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	2b0b      	cmp	r3, #11
 80038b4:	d102      	bne.n	80038bc <UART_SetConfig+0xe68>
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	e036      	b.n	800392a <UART_SetConfig+0xed6>
 80038bc:	2301      	movs	r3, #1
 80038be:	e034      	b.n	800392a <UART_SetConfig+0xed6>
 80038c0:	2380      	movs	r3, #128	; 0x80
 80038c2:	e032      	b.n	800392a <UART_SetConfig+0xed6>
 80038c4:	2340      	movs	r3, #64	; 0x40
 80038c6:	e030      	b.n	800392a <UART_SetConfig+0xed6>
 80038c8:	2320      	movs	r3, #32
 80038ca:	e02e      	b.n	800392a <UART_SetConfig+0xed6>
 80038cc:	2310      	movs	r3, #16
 80038ce:	e02c      	b.n	800392a <UART_SetConfig+0xed6>
 80038d0:	230c      	movs	r3, #12
 80038d2:	e02a      	b.n	800392a <UART_SetConfig+0xed6>
 80038d4:	0001e848 	.word	0x0001e848
 80038d8:	01e84800 	.word	0x01e84800
 80038dc:	0003d090 	.word	0x0003d090
 80038e0:	0007a120 	.word	0x0007a120
 80038e4:	000f4240 	.word	0x000f4240
 80038e8:	001e8480 	.word	0x001e8480
 80038ec:	0028b0aa 	.word	0x0028b0aa
 80038f0:	0030d400 	.word	0x0030d400
 80038f4:	003d0900 	.word	0x003d0900
 80038f8:	00516154 	.word	0x00516154
 80038fc:	007a1200 	.word	0x007a1200
 8003900:	00f42400 	.word	0x00f42400
 8003904:	00001554 	.word	0x00001554
 8003908:	00001998 	.word	0x00001998
 800390c:	00002aaa 	.word	0x00002aaa
 8003910:	0000ffff 	.word	0x0000ffff
 8003914:	230a      	movs	r3, #10
 8003916:	e008      	b.n	800392a <UART_SetConfig+0xed6>
 8003918:	2308      	movs	r3, #8
 800391a:	e006      	b.n	800392a <UART_SetConfig+0xed6>
 800391c:	2306      	movs	r3, #6
 800391e:	e004      	b.n	800392a <UART_SetConfig+0xed6>
 8003920:	2304      	movs	r3, #4
 8003922:	e002      	b.n	800392a <UART_SetConfig+0xed6>
 8003924:	2302      	movs	r3, #2
 8003926:	e000      	b.n	800392a <UART_SetConfig+0xed6>
 8003928:	2301      	movs	r3, #1
 800392a:	0019      	movs	r1, r3
 800392c:	0010      	movs	r0, r2
 800392e:	f7fc fbe9 	bl	8000104 <__udivsi3>
 8003932:	0003      	movs	r3, r0
 8003934:	001a      	movs	r2, r3
 8003936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	085b      	lsrs	r3, r3, #1
 800393c:	18d2      	adds	r2, r2, r3
 800393e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	0019      	movs	r1, r3
 8003944:	0010      	movs	r0, r2
 8003946:	f7fc fbdd 	bl	8000104 <__udivsi3>
 800394a:	0003      	movs	r3, r0
 800394c:	b29b      	uxth	r3, r3
 800394e:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003950:	e11f      	b.n	8003b92 <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	2b00      	cmp	r3, #0
 8003958:	d043      	beq.n	80039e2 <UART_SetConfig+0xf8e>
 800395a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	2b01      	cmp	r3, #1
 8003960:	d03d      	beq.n	80039de <UART_SetConfig+0xf8a>
 8003962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	2b02      	cmp	r3, #2
 8003968:	d037      	beq.n	80039da <UART_SetConfig+0xf86>
 800396a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	2b03      	cmp	r3, #3
 8003970:	d031      	beq.n	80039d6 <UART_SetConfig+0xf82>
 8003972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	2b04      	cmp	r3, #4
 8003978:	d02b      	beq.n	80039d2 <UART_SetConfig+0xf7e>
 800397a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	2b05      	cmp	r3, #5
 8003980:	d025      	beq.n	80039ce <UART_SetConfig+0xf7a>
 8003982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	2b06      	cmp	r3, #6
 8003988:	d01f      	beq.n	80039ca <UART_SetConfig+0xf76>
 800398a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	2b07      	cmp	r3, #7
 8003990:	d019      	beq.n	80039c6 <UART_SetConfig+0xf72>
 8003992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	2b08      	cmp	r3, #8
 8003998:	d013      	beq.n	80039c2 <UART_SetConfig+0xf6e>
 800399a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	2b09      	cmp	r3, #9
 80039a0:	d00d      	beq.n	80039be <UART_SetConfig+0xf6a>
 80039a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	2b0a      	cmp	r3, #10
 80039a8:	d007      	beq.n	80039ba <UART_SetConfig+0xf66>
 80039aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	2b0b      	cmp	r3, #11
 80039b0:	d101      	bne.n	80039b6 <UART_SetConfig+0xf62>
 80039b2:	4b8d      	ldr	r3, [pc, #564]	; (8003be8 <UART_SetConfig+0x1194>)
 80039b4:	e016      	b.n	80039e4 <UART_SetConfig+0xf90>
 80039b6:	4b8d      	ldr	r3, [pc, #564]	; (8003bec <UART_SetConfig+0x1198>)
 80039b8:	e014      	b.n	80039e4 <UART_SetConfig+0xf90>
 80039ba:	4b8d      	ldr	r3, [pc, #564]	; (8003bf0 <UART_SetConfig+0x119c>)
 80039bc:	e012      	b.n	80039e4 <UART_SetConfig+0xf90>
 80039be:	4b8d      	ldr	r3, [pc, #564]	; (8003bf4 <UART_SetConfig+0x11a0>)
 80039c0:	e010      	b.n	80039e4 <UART_SetConfig+0xf90>
 80039c2:	4b8d      	ldr	r3, [pc, #564]	; (8003bf8 <UART_SetConfig+0x11a4>)
 80039c4:	e00e      	b.n	80039e4 <UART_SetConfig+0xf90>
 80039c6:	4b8d      	ldr	r3, [pc, #564]	; (8003bfc <UART_SetConfig+0x11a8>)
 80039c8:	e00c      	b.n	80039e4 <UART_SetConfig+0xf90>
 80039ca:	4b8d      	ldr	r3, [pc, #564]	; (8003c00 <UART_SetConfig+0x11ac>)
 80039cc:	e00a      	b.n	80039e4 <UART_SetConfig+0xf90>
 80039ce:	4b8d      	ldr	r3, [pc, #564]	; (8003c04 <UART_SetConfig+0x11b0>)
 80039d0:	e008      	b.n	80039e4 <UART_SetConfig+0xf90>
 80039d2:	4b8d      	ldr	r3, [pc, #564]	; (8003c08 <UART_SetConfig+0x11b4>)
 80039d4:	e006      	b.n	80039e4 <UART_SetConfig+0xf90>
 80039d6:	4b8d      	ldr	r3, [pc, #564]	; (8003c0c <UART_SetConfig+0x11b8>)
 80039d8:	e004      	b.n	80039e4 <UART_SetConfig+0xf90>
 80039da:	4b8d      	ldr	r3, [pc, #564]	; (8003c10 <UART_SetConfig+0x11bc>)
 80039dc:	e002      	b.n	80039e4 <UART_SetConfig+0xf90>
 80039de:	4b8d      	ldr	r3, [pc, #564]	; (8003c14 <UART_SetConfig+0x11c0>)
 80039e0:	e000      	b.n	80039e4 <UART_SetConfig+0xf90>
 80039e2:	4b82      	ldr	r3, [pc, #520]	; (8003bec <UART_SetConfig+0x1198>)
 80039e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039e6:	6852      	ldr	r2, [r2, #4]
 80039e8:	0852      	lsrs	r2, r2, #1
 80039ea:	189a      	adds	r2, r3, r2
 80039ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	0019      	movs	r1, r3
 80039f2:	0010      	movs	r0, r2
 80039f4:	f7fc fb86 	bl	8000104 <__udivsi3>
 80039f8:	0003      	movs	r3, r0
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80039fe:	e0c8      	b.n	8003b92 <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a00:	f7fe fc0a 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 8003a04:	0002      	movs	r2, r0
 8003a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d044      	beq.n	8003a98 <UART_SetConfig+0x1044>
 8003a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d03e      	beq.n	8003a94 <UART_SetConfig+0x1040>
 8003a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d038      	beq.n	8003a90 <UART_SetConfig+0x103c>
 8003a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d032      	beq.n	8003a8c <UART_SetConfig+0x1038>
 8003a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d02c      	beq.n	8003a88 <UART_SetConfig+0x1034>
 8003a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	2b05      	cmp	r3, #5
 8003a34:	d026      	beq.n	8003a84 <UART_SetConfig+0x1030>
 8003a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	2b06      	cmp	r3, #6
 8003a3c:	d020      	beq.n	8003a80 <UART_SetConfig+0x102c>
 8003a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	2b07      	cmp	r3, #7
 8003a44:	d01a      	beq.n	8003a7c <UART_SetConfig+0x1028>
 8003a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d014      	beq.n	8003a78 <UART_SetConfig+0x1024>
 8003a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	2b09      	cmp	r3, #9
 8003a54:	d00e      	beq.n	8003a74 <UART_SetConfig+0x1020>
 8003a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	2b0a      	cmp	r3, #10
 8003a5c:	d008      	beq.n	8003a70 <UART_SetConfig+0x101c>
 8003a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	2b0b      	cmp	r3, #11
 8003a64:	d102      	bne.n	8003a6c <UART_SetConfig+0x1018>
 8003a66:	2380      	movs	r3, #128	; 0x80
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	e016      	b.n	8003a9a <UART_SetConfig+0x1046>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e014      	b.n	8003a9a <UART_SetConfig+0x1046>
 8003a70:	2380      	movs	r3, #128	; 0x80
 8003a72:	e012      	b.n	8003a9a <UART_SetConfig+0x1046>
 8003a74:	2340      	movs	r3, #64	; 0x40
 8003a76:	e010      	b.n	8003a9a <UART_SetConfig+0x1046>
 8003a78:	2320      	movs	r3, #32
 8003a7a:	e00e      	b.n	8003a9a <UART_SetConfig+0x1046>
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	e00c      	b.n	8003a9a <UART_SetConfig+0x1046>
 8003a80:	230c      	movs	r3, #12
 8003a82:	e00a      	b.n	8003a9a <UART_SetConfig+0x1046>
 8003a84:	230a      	movs	r3, #10
 8003a86:	e008      	b.n	8003a9a <UART_SetConfig+0x1046>
 8003a88:	2308      	movs	r3, #8
 8003a8a:	e006      	b.n	8003a9a <UART_SetConfig+0x1046>
 8003a8c:	2306      	movs	r3, #6
 8003a8e:	e004      	b.n	8003a9a <UART_SetConfig+0x1046>
 8003a90:	2304      	movs	r3, #4
 8003a92:	e002      	b.n	8003a9a <UART_SetConfig+0x1046>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e000      	b.n	8003a9a <UART_SetConfig+0x1046>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	0019      	movs	r1, r3
 8003a9c:	0010      	movs	r0, r2
 8003a9e:	f7fc fb31 	bl	8000104 <__udivsi3>
 8003aa2:	0003      	movs	r3, r0
 8003aa4:	001a      	movs	r2, r3
 8003aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	085b      	lsrs	r3, r3, #1
 8003aac:	18d2      	adds	r2, r2, r3
 8003aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	0010      	movs	r0, r2
 8003ab6:	f7fc fb25 	bl	8000104 <__udivsi3>
 8003aba:	0003      	movs	r3, r0
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003ac0:	e067      	b.n	8003b92 <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d04b      	beq.n	8003b62 <UART_SetConfig+0x110e>
 8003aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d044      	beq.n	8003b5c <UART_SetConfig+0x1108>
 8003ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d03d      	beq.n	8003b56 <UART_SetConfig+0x1102>
 8003ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d037      	beq.n	8003b52 <UART_SetConfig+0x10fe>
 8003ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d030      	beq.n	8003b4c <UART_SetConfig+0x10f8>
 8003aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	2b05      	cmp	r3, #5
 8003af0:	d02a      	beq.n	8003b48 <UART_SetConfig+0x10f4>
 8003af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	2b06      	cmp	r3, #6
 8003af8:	d024      	beq.n	8003b44 <UART_SetConfig+0x10f0>
 8003afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	2b07      	cmp	r3, #7
 8003b00:	d01d      	beq.n	8003b3e <UART_SetConfig+0x10ea>
 8003b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d016      	beq.n	8003b38 <UART_SetConfig+0x10e4>
 8003b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	2b09      	cmp	r3, #9
 8003b10:	d00f      	beq.n	8003b32 <UART_SetConfig+0x10de>
 8003b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	2b0a      	cmp	r3, #10
 8003b18:	d008      	beq.n	8003b2c <UART_SetConfig+0x10d8>
 8003b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	2b0b      	cmp	r3, #11
 8003b20:	d101      	bne.n	8003b26 <UART_SetConfig+0x10d2>
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	e01f      	b.n	8003b66 <UART_SetConfig+0x1112>
 8003b26:	2380      	movs	r3, #128	; 0x80
 8003b28:	021b      	lsls	r3, r3, #8
 8003b2a:	e01c      	b.n	8003b66 <UART_SetConfig+0x1112>
 8003b2c:	2380      	movs	r3, #128	; 0x80
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	e019      	b.n	8003b66 <UART_SetConfig+0x1112>
 8003b32:	2380      	movs	r3, #128	; 0x80
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	e016      	b.n	8003b66 <UART_SetConfig+0x1112>
 8003b38:	2380      	movs	r3, #128	; 0x80
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	e013      	b.n	8003b66 <UART_SetConfig+0x1112>
 8003b3e:	2380      	movs	r3, #128	; 0x80
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	e010      	b.n	8003b66 <UART_SetConfig+0x1112>
 8003b44:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <UART_SetConfig+0x11c4>)
 8003b46:	e00e      	b.n	8003b66 <UART_SetConfig+0x1112>
 8003b48:	4b34      	ldr	r3, [pc, #208]	; (8003c1c <UART_SetConfig+0x11c8>)
 8003b4a:	e00c      	b.n	8003b66 <UART_SetConfig+0x1112>
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	015b      	lsls	r3, r3, #5
 8003b50:	e009      	b.n	8003b66 <UART_SetConfig+0x1112>
 8003b52:	4b33      	ldr	r3, [pc, #204]	; (8003c20 <UART_SetConfig+0x11cc>)
 8003b54:	e007      	b.n	8003b66 <UART_SetConfig+0x1112>
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	019b      	lsls	r3, r3, #6
 8003b5a:	e004      	b.n	8003b66 <UART_SetConfig+0x1112>
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	01db      	lsls	r3, r3, #7
 8003b60:	e001      	b.n	8003b66 <UART_SetConfig+0x1112>
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	021b      	lsls	r3, r3, #8
 8003b66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b68:	6852      	ldr	r2, [r2, #4]
 8003b6a:	0852      	lsrs	r2, r2, #1
 8003b6c:	189a      	adds	r2, r3, r2
 8003b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	0019      	movs	r1, r3
 8003b74:	0010      	movs	r0, r2
 8003b76:	f7fc fac5 	bl	8000104 <__udivsi3>
 8003b7a:	0003      	movs	r3, r0
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003b80:	e007      	b.n	8003b92 <UART_SetConfig+0x113e>
      default:
        ret = HAL_ERROR;
 8003b82:	2313      	movs	r3, #19
 8003b84:	2258      	movs	r2, #88	; 0x58
 8003b86:	4694      	mov	ip, r2
 8003b88:	44bc      	add	ip, r7
 8003b8a:	4463      	add	r3, ip
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	701a      	strb	r2, [r3, #0]
        break;
 8003b90:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b94:	2b0f      	cmp	r3, #15
 8003b96:	d908      	bls.n	8003baa <UART_SetConfig+0x1156>
 8003b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9a:	4a22      	ldr	r2, [pc, #136]	; (8003c24 <UART_SetConfig+0x11d0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d804      	bhi.n	8003baa <UART_SetConfig+0x1156>
    {
      huart->Instance->BRR = usartdiv;
 8003ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ba6:	60da      	str	r2, [r3, #12]
 8003ba8:	e006      	b.n	8003bb8 <UART_SetConfig+0x1164>
    }
    else
    {
      ret = HAL_ERROR;
 8003baa:	2313      	movs	r3, #19
 8003bac:	2258      	movs	r2, #88	; 0x58
 8003bae:	4694      	mov	ip, r2
 8003bb0:	44bc      	add	ip, r7
 8003bb2:	4463      	add	r3, ip
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003bb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bba:	226a      	movs	r2, #106	; 0x6a
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc2:	2268      	movs	r2, #104	; 0x68
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bca:	2200      	movs	r2, #0
 8003bcc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003bd4:	2313      	movs	r3, #19
 8003bd6:	2258      	movs	r2, #88	; 0x58
 8003bd8:	4694      	mov	ip, r2
 8003bda:	44bc      	add	ip, r7
 8003bdc:	4463      	add	r3, ip
 8003bde:	781b      	ldrb	r3, [r3, #0]
}
 8003be0:	0018      	movs	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b01f      	add	sp, #124	; 0x7c
 8003be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003be8:	0000f424 	.word	0x0000f424
 8003bec:	00f42400 	.word	0x00f42400
 8003bf0:	0001e848 	.word	0x0001e848
 8003bf4:	0003d090 	.word	0x0003d090
 8003bf8:	0007a120 	.word	0x0007a120
 8003bfc:	000f4240 	.word	0x000f4240
 8003c00:	00145855 	.word	0x00145855
 8003c04:	00186a00 	.word	0x00186a00
 8003c08:	001e8480 	.word	0x001e8480
 8003c0c:	0028b0aa 	.word	0x0028b0aa
 8003c10:	003d0900 	.word	0x003d0900
 8003c14:	007a1200 	.word	0x007a1200
 8003c18:	00000aaa 	.word	0x00000aaa
 8003c1c:	00000ccc 	.word	0x00000ccc
 8003c20:	00001555 	.word	0x00001555
 8003c24:	0000ffff 	.word	0x0000ffff

08003c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	2201      	movs	r2, #1
 8003c36:	4013      	ands	r3, r2
 8003c38:	d00b      	beq.n	8003c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	4a4a      	ldr	r2, [pc, #296]	; (8003d6c <UART_AdvFeatureConfig+0x144>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	0019      	movs	r1, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c56:	2202      	movs	r2, #2
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d00b      	beq.n	8003c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	4a43      	ldr	r2, [pc, #268]	; (8003d70 <UART_AdvFeatureConfig+0x148>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	0019      	movs	r1, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c78:	2204      	movs	r2, #4
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d00b      	beq.n	8003c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	4a3b      	ldr	r2, [pc, #236]	; (8003d74 <UART_AdvFeatureConfig+0x14c>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	0019      	movs	r1, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	2208      	movs	r2, #8
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d00b      	beq.n	8003cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4a34      	ldr	r2, [pc, #208]	; (8003d78 <UART_AdvFeatureConfig+0x150>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	0019      	movs	r1, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	2210      	movs	r2, #16
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d00b      	beq.n	8003cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	4a2c      	ldr	r2, [pc, #176]	; (8003d7c <UART_AdvFeatureConfig+0x154>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	0019      	movs	r1, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	2220      	movs	r2, #32
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d00b      	beq.n	8003cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	4a25      	ldr	r2, [pc, #148]	; (8003d80 <UART_AdvFeatureConfig+0x158>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	0019      	movs	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	2240      	movs	r2, #64	; 0x40
 8003d02:	4013      	ands	r3, r2
 8003d04:	d01d      	beq.n	8003d42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	4a1d      	ldr	r2, [pc, #116]	; (8003d84 <UART_AdvFeatureConfig+0x15c>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	0019      	movs	r1, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d22:	2380      	movs	r3, #128	; 0x80
 8003d24:	035b      	lsls	r3, r3, #13
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d10b      	bne.n	8003d42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4a15      	ldr	r2, [pc, #84]	; (8003d88 <UART_AdvFeatureConfig+0x160>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	0019      	movs	r1, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	2280      	movs	r2, #128	; 0x80
 8003d48:	4013      	ands	r3, r2
 8003d4a:	d00b      	beq.n	8003d64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	4a0e      	ldr	r2, [pc, #56]	; (8003d8c <UART_AdvFeatureConfig+0x164>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	0019      	movs	r1, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	605a      	str	r2, [r3, #4]
  }
}
 8003d64:	46c0      	nop			; (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b002      	add	sp, #8
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	fffdffff 	.word	0xfffdffff
 8003d70:	fffeffff 	.word	0xfffeffff
 8003d74:	fffbffff 	.word	0xfffbffff
 8003d78:	ffff7fff 	.word	0xffff7fff
 8003d7c:	ffffefff 	.word	0xffffefff
 8003d80:	ffffdfff 	.word	0xffffdfff
 8003d84:	ffefffff 	.word	0xffefffff
 8003d88:	ff9fffff 	.word	0xff9fffff
 8003d8c:	fff7ffff 	.word	0xfff7ffff

08003d90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2288      	movs	r2, #136	; 0x88
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003da0:	f7fc fcac 	bl	80006fc <HAL_GetTick>
 8003da4:	0003      	movs	r3, r0
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2208      	movs	r2, #8
 8003db0:	4013      	ands	r3, r2
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d10d      	bne.n	8003dd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	0399      	lsls	r1, r3, #14
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	4b18      	ldr	r3, [pc, #96]	; (8003e20 <UART_CheckIdleState+0x90>)
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	0013      	movs	r3, r2
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f000 f82d 	bl	8003e24 <UART_WaitOnFlagUntilTimeout>
 8003dca:	1e03      	subs	r3, r0, #0
 8003dcc:	d001      	beq.n	8003dd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e021      	b.n	8003e16 <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2204      	movs	r2, #4
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d10d      	bne.n	8003dfc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	2380      	movs	r3, #128	; 0x80
 8003de4:	03d9      	lsls	r1, r3, #15
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <UART_CheckIdleState+0x90>)
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	0013      	movs	r3, r2
 8003dee:	2200      	movs	r2, #0
 8003df0:	f000 f818 	bl	8003e24 <UART_WaitOnFlagUntilTimeout>
 8003df4:	1e03      	subs	r3, r0, #0
 8003df6:	d001      	beq.n	8003dfc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e00c      	b.n	8003e16 <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2280      	movs	r2, #128	; 0x80
 8003e00:	2120      	movs	r1, #32
 8003e02:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2284      	movs	r2, #132	; 0x84
 8003e08:	2120      	movs	r1, #32
 8003e0a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	227c      	movs	r2, #124	; 0x7c
 8003e10:	2100      	movs	r1, #0
 8003e12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	0018      	movs	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b004      	add	sp, #16
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	46c0      	nop			; (mov r8, r8)
 8003e20:	01ffffff 	.word	0x01ffffff

08003e24 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	1dfb      	adds	r3, r7, #7
 8003e32:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e34:	e02b      	b.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	d028      	beq.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3c:	f7fc fc5e 	bl	80006fc <HAL_GetTick>
 8003e40:	0002      	movs	r2, r0
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d302      	bcc.n	8003e52 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d11d      	bne.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4916      	ldr	r1, [pc, #88]	; (8003eb8 <UART_WaitOnFlagUntilTimeout+0x94>)
 8003e5e:	400a      	ands	r2, r1
 8003e60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	438a      	bics	r2, r1
 8003e70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2280      	movs	r2, #128	; 0x80
 8003e76:	2120      	movs	r1, #32
 8003e78:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2284      	movs	r2, #132	; 0x84
 8003e7e:	2120      	movs	r1, #32
 8003e80:	5099      	str	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	227c      	movs	r2, #124	; 0x7c
 8003e86:	2100      	movs	r1, #0
 8003e88:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e00f      	b.n	8003eae <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	4013      	ands	r3, r2
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	425a      	negs	r2, r3
 8003e9e:	4153      	adcs	r3, r2
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	001a      	movs	r2, r3
 8003ea4:	1dfb      	adds	r3, r7, #7
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d0c4      	beq.n	8003e36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	0018      	movs	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b004      	add	sp, #16
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	fffffe5f 	.word	0xfffffe5f

08003ebc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	490b      	ldr	r1, [pc, #44]	; (8003efc <UART_EndRxTransfer+0x40>)
 8003ed0:	400a      	ands	r2, r1
 8003ed2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4908      	ldr	r1, [pc, #32]	; (8003f00 <UART_EndRxTransfer+0x44>)
 8003ee0:	400a      	ands	r2, r1
 8003ee2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2284      	movs	r2, #132	; 0x84
 8003ee8:	2120      	movs	r1, #32
 8003eea:	5099      	str	r1, [r3, r2]

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b002      	add	sp, #8
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	fffffedf 	.word	0xfffffedf
 8003f00:	effffffe 	.word	0xeffffffe

08003f04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	225e      	movs	r2, #94	; 0x5e
 8003f16:	2100      	movs	r1, #0
 8003f18:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2256      	movs	r2, #86	; 0x56
 8003f1e:	2100      	movs	r1, #0
 8003f20:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	0018      	movs	r0, r3
 8003f26:	f7fe fd8d 	bl	8002a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b004      	add	sp, #16
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2140      	movs	r1, #64	; 0x40
 8003f46:	438a      	bics	r2, r1
 8003f48:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2280      	movs	r2, #128	; 0x80
 8003f4e:	2120      	movs	r1, #32
 8003f50:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f7fe fd6a 	bl	8002a34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f60:	46c0      	nop			; (mov r8, r8)
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b002      	add	sp, #8
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f70:	46c0      	nop			; (mov r8, r8)
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b002      	add	sp, #8
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003f80:	46c0      	nop			; (mov r8, r8)
 8003f82:	46bd      	mov	sp, r7
 8003f84:	b002      	add	sp, #8
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003f90:	46c0      	nop			; (mov r8, r8)
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b002      	add	sp, #8
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	227c      	movs	r2, #124	; 0x7c
 8003fa4:	5c9b      	ldrb	r3, [r3, r2]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_UARTEx_DisableFifoMode+0x16>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e027      	b.n	8003ffe <HAL_UARTEx_DisableFifoMode+0x66>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	227c      	movs	r2, #124	; 0x7c
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2280      	movs	r2, #128	; 0x80
 8003fba:	2124      	movs	r1, #36	; 0x24
 8003fbc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	438a      	bics	r2, r1
 8003fd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4a0b      	ldr	r2, [pc, #44]	; (8004008 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2280      	movs	r2, #128	; 0x80
 8003ff0:	2120      	movs	r1, #32
 8003ff2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	227c      	movs	r2, #124	; 0x7c
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	0018      	movs	r0, r3
 8004000:	46bd      	mov	sp, r7
 8004002:	b004      	add	sp, #16
 8004004:	bd80      	pop	{r7, pc}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	dfffffff 	.word	0xdfffffff

0800400c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	227c      	movs	r2, #124	; 0x7c
 800401a:	5c9b      	ldrb	r3, [r3, r2]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004020:	2302      	movs	r3, #2
 8004022:	e02e      	b.n	8004082 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	227c      	movs	r2, #124	; 0x7c
 8004028:	2101      	movs	r1, #1
 800402a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2280      	movs	r2, #128	; 0x80
 8004030:	2124      	movs	r1, #36	; 0x24
 8004032:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2101      	movs	r1, #1
 8004048:	438a      	bics	r2, r1
 800404a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	08d9      	lsrs	r1, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	0018      	movs	r0, r3
 8004064:	f000 f854 	bl	8004110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2280      	movs	r2, #128	; 0x80
 8004074:	2120      	movs	r1, #32
 8004076:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	227c      	movs	r2, #124	; 0x7c
 800407c:	2100      	movs	r1, #0
 800407e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	0018      	movs	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	b004      	add	sp, #16
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	227c      	movs	r2, #124	; 0x7c
 800409a:	5c9b      	ldrb	r3, [r3, r2]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e02f      	b.n	8004104 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	227c      	movs	r2, #124	; 0x7c
 80040a8:	2101      	movs	r1, #1
 80040aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2280      	movs	r2, #128	; 0x80
 80040b0:	2124      	movs	r1, #36	; 0x24
 80040b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2101      	movs	r1, #1
 80040c8:	438a      	bics	r2, r1
 80040ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	4a0e      	ldr	r2, [pc, #56]	; (800410c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	0019      	movs	r1, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	0018      	movs	r0, r3
 80040e6:	f000 f813 	bl	8004110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2280      	movs	r2, #128	; 0x80
 80040f6:	2120      	movs	r1, #32
 80040f8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	227c      	movs	r2, #124	; 0x7c
 80040fe:	2100      	movs	r1, #0
 8004100:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	0018      	movs	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	b004      	add	sp, #16
 800410a:	bd80      	pop	{r7, pc}
 800410c:	f1ffffff 	.word	0xf1ffffff

08004110 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004112:	b089      	sub	sp, #36	; 0x24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004118:	2314      	movs	r3, #20
 800411a:	18fb      	adds	r3, r7, r3
 800411c:	4a2f      	ldr	r2, [pc, #188]	; (80041dc <UARTEx_SetNbDataToProcess+0xcc>)
 800411e:	ca03      	ldmia	r2!, {r0, r1}
 8004120:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004122:	230c      	movs	r3, #12
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	4a2e      	ldr	r2, [pc, #184]	; (80041e0 <UARTEx_SetNbDataToProcess+0xd0>)
 8004128:	ca03      	ldmia	r2!, {r0, r1}
 800412a:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004130:	2b00      	cmp	r3, #0
 8004132:	d108      	bne.n	8004146 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	226a      	movs	r2, #106	; 0x6a
 8004138:	2101      	movs	r1, #1
 800413a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2268      	movs	r2, #104	; 0x68
 8004140:	2101      	movs	r1, #1
 8004142:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004144:	e046      	b.n	80041d4 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004146:	261f      	movs	r6, #31
 8004148:	19bb      	adds	r3, r7, r6
 800414a:	2208      	movs	r2, #8
 800414c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800414e:	201e      	movs	r0, #30
 8004150:	183b      	adds	r3, r7, r0
 8004152:	2208      	movs	r2, #8
 8004154:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	0e5b      	lsrs	r3, r3, #25
 800415e:	b2da      	uxtb	r2, r3
 8004160:	241d      	movs	r4, #29
 8004162:	193b      	adds	r3, r7, r4
 8004164:	2107      	movs	r1, #7
 8004166:	400a      	ands	r2, r1
 8004168:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	0f5b      	lsrs	r3, r3, #29
 8004172:	b2da      	uxtb	r2, r3
 8004174:	251c      	movs	r5, #28
 8004176:	197b      	adds	r3, r7, r5
 8004178:	2107      	movs	r1, #7
 800417a:	400a      	ands	r2, r1
 800417c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800417e:	183b      	adds	r3, r7, r0
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	197a      	adds	r2, r7, r5
 8004184:	7812      	ldrb	r2, [r2, #0]
 8004186:	2114      	movs	r1, #20
 8004188:	1879      	adds	r1, r7, r1
 800418a:	5c8a      	ldrb	r2, [r1, r2]
 800418c:	435a      	muls	r2, r3
 800418e:	0010      	movs	r0, r2
 8004190:	197b      	adds	r3, r7, r5
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	250c      	movs	r5, #12
 8004196:	197a      	adds	r2, r7, r5
 8004198:	5cd3      	ldrb	r3, [r2, r3]
 800419a:	0019      	movs	r1, r3
 800419c:	f7fc f83c 	bl	8000218 <__divsi3>
 80041a0:	0003      	movs	r3, r0
 80041a2:	b299      	uxth	r1, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	226a      	movs	r2, #106	; 0x6a
 80041a8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80041aa:	19bb      	adds	r3, r7, r6
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	193a      	adds	r2, r7, r4
 80041b0:	7812      	ldrb	r2, [r2, #0]
 80041b2:	2114      	movs	r1, #20
 80041b4:	1879      	adds	r1, r7, r1
 80041b6:	5c8a      	ldrb	r2, [r1, r2]
 80041b8:	435a      	muls	r2, r3
 80041ba:	0010      	movs	r0, r2
 80041bc:	193b      	adds	r3, r7, r4
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	197a      	adds	r2, r7, r5
 80041c2:	5cd3      	ldrb	r3, [r2, r3]
 80041c4:	0019      	movs	r1, r3
 80041c6:	f7fc f827 	bl	8000218 <__divsi3>
 80041ca:	0003      	movs	r3, r0
 80041cc:	b299      	uxth	r1, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2268      	movs	r2, #104	; 0x68
 80041d2:	5299      	strh	r1, [r3, r2]
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b009      	add	sp, #36	; 0x24
 80041da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041dc:	080047b0 	.word	0x080047b0
 80041e0:	080047b8 	.word	0x080047b8

080041e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041e8:	f7fc fa0e 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041ec:	f000 f810 	bl	8004210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041f0:	f000 f940 	bl	8004474 <MX_GPIO_Init>
  MX_ADC1_Init();
 80041f4:	f000 f886 	bl	8004304 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80041f8:	f000 f8ee 	bl	80043d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  HAL_UART_Transmit(&huart2,"hello",5,1000);
    /* USER CODE END WHILE */
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80041fc:	23a0      	movs	r3, #160	; 0xa0
 80041fe:	05db      	lsls	r3, r3, #23
 8004200:	2120      	movs	r1, #32
 8004202:	0018      	movs	r0, r3
 8004204:	f7fd fb79 	bl	80018fa <HAL_GPIO_TogglePin>
      HAL_Delay(200);
 8004208:	20c8      	movs	r0, #200	; 0xc8
 800420a:	f7fc fa81 	bl	8000710 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800420e:	e7f5      	b.n	80041fc <main+0x18>

08004210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004210:	b590      	push	{r4, r7, lr}
 8004212:	b0a1      	sub	sp, #132	; 0x84
 8004214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004216:	2448      	movs	r4, #72	; 0x48
 8004218:	193b      	adds	r3, r7, r4
 800421a:	0018      	movs	r0, r3
 800421c:	2338      	movs	r3, #56	; 0x38
 800421e:	001a      	movs	r2, r3
 8004220:	2100      	movs	r1, #0
 8004222:	f000 fab1 	bl	8004788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004226:	2338      	movs	r3, #56	; 0x38
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	0018      	movs	r0, r3
 800422c:	2310      	movs	r3, #16
 800422e:	001a      	movs	r2, r3
 8004230:	2100      	movs	r1, #0
 8004232:	f000 faa9 	bl	8004788 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004236:	1d3b      	adds	r3, r7, #4
 8004238:	0018      	movs	r0, r3
 800423a:	2334      	movs	r3, #52	; 0x34
 800423c:	001a      	movs	r2, r3
 800423e:	2100      	movs	r1, #0
 8004240:	f000 faa2 	bl	8004788 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	0018      	movs	r0, r3
 800424a:	f7fd fb71 	bl	8001930 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800424e:	193b      	adds	r3, r7, r4
 8004250:	2202      	movs	r2, #2
 8004252:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004254:	193b      	adds	r3, r7, r4
 8004256:	2280      	movs	r2, #128	; 0x80
 8004258:	0052      	lsls	r2, r2, #1
 800425a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800425c:	0021      	movs	r1, r4
 800425e:	187b      	adds	r3, r7, r1
 8004260:	2200      	movs	r2, #0
 8004262:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004264:	187b      	adds	r3, r7, r1
 8004266:	2240      	movs	r2, #64	; 0x40
 8004268:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800426a:	187b      	adds	r3, r7, r1
 800426c:	2202      	movs	r2, #2
 800426e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004270:	187b      	adds	r3, r7, r1
 8004272:	2202      	movs	r2, #2
 8004274:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004276:	187b      	adds	r3, r7, r1
 8004278:	2200      	movs	r2, #0
 800427a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800427c:	187b      	adds	r3, r7, r1
 800427e:	2208      	movs	r2, #8
 8004280:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004282:	187b      	adds	r3, r7, r1
 8004284:	2280      	movs	r2, #128	; 0x80
 8004286:	0292      	lsls	r2, r2, #10
 8004288:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800428a:	187b      	adds	r3, r7, r1
 800428c:	2280      	movs	r2, #128	; 0x80
 800428e:	0492      	lsls	r2, r2, #18
 8004290:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004292:	187b      	adds	r3, r7, r1
 8004294:	2280      	movs	r2, #128	; 0x80
 8004296:	0592      	lsls	r2, r2, #22
 8004298:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800429a:	187b      	adds	r3, r7, r1
 800429c:	0018      	movs	r0, r3
 800429e:	f7fd fb93 	bl	80019c8 <HAL_RCC_OscConfig>
 80042a2:	1e03      	subs	r3, r0, #0
 80042a4:	d001      	beq.n	80042aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80042a6:	f000 f91b 	bl	80044e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042aa:	2138      	movs	r1, #56	; 0x38
 80042ac:	187b      	adds	r3, r7, r1
 80042ae:	2207      	movs	r2, #7
 80042b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042b2:	187b      	adds	r3, r7, r1
 80042b4:	2202      	movs	r2, #2
 80042b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042b8:	187b      	adds	r3, r7, r1
 80042ba:	2200      	movs	r2, #0
 80042bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80042be:	187b      	adds	r3, r7, r1
 80042c0:	2200      	movs	r2, #0
 80042c2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80042c4:	187b      	adds	r3, r7, r1
 80042c6:	2102      	movs	r1, #2
 80042c8:	0018      	movs	r0, r3
 80042ca:	f7fd fe9d 	bl	8002008 <HAL_RCC_ClockConfig>
 80042ce:	1e03      	subs	r3, r0, #0
 80042d0:	d001      	beq.n	80042d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80042d2:	f000 f905 	bl	80044e0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80042d6:	1d3b      	adds	r3, r7, #4
 80042d8:	4a09      	ldr	r2, [pc, #36]	; (8004300 <SystemClock_Config+0xf0>)
 80042da:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80042dc:	1d3b      	adds	r3, r7, #4
 80042de:	2200      	movs	r2, #0
 80042e0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80042e2:	1d3b      	adds	r3, r7, #4
 80042e4:	2200      	movs	r2, #0
 80042e6:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042e8:	1d3b      	adds	r3, r7, #4
 80042ea:	0018      	movs	r0, r3
 80042ec:	f7fe f836 	bl	800235c <HAL_RCCEx_PeriphCLKConfig>
 80042f0:	1e03      	subs	r3, r0, #0
 80042f2:	d001      	beq.n	80042f8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80042f4:	f000 f8f4 	bl	80044e0 <Error_Handler>
  }
}
 80042f8:	46c0      	nop			; (mov r8, r8)
 80042fa:	46bd      	mov	sp, r7
 80042fc:	b021      	add	sp, #132	; 0x84
 80042fe:	bd90      	pop	{r4, r7, pc}
 8004300:	00004002 	.word	0x00004002

08004304 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800430a:	1d3b      	adds	r3, r7, #4
 800430c:	0018      	movs	r0, r3
 800430e:	230c      	movs	r3, #12
 8004310:	001a      	movs	r2, r3
 8004312:	2100      	movs	r1, #0
 8004314:	f000 fa38 	bl	8004788 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8004318:	4b2d      	ldr	r3, [pc, #180]	; (80043d0 <MX_ADC1_Init+0xcc>)
 800431a:	4a2e      	ldr	r2, [pc, #184]	; (80043d4 <MX_ADC1_Init+0xd0>)
 800431c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800431e:	4b2c      	ldr	r3, [pc, #176]	; (80043d0 <MX_ADC1_Init+0xcc>)
 8004320:	2280      	movs	r2, #128	; 0x80
 8004322:	05d2      	lsls	r2, r2, #23
 8004324:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8004326:	4b2a      	ldr	r3, [pc, #168]	; (80043d0 <MX_ADC1_Init+0xcc>)
 8004328:	2210      	movs	r2, #16
 800432a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800432c:	4b28      	ldr	r3, [pc, #160]	; (80043d0 <MX_ADC1_Init+0xcc>)
 800432e:	2200      	movs	r2, #0
 8004330:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004332:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <MX_ADC1_Init+0xcc>)
 8004334:	2200      	movs	r2, #0
 8004336:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004338:	4b25      	ldr	r3, [pc, #148]	; (80043d0 <MX_ADC1_Init+0xcc>)
 800433a:	2204      	movs	r2, #4
 800433c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800433e:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <MX_ADC1_Init+0xcc>)
 8004340:	2200      	movs	r2, #0
 8004342:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8004344:	4b22      	ldr	r3, [pc, #136]	; (80043d0 <MX_ADC1_Init+0xcc>)
 8004346:	2200      	movs	r2, #0
 8004348:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800434a:	4b21      	ldr	r3, [pc, #132]	; (80043d0 <MX_ADC1_Init+0xcc>)
 800434c:	2201      	movs	r2, #1
 800434e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8004350:	4b1f      	ldr	r3, [pc, #124]	; (80043d0 <MX_ADC1_Init+0xcc>)
 8004352:	2201      	movs	r2, #1
 8004354:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004356:	4b1e      	ldr	r3, [pc, #120]	; (80043d0 <MX_ADC1_Init+0xcc>)
 8004358:	2220      	movs	r2, #32
 800435a:	2100      	movs	r1, #0
 800435c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800435e:	4b1c      	ldr	r3, [pc, #112]	; (80043d0 <MX_ADC1_Init+0xcc>)
 8004360:	2200      	movs	r2, #0
 8004362:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004364:	4b1a      	ldr	r3, [pc, #104]	; (80043d0 <MX_ADC1_Init+0xcc>)
 8004366:	2200      	movs	r2, #0
 8004368:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800436a:	4b19      	ldr	r3, [pc, #100]	; (80043d0 <MX_ADC1_Init+0xcc>)
 800436c:	222c      	movs	r2, #44	; 0x2c
 800436e:	2100      	movs	r1, #0
 8004370:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004372:	4b17      	ldr	r3, [pc, #92]	; (80043d0 <MX_ADC1_Init+0xcc>)
 8004374:	2200      	movs	r2, #0
 8004376:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8004378:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <MX_ADC1_Init+0xcc>)
 800437a:	2200      	movs	r2, #0
 800437c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800437e:	4b14      	ldr	r3, [pc, #80]	; (80043d0 <MX_ADC1_Init+0xcc>)
 8004380:	2200      	movs	r2, #0
 8004382:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8004384:	4b12      	ldr	r3, [pc, #72]	; (80043d0 <MX_ADC1_Init+0xcc>)
 8004386:	223c      	movs	r2, #60	; 0x3c
 8004388:	2100      	movs	r1, #0
 800438a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800438c:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <MX_ADC1_Init+0xcc>)
 800438e:	2200      	movs	r2, #0
 8004390:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004392:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <MX_ADC1_Init+0xcc>)
 8004394:	0018      	movs	r0, r3
 8004396:	f7fc fae1 	bl	800095c <HAL_ADC_Init>
 800439a:	1e03      	subs	r3, r0, #0
 800439c:	d001      	beq.n	80043a2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800439e:	f000 f89f 	bl	80044e0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80043a2:	1d3b      	adds	r3, r7, #4
 80043a4:	2201      	movs	r2, #1
 80043a6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80043a8:	1d3b      	adds	r3, r7, #4
 80043aa:	2200      	movs	r2, #0
 80043ac:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80043ae:	1d3b      	adds	r3, r7, #4
 80043b0:	2200      	movs	r2, #0
 80043b2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80043b4:	1d3a      	adds	r2, r7, #4
 80043b6:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <MX_ADC1_Init+0xcc>)
 80043b8:	0011      	movs	r1, r2
 80043ba:	0018      	movs	r0, r3
 80043bc:	f7fc fdd4 	bl	8000f68 <HAL_ADC_ConfigChannel>
 80043c0:	1e03      	subs	r3, r0, #0
 80043c2:	d001      	beq.n	80043c8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80043c4:	f000 f88c 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80043c8:	46c0      	nop			; (mov r8, r8)
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b004      	add	sp, #16
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	2000002c 	.word	0x2000002c
 80043d4:	40012400 	.word	0x40012400

080043d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80043dc:	4b23      	ldr	r3, [pc, #140]	; (800446c <MX_USART2_UART_Init+0x94>)
 80043de:	4a24      	ldr	r2, [pc, #144]	; (8004470 <MX_USART2_UART_Init+0x98>)
 80043e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80043e2:	4b22      	ldr	r3, [pc, #136]	; (800446c <MX_USART2_UART_Init+0x94>)
 80043e4:	22e1      	movs	r2, #225	; 0xe1
 80043e6:	0252      	lsls	r2, r2, #9
 80043e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80043ea:	4b20      	ldr	r3, [pc, #128]	; (800446c <MX_USART2_UART_Init+0x94>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80043f0:	4b1e      	ldr	r3, [pc, #120]	; (800446c <MX_USART2_UART_Init+0x94>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80043f6:	4b1d      	ldr	r3, [pc, #116]	; (800446c <MX_USART2_UART_Init+0x94>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80043fc:	4b1b      	ldr	r3, [pc, #108]	; (800446c <MX_USART2_UART_Init+0x94>)
 80043fe:	220c      	movs	r2, #12
 8004400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004402:	4b1a      	ldr	r3, [pc, #104]	; (800446c <MX_USART2_UART_Init+0x94>)
 8004404:	2200      	movs	r2, #0
 8004406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004408:	4b18      	ldr	r3, [pc, #96]	; (800446c <MX_USART2_UART_Init+0x94>)
 800440a:	2200      	movs	r2, #0
 800440c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800440e:	4b17      	ldr	r3, [pc, #92]	; (800446c <MX_USART2_UART_Init+0x94>)
 8004410:	2200      	movs	r2, #0
 8004412:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004414:	4b15      	ldr	r3, [pc, #84]	; (800446c <MX_USART2_UART_Init+0x94>)
 8004416:	2200      	movs	r2, #0
 8004418:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800441a:	4b14      	ldr	r3, [pc, #80]	; (800446c <MX_USART2_UART_Init+0x94>)
 800441c:	2200      	movs	r2, #0
 800441e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004420:	4b12      	ldr	r3, [pc, #72]	; (800446c <MX_USART2_UART_Init+0x94>)
 8004422:	0018      	movs	r0, r3
 8004424:	f7fe f952 	bl	80026cc <HAL_UART_Init>
 8004428:	1e03      	subs	r3, r0, #0
 800442a:	d001      	beq.n	8004430 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800442c:	f000 f858 	bl	80044e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004430:	4b0e      	ldr	r3, [pc, #56]	; (800446c <MX_USART2_UART_Init+0x94>)
 8004432:	2100      	movs	r1, #0
 8004434:	0018      	movs	r0, r3
 8004436:	f7ff fde9 	bl	800400c <HAL_UARTEx_SetTxFifoThreshold>
 800443a:	1e03      	subs	r3, r0, #0
 800443c:	d001      	beq.n	8004442 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800443e:	f000 f84f 	bl	80044e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004442:	4b0a      	ldr	r3, [pc, #40]	; (800446c <MX_USART2_UART_Init+0x94>)
 8004444:	2100      	movs	r1, #0
 8004446:	0018      	movs	r0, r3
 8004448:	f7ff fe20 	bl	800408c <HAL_UARTEx_SetRxFifoThreshold>
 800444c:	1e03      	subs	r3, r0, #0
 800444e:	d001      	beq.n	8004454 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004450:	f000 f846 	bl	80044e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <MX_USART2_UART_Init+0x94>)
 8004456:	0018      	movs	r0, r3
 8004458:	f7ff fd9e 	bl	8003f98 <HAL_UARTEx_DisableFifoMode>
 800445c:	1e03      	subs	r3, r0, #0
 800445e:	d001      	beq.n	8004464 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004460:	f000 f83e 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004464:	46c0      	nop			; (mov r8, r8)
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	20000090 	.word	0x20000090
 8004470:	40004400 	.word	0x40004400

08004474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800447a:	1d3b      	adds	r3, r7, #4
 800447c:	0018      	movs	r0, r3
 800447e:	2314      	movs	r3, #20
 8004480:	001a      	movs	r2, r3
 8004482:	2100      	movs	r1, #0
 8004484:	f000 f980 	bl	8004788 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004488:	4b14      	ldr	r3, [pc, #80]	; (80044dc <MX_GPIO_Init+0x68>)
 800448a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800448c:	4b13      	ldr	r3, [pc, #76]	; (80044dc <MX_GPIO_Init+0x68>)
 800448e:	2101      	movs	r1, #1
 8004490:	430a      	orrs	r2, r1
 8004492:	635a      	str	r2, [r3, #52]	; 0x34
 8004494:	4b11      	ldr	r3, [pc, #68]	; (80044dc <MX_GPIO_Init+0x68>)
 8004496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004498:	2201      	movs	r2, #1
 800449a:	4013      	ands	r3, r2
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80044a0:	23a0      	movs	r3, #160	; 0xa0
 80044a2:	05db      	lsls	r3, r3, #23
 80044a4:	2200      	movs	r2, #0
 80044a6:	2120      	movs	r1, #32
 80044a8:	0018      	movs	r0, r3
 80044aa:	f7fd fa09 	bl	80018c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80044ae:	1d3b      	adds	r3, r7, #4
 80044b0:	2220      	movs	r2, #32
 80044b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044b4:	1d3b      	adds	r3, r7, #4
 80044b6:	2201      	movs	r2, #1
 80044b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ba:	1d3b      	adds	r3, r7, #4
 80044bc:	2200      	movs	r2, #0
 80044be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c0:	1d3b      	adds	r3, r7, #4
 80044c2:	2200      	movs	r2, #0
 80044c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c6:	1d3a      	adds	r2, r7, #4
 80044c8:	23a0      	movs	r3, #160	; 0xa0
 80044ca:	05db      	lsls	r3, r3, #23
 80044cc:	0011      	movs	r1, r2
 80044ce:	0018      	movs	r0, r3
 80044d0:	f7fd f892 	bl	80015f8 <HAL_GPIO_Init>

}
 80044d4:	46c0      	nop			; (mov r8, r8)
 80044d6:	46bd      	mov	sp, r7
 80044d8:	b006      	add	sp, #24
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40021000 	.word	0x40021000

080044e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80044e4:	46c0      	nop			; (mov r8, r8)
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044f2:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <HAL_MspInit+0x44>)
 80044f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044f6:	4b0e      	ldr	r3, [pc, #56]	; (8004530 <HAL_MspInit+0x44>)
 80044f8:	2101      	movs	r1, #1
 80044fa:	430a      	orrs	r2, r1
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
 80044fe:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <HAL_MspInit+0x44>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	2201      	movs	r2, #1
 8004504:	4013      	ands	r3, r2
 8004506:	607b      	str	r3, [r7, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800450a:	4b09      	ldr	r3, [pc, #36]	; (8004530 <HAL_MspInit+0x44>)
 800450c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800450e:	4b08      	ldr	r3, [pc, #32]	; (8004530 <HAL_MspInit+0x44>)
 8004510:	2180      	movs	r1, #128	; 0x80
 8004512:	0549      	lsls	r1, r1, #21
 8004514:	430a      	orrs	r2, r1
 8004516:	63da      	str	r2, [r3, #60]	; 0x3c
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <HAL_MspInit+0x44>)
 800451a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800451c:	2380      	movs	r3, #128	; 0x80
 800451e:	055b      	lsls	r3, r3, #21
 8004520:	4013      	ands	r3, r2
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	46bd      	mov	sp, r7
 800452a:	b002      	add	sp, #8
 800452c:	bd80      	pop	{r7, pc}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	40021000 	.word	0x40021000

08004534 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08a      	sub	sp, #40	; 0x28
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800453c:	2314      	movs	r3, #20
 800453e:	18fb      	adds	r3, r7, r3
 8004540:	0018      	movs	r0, r3
 8004542:	2314      	movs	r3, #20
 8004544:	001a      	movs	r2, r3
 8004546:	2100      	movs	r1, #0
 8004548:	f000 f91e 	bl	8004788 <memset>
  if(hadc->Instance==ADC1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1c      	ldr	r2, [pc, #112]	; (80045c4 <HAL_ADC_MspInit+0x90>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d132      	bne.n	80045bc <HAL_ADC_MspInit+0x88>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004556:	4b1c      	ldr	r3, [pc, #112]	; (80045c8 <HAL_ADC_MspInit+0x94>)
 8004558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800455a:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <HAL_ADC_MspInit+0x94>)
 800455c:	2180      	movs	r1, #128	; 0x80
 800455e:	0349      	lsls	r1, r1, #13
 8004560:	430a      	orrs	r2, r1
 8004562:	641a      	str	r2, [r3, #64]	; 0x40
 8004564:	4b18      	ldr	r3, [pc, #96]	; (80045c8 <HAL_ADC_MspInit+0x94>)
 8004566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004568:	2380      	movs	r3, #128	; 0x80
 800456a:	035b      	lsls	r3, r3, #13
 800456c:	4013      	ands	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004572:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <HAL_ADC_MspInit+0x94>)
 8004574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004576:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <HAL_ADC_MspInit+0x94>)
 8004578:	2101      	movs	r1, #1
 800457a:	430a      	orrs	r2, r1
 800457c:	635a      	str	r2, [r3, #52]	; 0x34
 800457e:	4b12      	ldr	r3, [pc, #72]	; (80045c8 <HAL_ADC_MspInit+0x94>)
 8004580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004582:	2201      	movs	r2, #1
 8004584:	4013      	ands	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800458a:	2114      	movs	r1, #20
 800458c:	187b      	adds	r3, r7, r1
 800458e:	2201      	movs	r2, #1
 8004590:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004592:	187b      	adds	r3, r7, r1
 8004594:	2203      	movs	r2, #3
 8004596:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004598:	187b      	adds	r3, r7, r1
 800459a:	2200      	movs	r2, #0
 800459c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800459e:	187a      	adds	r2, r7, r1
 80045a0:	23a0      	movs	r3, #160	; 0xa0
 80045a2:	05db      	lsls	r3, r3, #23
 80045a4:	0011      	movs	r1, r2
 80045a6:	0018      	movs	r0, r3
 80045a8:	f7fd f826 	bl	80015f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80045ac:	2200      	movs	r2, #0
 80045ae:	2100      	movs	r1, #0
 80045b0:	200c      	movs	r0, #12
 80045b2:	f7fc ff75 	bl	80014a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80045b6:	200c      	movs	r0, #12
 80045b8:	f7fc ff87 	bl	80014ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80045bc:	46c0      	nop			; (mov r8, r8)
 80045be:	46bd      	mov	sp, r7
 80045c0:	b00a      	add	sp, #40	; 0x28
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40012400 	.word	0x40012400
 80045c8:	40021000 	.word	0x40021000

080045cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08a      	sub	sp, #40	; 0x28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045d4:	2314      	movs	r3, #20
 80045d6:	18fb      	adds	r3, r7, r3
 80045d8:	0018      	movs	r0, r3
 80045da:	2314      	movs	r3, #20
 80045dc:	001a      	movs	r2, r3
 80045de:	2100      	movs	r1, #0
 80045e0:	f000 f8d2 	bl	8004788 <memset>
  if(huart->Instance==USART2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a1f      	ldr	r2, [pc, #124]	; (8004668 <HAL_UART_MspInit+0x9c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d138      	bne.n	8004660 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80045ee:	4b1f      	ldr	r3, [pc, #124]	; (800466c <HAL_UART_MspInit+0xa0>)
 80045f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045f2:	4b1e      	ldr	r3, [pc, #120]	; (800466c <HAL_UART_MspInit+0xa0>)
 80045f4:	2180      	movs	r1, #128	; 0x80
 80045f6:	0289      	lsls	r1, r1, #10
 80045f8:	430a      	orrs	r2, r1
 80045fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80045fc:	4b1b      	ldr	r3, [pc, #108]	; (800466c <HAL_UART_MspInit+0xa0>)
 80045fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004600:	2380      	movs	r3, #128	; 0x80
 8004602:	029b      	lsls	r3, r3, #10
 8004604:	4013      	ands	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800460a:	4b18      	ldr	r3, [pc, #96]	; (800466c <HAL_UART_MspInit+0xa0>)
 800460c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800460e:	4b17      	ldr	r3, [pc, #92]	; (800466c <HAL_UART_MspInit+0xa0>)
 8004610:	2101      	movs	r1, #1
 8004612:	430a      	orrs	r2, r1
 8004614:	635a      	str	r2, [r3, #52]	; 0x34
 8004616:	4b15      	ldr	r3, [pc, #84]	; (800466c <HAL_UART_MspInit+0xa0>)
 8004618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461a:	2201      	movs	r2, #1
 800461c:	4013      	ands	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004622:	2114      	movs	r1, #20
 8004624:	187b      	adds	r3, r7, r1
 8004626:	220c      	movs	r2, #12
 8004628:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800462a:	187b      	adds	r3, r7, r1
 800462c:	2202      	movs	r2, #2
 800462e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004630:	187b      	adds	r3, r7, r1
 8004632:	2200      	movs	r2, #0
 8004634:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004636:	187b      	adds	r3, r7, r1
 8004638:	2200      	movs	r2, #0
 800463a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800463c:	187b      	adds	r3, r7, r1
 800463e:	2201      	movs	r2, #1
 8004640:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004642:	187a      	adds	r2, r7, r1
 8004644:	23a0      	movs	r3, #160	; 0xa0
 8004646:	05db      	lsls	r3, r3, #23
 8004648:	0011      	movs	r1, r2
 800464a:	0018      	movs	r0, r3
 800464c:	f7fc ffd4 	bl	80015f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004650:	2200      	movs	r2, #0
 8004652:	2100      	movs	r1, #0
 8004654:	201c      	movs	r0, #28
 8004656:	f7fc ff23 	bl	80014a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800465a:	201c      	movs	r0, #28
 800465c:	f7fc ff35 	bl	80014ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004660:	46c0      	nop			; (mov r8, r8)
 8004662:	46bd      	mov	sp, r7
 8004664:	b00a      	add	sp, #40	; 0x28
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40004400 	.word	0x40004400
 800466c:	40021000 	.word	0x40021000

08004670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004674:	46c0      	nop			; (mov r8, r8)
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800467e:	e7fe      	b.n	800467e <HardFault_Handler+0x4>

08004680 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004684:	46c0      	nop			; (mov r8, r8)
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004698:	f7fc f820 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800469c:	46c0      	nop			; (mov r8, r8)
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80046a8:	4b03      	ldr	r3, [pc, #12]	; (80046b8 <ADC1_COMP_IRQHandler+0x14>)
 80046aa:	0018      	movs	r0, r3
 80046ac:	f7fc fb2c 	bl	8000d08 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80046b0:	46c0      	nop			; (mov r8, r8)
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	2000002c 	.word	0x2000002c

080046bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80046c0:	4b03      	ldr	r3, [pc, #12]	; (80046d0 <USART2_IRQHandler+0x14>)
 80046c2:	0018      	movs	r0, r3
 80046c4:	f7fe f858 	bl	8002778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80046c8:	46c0      	nop			; (mov r8, r8)
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	20000090 	.word	0x20000090

080046d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046d8:	4b03      	ldr	r3, [pc, #12]	; (80046e8 <SystemInit+0x14>)
 80046da:	2280      	movs	r2, #128	; 0x80
 80046dc:	0512      	lsls	r2, r2, #20
 80046de:	609a      	str	r2, [r3, #8]
#endif
}
 80046e0:	46c0      	nop			; (mov r8, r8)
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	e000ed00 	.word	0xe000ed00

080046ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80046ec:	480d      	ldr	r0, [pc, #52]	; (8004724 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80046ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80046f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80046f2:	e003      	b.n	80046fc <LoopCopyDataInit>

080046f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80046f4:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80046f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80046f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80046fa:	3104      	adds	r1, #4

080046fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80046fc:	480b      	ldr	r0, [pc, #44]	; (800472c <LoopForever+0xa>)
  ldr r3, =_edata
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <LoopForever+0xe>)
  adds r2, r0, r1
 8004700:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004702:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004704:	d3f6      	bcc.n	80046f4 <CopyDataInit>
  ldr r2, =_sbss
 8004706:	4a0b      	ldr	r2, [pc, #44]	; (8004734 <LoopForever+0x12>)
  b LoopFillZerobss
 8004708:	e002      	b.n	8004710 <LoopFillZerobss>

0800470a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800470a:	2300      	movs	r3, #0
  str  r3, [r2]
 800470c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800470e:	3204      	adds	r2, #4

08004710 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8004710:	4b09      	ldr	r3, [pc, #36]	; (8004738 <LoopForever+0x16>)
  cmp r2, r3
 8004712:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004714:	d3f9      	bcc.n	800470a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004716:	f7ff ffdd 	bl	80046d4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800471a:	f000 f811 	bl	8004740 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800471e:	f7ff fd61 	bl	80041e4 <main>

08004722 <LoopForever>:

LoopForever:
    b LoopForever
 8004722:	e7fe      	b.n	8004722 <LoopForever>
  ldr   r0, =_estack
 8004724:	20008fff 	.word	0x20008fff
  ldr r3, =_sidata
 8004728:	08004830 	.word	0x08004830
  ldr r0, =_sdata
 800472c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004730:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8004734:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8004738:	2000011c 	.word	0x2000011c

0800473c <CEC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800473c:	e7fe      	b.n	800473c <CEC_IRQHandler>
	...

08004740 <__libc_init_array>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	2600      	movs	r6, #0
 8004744:	4d0c      	ldr	r5, [pc, #48]	; (8004778 <__libc_init_array+0x38>)
 8004746:	4c0d      	ldr	r4, [pc, #52]	; (800477c <__libc_init_array+0x3c>)
 8004748:	1b64      	subs	r4, r4, r5
 800474a:	10a4      	asrs	r4, r4, #2
 800474c:	42a6      	cmp	r6, r4
 800474e:	d109      	bne.n	8004764 <__libc_init_array+0x24>
 8004750:	2600      	movs	r6, #0
 8004752:	f000 f821 	bl	8004798 <_init>
 8004756:	4d0a      	ldr	r5, [pc, #40]	; (8004780 <__libc_init_array+0x40>)
 8004758:	4c0a      	ldr	r4, [pc, #40]	; (8004784 <__libc_init_array+0x44>)
 800475a:	1b64      	subs	r4, r4, r5
 800475c:	10a4      	asrs	r4, r4, #2
 800475e:	42a6      	cmp	r6, r4
 8004760:	d105      	bne.n	800476e <__libc_init_array+0x2e>
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	00b3      	lsls	r3, r6, #2
 8004766:	58eb      	ldr	r3, [r5, r3]
 8004768:	4798      	blx	r3
 800476a:	3601      	adds	r6, #1
 800476c:	e7ee      	b.n	800474c <__libc_init_array+0xc>
 800476e:	00b3      	lsls	r3, r6, #2
 8004770:	58eb      	ldr	r3, [r5, r3]
 8004772:	4798      	blx	r3
 8004774:	3601      	adds	r6, #1
 8004776:	e7f2      	b.n	800475e <__libc_init_array+0x1e>
 8004778:	08004828 	.word	0x08004828
 800477c:	08004828 	.word	0x08004828
 8004780:	08004828 	.word	0x08004828
 8004784:	0800482c 	.word	0x0800482c

08004788 <memset>:
 8004788:	0003      	movs	r3, r0
 800478a:	1812      	adds	r2, r2, r0
 800478c:	4293      	cmp	r3, r2
 800478e:	d100      	bne.n	8004792 <memset+0xa>
 8004790:	4770      	bx	lr
 8004792:	7019      	strb	r1, [r3, #0]
 8004794:	3301      	adds	r3, #1
 8004796:	e7f9      	b.n	800478c <memset+0x4>

08004798 <_init>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr

080047a4 <_fini>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr
